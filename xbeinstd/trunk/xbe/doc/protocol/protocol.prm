#define CHAN_SIZE 3
#define MAX_RETRIES 5

mtype = {LifeSign, Execute, ExecuteAck, ExecuteNAck, Terminate, TerminateAck, Finished, FinishedAck, StatusReq, Status, Start, Shutdown, ShutdownAck};

byte done = 0;

/* define outcomes */
bit InstExecutedJob = false;
bit XbedExecutedJob = false;
bit ExecutedJob = false;

bit XbedSentJob = false;
bit InstGotJob = false;

bit InstFailed = false;
bit XbedFailed = false;

proctype Inst(chan in, out)
{
    byte retryCount = 0;
    bit lifeSignalSent = false;

StIdle:
    /* accept new jobs, status requests and send life signals,
       it is also possible to get terminate messages that are
       handled as no ops */
    printf("inst: state idle\n");
    if
        :: in ? Execute -> printf("inst: got execute request\n"); lifeSignalSent=false; InstGotJob = true; out ! ExecuteAck; goto StBusy;
        :: in ? Shutdown -> printf("inst: got shutdown request\n"); out ! ShutdownAck; goto StTerminated;
        :: in ? StatusReq -> printf("inst: got status request\n"); lifeSignalSent=false; out ! Status; goto StIdle;
        :: empty(in) -> goto StFailed;
        :: (! lifeSignalSent) -> lifeSignalSent = true; out ! LifeSign; goto StIdle;
    fi;

WaitForFinishedAck:
    if
    :: in ? FinishedAck -> goto StIdle;
    :: in ? Shutdown -> out ! ShutdownAck; goto StTerminated;
    :: timeout ->
        do
        :: (retryCount < MAX_RETRIES) ->
progress_finished:
            out ! Finished;
        :: else ->
            goto StFailed;
        od;
    fi;

StBusy:
    printf("inst: state busy\n");
    if
        :: in ? Shutdown -> printf("inst: got shutdown request\n"); out ! ShutdownAck; goto StTerminated;
        :: in ? Terminate -> printf("inst: got terminate request\n"); out ! TerminateAck; goto StIdle;
        :: in ? StatusReq -> printf("inst: got status request\n"); out ! Status; goto StBusy;
        /* spontaneously mark the job as finished */
        :: true -> InstExecutedJob = true; out ! Finished; printf("inst: execution finished\n"); goto WaitForFinishedAck;
    fi;

StFailed:
     InstFailed = true;
StTerminated:
end:
    do
    :: in ? _ -> printf("inst: flushing pending message\n"); skip;
    :: timeout ->
       if
       :: empty(in) -> break;
       fi;
    od;
    atomic { done = done + 1; }
    printf("inst: done\n");
}

proctype Xbed(chan in, out)
{
    byte retryCounter = 0;
    bit statusRequestSent = false;
StIdle:
    printf("xbed: state idle\n");
    if
        :: in ? LifeSign -> goto StIdle;
        :: true -> out ! Execute; XbedSentJob=true; statusRequestSent = false; goto WaitForExecuteAck;
        :: true -> out ! Shutdown; statusRequestSent = false; goto WaitForShutdownAck;
        :: (! statusRequestSent) -> out ! StatusReq; statusRequestSent = true; goto WaitForStatusIdle;
    fi;

WaitForExecuteAck:
    printf("xbed: waiting for execute-ack\n");
    /* XbedSentJob = true; */
    retryCounter = 0;
    do
    :: in ? LifeSign -> skip;
    :: in ? ExecuteAck ->
        printf("xbed: got ack\n");
progress_execute:
        goto StBusy;
    :: timeout ->
        if
        :: (retryCounter < MAX_RETRIES) ->
            out ! Execute;
            retryCounter++;
        :: else ->
            goto StFailed;
        fi;
    od;

WaitForShutdownAck:
    printf("xbed: waiting for shutdown-ack\n");
    retryCounter = 0;
    do
    :: in ? ShutdownAck -> goto StShutdown;
    :: in ? Finished -> out ! FinishedAck;
    :: in ? LifeSign -> skip;
    :: timeout ->
        if
        :: (retryCounter < MAX_RETRIES) ->
            out ! Shutdown;
            retryCounter++;
        :: else ->
            goto StFailed;
        fi;
    od;

WaitForTerminateAck:
    printf("xbed: waiting for terminate-ack\n");
    retryCounter = 0;
    do
    :: in ? TerminateAck -> goto StIdle;
    :: in ? Finished -> out ! FinishedAck;
    :: in ? LifeSign -> skip;
    :: timeout ->
        if
        :: (retryCounter < MAX_RETRIES) ->
            out ! Terminate;
            retryCounter++;
        :: else ->
            goto StFailed;
        fi;
    od;

WaitForStatusIdle:
    printf("xbed: waiting for status message (idle)\n");
    retryCounter = 0;
    do
    :: in ? Status -> goto StIdle;
    :: in ? LifeSign -> skip;
    :: timeout ->
        if
        :: (retryCounter < MAX_RETRIES) ->
            out ! StatusReq;
            retryCounter++;
        :: else ->
            goto StFailed;
        fi;
    od;
WaitForStatusBusy:
    printf("xbed: waiting for status message (busy)\n");
    retryCounter = 0;
    do
    :: in ? Status -> goto StBusy;
    :: in ? LifeSign -> skip;
    :: in ? Finished -> XbedExecutedJob = true; out ! FinishedAck;
    :: timeout ->
        if
        :: (retryCounter < MAX_RETRIES) ->
            out ! StatusReq;
            retryCounter++;
        :: else ->
            goto StFailed;
        fi;
    od;


StBusy:
    printf("xbed: state busy\n");
    if
        :: in ? Finished -> out ! FinishedAck; goto StIdle;
        :: in ? LifeSign -> goto StBusy;
           :: true -> statusRequestSent = false; out ! Terminate; goto WaitForTerminateAck;
           :: true -> statusRequestSent = false; out ! Shutdown; goto WaitForShutdownAck;
           :: (! statusRequestSent) -> statusRequestSent = true; out ! StatusReq; goto WaitForStatusBusy;
    fi;

StFailed:
    XbedFailed = true;
    printf("xbed: failed\n");
StShutdown:
end:
    do
    :: in ? _ -> skip;
    :: timeout ->
       if
       :: empty(in) -> break;
       fi;
    od;
    atomic { done = done + 1; }
    printf("xbed: done\n");
}

proctype lossy_daemon(chan c1, c2) {
    do
    :: c1 ? _; printf("message lost\n");
    :: c2 ? _; printf("message lost\n");
    :: (done == 2) -> goto end;
    od;
end:
    skip;
}

init {
    chan x2i = [CHAN_SIZE] of {mtype};
    chan i2x = [CHAN_SIZE] of {mtype};

    atomic {
        run Xbed(i2x, x2i);
        run Inst(x2i, i2x);
        run lossy_daemon(i2x, x2i);
    }

    do 
        :: (done == 2) -> break;
    od;
    assert(empty(x2i));
    assert(empty(i2x));
}
