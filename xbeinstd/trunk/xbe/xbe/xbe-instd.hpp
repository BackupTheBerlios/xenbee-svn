// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_TRUNK_XBE_ETC_XBE_SCHEMA_XBE_INSTD_HPP
#define CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_TRUNK_XBE_ETC_XBE_SCHEMA_XBE_INSTD_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xbeinstd
{
  class execute_t;
  class terminate_t;
  class status_req_t;
  class shutdown_t;
  class finished_ack_t;
  class failed_ack_t;
  class life_sign_t;
  class execute_ack_t;
  class terminate_ack_t;
  class shutdown_ack_t;
  class status_t;
  class finished_t;
  class failed_t;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace xbeinstd
{
  class execute_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    execute_t ();

    execute_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    execute_t (const execute_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual execute_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~execute_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class terminate_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    terminate_t ();

    terminate_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    terminate_t (const terminate_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual terminate_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~terminate_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class status_req_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    status_req_t ();

    status_req_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    status_req_t (const status_req_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual status_req_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~status_req_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class shutdown_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    shutdown_t ();

    shutdown_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    shutdown_t (const shutdown_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual shutdown_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~shutdown_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class finished_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    finished_ack_t ();

    finished_ack_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    finished_ack_t (const finished_ack_t& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual finished_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~finished_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class failed_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    failed_ack_t ();

    failed_ack_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    failed_ack_t (const failed_ack_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual failed_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~failed_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class life_sign_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    life_sign_t ();

    life_sign_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    life_sign_t (const life_sign_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual life_sign_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~life_sign_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class execute_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    execute_ack_t ();

    execute_ack_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    execute_ack_t (const execute_ack_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual execute_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~execute_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class terminate_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    terminate_ack_t ();

    terminate_ack_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    terminate_ack_t (const terminate_ack_t& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual terminate_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~terminate_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class shutdown_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    shutdown_ack_t ();

    shutdown_ack_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    shutdown_ack_t (const shutdown_ack_t& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual shutdown_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~shutdown_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class status_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    status_t ();

    status_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    status_t (const status_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual status_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~status_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class finished_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    finished_t ();

    finished_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    finished_t (const finished_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual finished_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~finished_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class failed_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    failed_t ();

    failed_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    failed_t (const failed_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual failed_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~failed_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xbeinstd
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_t >
  execute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_t >
  terminate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_req_t >
  status_req (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_ack_t >
  finished_ack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_ack_t >
  failed_ack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_t >
  shutdown (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::execute_ack_t >
  execute_ack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::terminate_ack_t >
  terminate_ack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::shutdown_ack_t >
  shutdown_ack (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::status_t >
  status (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::finished_t >
  finished (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::failed_t >
  failed (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbeinstd::life_sign_t >
  life_sign (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xbeinstd
{
  void
  operator<< (::xercesc::DOMElement&, const execute_t&);

  void
  operator<< (::xercesc::DOMElement&, const terminate_t&);

  void
  operator<< (::xercesc::DOMElement&, const status_req_t&);

  void
  operator<< (::xercesc::DOMElement&, const shutdown_t&);

  void
  operator<< (::xercesc::DOMElement&, const finished_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const failed_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const life_sign_t&);

  void
  operator<< (::xercesc::DOMElement&, const execute_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const terminate_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const shutdown_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const status_t&);

  void
  operator<< (::xercesc::DOMElement&, const finished_t&);

  void
  operator<< (::xercesc::DOMElement&, const failed_t&);

  // Serialize to std::ostream.
  //

  void
  execute (::std::ostream& os,
           const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  execute (::std::ostream& os,
           const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  execute (::std::ostream& os,
           const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  execute (::xercesc::XMLFormatTarget& ft,
           const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  execute (::xercesc::XMLFormatTarget& ft,
           const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  execute (::xercesc::XMLFormatTarget& ft,
           const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  execute (::xercesc::DOMDocument& d,
           const ::xbeinstd::execute_t& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  execute (const ::xbeinstd::execute_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  terminate (::std::ostream& os,
             const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  terminate (::std::ostream& os,
             const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  terminate (::std::ostream& os,
             const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  terminate (::xercesc::XMLFormatTarget& ft,
             const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  terminate (::xercesc::XMLFormatTarget& ft,
             const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  terminate (::xercesc::XMLFormatTarget& ft,
             const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  terminate (::xercesc::DOMDocument& d,
             const ::xbeinstd::terminate_t& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  terminate (const ::xbeinstd::terminate_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  status_req (::std::ostream& os,
              const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  status_req (::std::ostream& os,
              const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  status_req (::std::ostream& os,
              const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  status_req (::xercesc::XMLFormatTarget& ft,
              const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  status_req (::xercesc::XMLFormatTarget& ft,
              const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  status_req (::xercesc::XMLFormatTarget& ft,
              const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  status_req (::xercesc::DOMDocument& d,
              const ::xbeinstd::status_req_t& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  status_req (const ::xbeinstd::status_req_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  finished_ack (::std::ostream& os,
                const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  finished_ack (::std::ostream& os,
                const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  finished_ack (::std::ostream& os,
                const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  finished_ack (::xercesc::XMLFormatTarget& ft,
                const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  finished_ack (::xercesc::XMLFormatTarget& ft,
                const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  finished_ack (::xercesc::XMLFormatTarget& ft,
                const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  finished_ack (::xercesc::DOMDocument& d,
                const ::xbeinstd::finished_ack_t& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  finished_ack (const ::xbeinstd::finished_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  failed_ack (::std::ostream& os,
              const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  failed_ack (::std::ostream& os,
              const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  failed_ack (::std::ostream& os,
              const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  failed_ack (::xercesc::XMLFormatTarget& ft,
              const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  failed_ack (::xercesc::XMLFormatTarget& ft,
              const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  failed_ack (::xercesc::XMLFormatTarget& ft,
              const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  failed_ack (::xercesc::DOMDocument& d,
              const ::xbeinstd::failed_ack_t& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  failed_ack (const ::xbeinstd::failed_ack_t& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  shutdown (::std::ostream& os,
            const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  shutdown (::std::ostream& os,
            const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  shutdown (::std::ostream& os,
            const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  shutdown (::xercesc::XMLFormatTarget& ft,
            const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  shutdown (::xercesc::XMLFormatTarget& ft,
            const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  shutdown (::xercesc::XMLFormatTarget& ft,
            const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  shutdown (::xercesc::DOMDocument& d,
            const ::xbeinstd::shutdown_t& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  shutdown (const ::xbeinstd::shutdown_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  execute_ack (::std::ostream& os,
               const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  execute_ack (::std::ostream& os,
               const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  execute_ack (::std::ostream& os,
               const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  execute_ack (::xercesc::XMLFormatTarget& ft,
               const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  execute_ack (::xercesc::XMLFormatTarget& ft,
               const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  execute_ack (::xercesc::XMLFormatTarget& ft,
               const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  execute_ack (::xercesc::DOMDocument& d,
               const ::xbeinstd::execute_ack_t& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  execute_ack (const ::xbeinstd::execute_ack_t& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  terminate_ack (::std::ostream& os,
                 const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  terminate_ack (::std::ostream& os,
                 const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  terminate_ack (::std::ostream& os,
                 const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  terminate_ack (::xercesc::XMLFormatTarget& ft,
                 const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  terminate_ack (::xercesc::XMLFormatTarget& ft,
                 const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  terminate_ack (::xercesc::XMLFormatTarget& ft,
                 const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  terminate_ack (::xercesc::DOMDocument& d,
                 const ::xbeinstd::terminate_ack_t& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  terminate_ack (const ::xbeinstd::terminate_ack_t& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  shutdown_ack (::std::ostream& os,
                const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  shutdown_ack (::std::ostream& os,
                const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  shutdown_ack (::std::ostream& os,
                const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  shutdown_ack (::xercesc::XMLFormatTarget& ft,
                const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  shutdown_ack (::xercesc::XMLFormatTarget& ft,
                const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  shutdown_ack (::xercesc::XMLFormatTarget& ft,
                const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  shutdown_ack (::xercesc::DOMDocument& d,
                const ::xbeinstd::shutdown_ack_t& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  shutdown_ack (const ::xbeinstd::shutdown_ack_t& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  status (::std::ostream& os,
          const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  status (::std::ostream& os,
          const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  status (::std::ostream& os,
          const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  status (::xercesc::XMLFormatTarget& ft,
          const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  status (::xercesc::XMLFormatTarget& ft,
          const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  status (::xercesc::XMLFormatTarget& ft,
          const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  status (::xercesc::DOMDocument& d,
          const ::xbeinstd::status_t& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  status (const ::xbeinstd::status_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  finished (::std::ostream& os,
            const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  finished (::std::ostream& os,
            const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  finished (::std::ostream& os,
            const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  finished (::xercesc::XMLFormatTarget& ft,
            const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  finished (::xercesc::XMLFormatTarget& ft,
            const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  finished (::xercesc::XMLFormatTarget& ft,
            const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  finished (::xercesc::DOMDocument& d,
            const ::xbeinstd::finished_t& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  finished (const ::xbeinstd::finished_t& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  failed (::std::ostream& os,
          const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  failed (::std::ostream& os,
          const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  failed (::std::ostream& os,
          const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  failed (::xercesc::XMLFormatTarget& ft,
          const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  failed (::xercesc::XMLFormatTarget& ft,
          const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  failed (::xercesc::XMLFormatTarget& ft,
          const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  failed (::xercesc::DOMDocument& d,
          const ::xbeinstd::failed_t& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  failed (const ::xbeinstd::failed_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  life_sign (::std::ostream& os,
             const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  life_sign (::std::ostream& os,
             const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  life_sign (::std::ostream& os,
             const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  life_sign (::xercesc::XMLFormatTarget& ft,
             const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  life_sign (::xercesc::XMLFormatTarget& ft,
             const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  life_sign (::xercesc::XMLFormatTarget& ft,
             const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  life_sign (::xercesc::DOMDocument& d,
             const ::xbeinstd::life_sign_t& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  life_sign (const ::xbeinstd::life_sign_t& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_TRUNK_XBE_ETC_XBE_SCHEMA_XBE_INSTD_HPP
