// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_TRUNK_XBE_ETC_XBE_SCHEMA_XBE_MSG_HPP
#define CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_TRUNK_XBE_ETC_XBE_SCHEMA_XBE_MSG_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xbemsg
{
  class message_t;
  class header_t;
  class body_t;
  class execute_t;
  class terminate_t;
  class status_req_t;
  class shutdown_t;
  class finished_ack_t;
  class failed_ack_t;
  class life_sign_t;
  class execute_ack_t;
  class terminate_ack_t;
  class shutdown_ack_t;
  class status_t;
  class finished_t;
  class failed_t;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "jsdl.hpp"

#include "jsdl-posix.hpp"

namespace xbemsg
{
  class message_t: public ::xml_schema::type
  {
    public:
    // header
    // 
    typedef ::xbemsg::header_t header_type;
    typedef ::xsd::cxx::tree::traits< header_type, char > header_traits;

    const header_type&
    header () const;

    header_type&
    header ();

    void
    header (const header_type& x);

    void
    header (::std::auto_ptr< header_type > p);

    // body
    // 
    typedef ::xbemsg::body_t body_type;
    typedef ::xsd::cxx::tree::traits< body_type, char > body_traits;

    const body_type&
    body () const;

    body_type&
    body ();

    void
    body (const body_type& x);

    void
    body (::std::auto_ptr< body_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    message_t (const header_type&,
               const body_type&);

    message_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    message_t (const message_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual message_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~message_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< header_type > header_;
    ::xsd::cxx::tree::one< body_type > body_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class header_t: public ::xml_schema::type
  {
    public:
    // to
    // 
    typedef ::xml_schema::string to_type;
    typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

    const to_type&
    to () const;

    to_type&
    to ();

    void
    to (const to_type& x);

    void
    to (::std::auto_ptr< to_type > p);

    // from
    // 
    typedef ::xml_schema::string from_type;
    typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

    const from_type&
    from () const;

    from_type&
    from ();

    void
    from (const from_type& x);

    void
    from (::std::auto_ptr< from_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // conversation-id
    // 
    typedef ::xml_schema::string conversation_id_type;
    typedef ::xsd::cxx::tree::traits< conversation_id_type, char > conversation_id_traits;

    const conversation_id_type&
    conversation_id () const;

    conversation_id_type&
    conversation_id ();

    void
    conversation_id (const conversation_id_type& x);

    void
    conversation_id (::std::auto_ptr< conversation_id_type > p);

    static const conversation_id_type&
    conversation_id_default_value ();

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    header_t (const to_type&,
              const from_type&);

    header_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    header_t (const header_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual header_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~header_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< to_type > to_;
    ::xsd::cxx::tree::one< from_type > from_;
    any_sequence any_;
    ::xsd::cxx::tree::one< conversation_id_type > conversation_id_;
    static const conversation_id_type conversation_id_default_value_;
    any_attribute_set any_attribute_;
  };

  class body_t: public ::xml_schema::type
  {
    public:
    // execute
    // 
    typedef ::xbemsg::execute_t execute_type;
    typedef ::xsd::cxx::tree::optional< execute_type > execute_optional;
    typedef ::xsd::cxx::tree::traits< execute_type, char > execute_traits;

    const execute_optional&
    execute () const;

    execute_optional&
    execute ();

    void
    execute (const execute_type& x);

    void
    execute (const execute_optional& x);

    void
    execute (::std::auto_ptr< execute_type > p);

    // terminate
    // 
    typedef ::xbemsg::terminate_t terminate_type;
    typedef ::xsd::cxx::tree::optional< terminate_type > terminate_optional;
    typedef ::xsd::cxx::tree::traits< terminate_type, char > terminate_traits;

    const terminate_optional&
    terminate () const;

    terminate_optional&
    terminate ();

    void
    terminate (const terminate_type& x);

    void
    terminate (const terminate_optional& x);

    void
    terminate (::std::auto_ptr< terminate_type > p);

    // status-req
    // 
    typedef ::xbemsg::status_req_t status_req_type;
    typedef ::xsd::cxx::tree::optional< status_req_type > status_req_optional;
    typedef ::xsd::cxx::tree::traits< status_req_type, char > status_req_traits;

    const status_req_optional&
    status_req () const;

    status_req_optional&
    status_req ();

    void
    status_req (const status_req_type& x);

    void
    status_req (const status_req_optional& x);

    void
    status_req (::std::auto_ptr< status_req_type > p);

    // shutdown
    // 
    typedef ::xbemsg::shutdown_t shutdown_type;
    typedef ::xsd::cxx::tree::optional< shutdown_type > shutdown_optional;
    typedef ::xsd::cxx::tree::traits< shutdown_type, char > shutdown_traits;

    const shutdown_optional&
    shutdown () const;

    shutdown_optional&
    shutdown ();

    void
    shutdown (const shutdown_type& x);

    void
    shutdown (const shutdown_optional& x);

    void
    shutdown (::std::auto_ptr< shutdown_type > p);

    // finished-ack
    // 
    typedef ::xbemsg::finished_ack_t finished_ack_type;
    typedef ::xsd::cxx::tree::optional< finished_ack_type > finished_ack_optional;
    typedef ::xsd::cxx::tree::traits< finished_ack_type, char > finished_ack_traits;

    const finished_ack_optional&
    finished_ack () const;

    finished_ack_optional&
    finished_ack ();

    void
    finished_ack (const finished_ack_type& x);

    void
    finished_ack (const finished_ack_optional& x);

    void
    finished_ack (::std::auto_ptr< finished_ack_type > p);

    // failed-ack
    // 
    typedef ::xbemsg::failed_ack_t failed_ack_type;
    typedef ::xsd::cxx::tree::optional< failed_ack_type > failed_ack_optional;
    typedef ::xsd::cxx::tree::traits< failed_ack_type, char > failed_ack_traits;

    const failed_ack_optional&
    failed_ack () const;

    failed_ack_optional&
    failed_ack ();

    void
    failed_ack (const failed_ack_type& x);

    void
    failed_ack (const failed_ack_optional& x);

    void
    failed_ack (::std::auto_ptr< failed_ack_type > p);

    // life-sign
    // 
    typedef ::xbemsg::life_sign_t life_sign_type;
    typedef ::xsd::cxx::tree::optional< life_sign_type > life_sign_optional;
    typedef ::xsd::cxx::tree::traits< life_sign_type, char > life_sign_traits;

    const life_sign_optional&
    life_sign () const;

    life_sign_optional&
    life_sign ();

    void
    life_sign (const life_sign_type& x);

    void
    life_sign (const life_sign_optional& x);

    void
    life_sign (::std::auto_ptr< life_sign_type > p);

    // execute-ack
    // 
    typedef ::xbemsg::execute_ack_t execute_ack_type;
    typedef ::xsd::cxx::tree::optional< execute_ack_type > execute_ack_optional;
    typedef ::xsd::cxx::tree::traits< execute_ack_type, char > execute_ack_traits;

    const execute_ack_optional&
    execute_ack () const;

    execute_ack_optional&
    execute_ack ();

    void
    execute_ack (const execute_ack_type& x);

    void
    execute_ack (const execute_ack_optional& x);

    void
    execute_ack (::std::auto_ptr< execute_ack_type > p);

    // terminate-ack
    // 
    typedef ::xbemsg::terminate_ack_t terminate_ack_type;
    typedef ::xsd::cxx::tree::optional< terminate_ack_type > terminate_ack_optional;
    typedef ::xsd::cxx::tree::traits< terminate_ack_type, char > terminate_ack_traits;

    const terminate_ack_optional&
    terminate_ack () const;

    terminate_ack_optional&
    terminate_ack ();

    void
    terminate_ack (const terminate_ack_type& x);

    void
    terminate_ack (const terminate_ack_optional& x);

    void
    terminate_ack (::std::auto_ptr< terminate_ack_type > p);

    // shutdown-ack
    // 
    typedef ::xbemsg::shutdown_ack_t shutdown_ack_type;
    typedef ::xsd::cxx::tree::optional< shutdown_ack_type > shutdown_ack_optional;
    typedef ::xsd::cxx::tree::traits< shutdown_ack_type, char > shutdown_ack_traits;

    const shutdown_ack_optional&
    shutdown_ack () const;

    shutdown_ack_optional&
    shutdown_ack ();

    void
    shutdown_ack (const shutdown_ack_type& x);

    void
    shutdown_ack (const shutdown_ack_optional& x);

    void
    shutdown_ack (::std::auto_ptr< shutdown_ack_type > p);

    // status
    // 
    typedef ::xbemsg::status_t status_type;
    typedef ::xsd::cxx::tree::optional< status_type > status_optional;
    typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

    const status_optional&
    status () const;

    status_optional&
    status ();

    void
    status (const status_type& x);

    void
    status (const status_optional& x);

    void
    status (::std::auto_ptr< status_type > p);

    // finished
    // 
    typedef ::xbemsg::finished_t finished_type;
    typedef ::xsd::cxx::tree::optional< finished_type > finished_optional;
    typedef ::xsd::cxx::tree::traits< finished_type, char > finished_traits;

    const finished_optional&
    finished () const;

    finished_optional&
    finished ();

    void
    finished (const finished_type& x);

    void
    finished (const finished_optional& x);

    void
    finished (::std::auto_ptr< finished_type > p);

    // failed
    // 
    typedef ::xbemsg::failed_t failed_type;
    typedef ::xsd::cxx::tree::optional< failed_type > failed_optional;
    typedef ::xsd::cxx::tree::traits< failed_type, char > failed_traits;

    const failed_optional&
    failed () const;

    failed_optional&
    failed ();

    void
    failed (const failed_type& x);

    void
    failed (const failed_optional& x);

    void
    failed (::std::auto_ptr< failed_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    body_t ();

    body_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    body_t (const body_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual body_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~body_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    execute_optional execute_;
    terminate_optional terminate_;
    status_req_optional status_req_;
    shutdown_optional shutdown_;
    finished_ack_optional finished_ack_;
    failed_ack_optional failed_ack_;
    life_sign_optional life_sign_;
    execute_ack_optional execute_ack_;
    terminate_ack_optional terminate_ack_;
    shutdown_ack_optional shutdown_ack_;
    status_optional status_;
    finished_optional finished_;
    failed_optional failed_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class execute_t: public ::xml_schema::type
  {
    public:
    // task
    // 
    typedef ::jsdl::JobDescription_Type task_type;
    typedef ::xsd::cxx::tree::optional< task_type > task_optional;
    typedef ::xsd::cxx::tree::traits< task_type, char > task_traits;

    const task_optional&
    task () const;

    task_optional&
    task ();

    void
    task (const task_type& x);

    void
    task (const task_optional& x);

    void
    task (::std::auto_ptr< task_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    execute_t ();

    execute_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    execute_t (const execute_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual execute_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~execute_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    task_optional task_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class terminate_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    terminate_t ();

    terminate_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    terminate_t (const terminate_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual terminate_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~terminate_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class status_req_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    status_req_t ();

    status_req_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    status_req_t (const status_req_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual status_req_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~status_req_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class shutdown_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    shutdown_t ();

    shutdown_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    shutdown_t (const shutdown_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual shutdown_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~shutdown_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class finished_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    finished_ack_t ();

    finished_ack_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    finished_ack_t (const finished_ack_t& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual finished_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~finished_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class failed_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    failed_ack_t ();

    failed_ack_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    failed_ack_t (const failed_ack_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual failed_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~failed_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class life_sign_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    life_sign_t ();

    life_sign_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    life_sign_t (const life_sign_t& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual life_sign_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~life_sign_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class execute_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    execute_ack_t ();

    execute_ack_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    execute_ack_t (const execute_ack_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual execute_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~execute_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class terminate_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    terminate_ack_t ();

    terminate_ack_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    terminate_ack_t (const terminate_ack_t& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual terminate_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~terminate_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class shutdown_ack_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    shutdown_ack_t ();

    shutdown_ack_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    shutdown_ack_t (const shutdown_ack_t& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual shutdown_ack_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~shutdown_ack_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class status_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    status_t ();

    status_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    status_t (const status_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual status_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~status_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class finished_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    finished_t ();

    finished_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    finished_t (const finished_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual finished_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~finished_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class failed_t: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    failed_t ();

    failed_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    failed_t (const failed_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual failed_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~failed_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    any_attribute_set any_attribute_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xbemsg
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xbemsg
{
  void
  operator<< (::xercesc::DOMElement&, const message_t&);

  void
  operator<< (::xercesc::DOMElement&, const header_t&);

  void
  operator<< (::xercesc::DOMElement&, const body_t&);

  void
  operator<< (::xercesc::DOMElement&, const execute_t&);

  void
  operator<< (::xercesc::DOMElement&, const terminate_t&);

  void
  operator<< (::xercesc::DOMElement&, const status_req_t&);

  void
  operator<< (::xercesc::DOMElement&, const shutdown_t&);

  void
  operator<< (::xercesc::DOMElement&, const finished_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const failed_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const life_sign_t&);

  void
  operator<< (::xercesc::DOMElement&, const execute_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const terminate_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const shutdown_ack_t&);

  void
  operator<< (::xercesc::DOMElement&, const status_t&);

  void
  operator<< (::xercesc::DOMElement&, const finished_t&);

  void
  operator<< (::xercesc::DOMElement&, const failed_t&);

  // Serialize to std::ostream.
  //

  void
  message (::std::ostream& os,
           const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::std::ostream& os,
           const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::std::ostream& os,
           const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  message (::xercesc::XMLFormatTarget& ft,
           const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::xercesc::XMLFormatTarget& ft,
           const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::xercesc::XMLFormatTarget& ft,
           const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  message (::xercesc::DOMDocument& d,
           const ::xbemsg::message_t& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  message (const ::xbemsg::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_TRUNK_XBE_ETC_XBE_SCHEMA_XBE_MSG_HPP
