%{
//
// Finite state machine for the XbeInstd
//
%}

%include <xbe/event/ExecuteEvent.hpp>
%include <xbe/event/ShutdownEvent.hpp>
%include <xbe/event/LifeSignEvent.hpp>
%include <xbe/event/StatusReqEvent.hpp>
%include <xbe/event/TerminateEvent.hpp>
%include <xbe/event/FinishedEvent.hpp>
%include <xbe/event/FinishedAckEvent.hpp>
%include <xbe/event/FailedEvent.hpp>
%include <xbe/event/FailedAckEvent.hpp>
%include <signal.h>

%package xbe
%class XbeInstd
%header XbeInstd.hpp

%start XbeInstdFSM::Init
%map XbeInstdFSM

%%
Init
{
    Start
        Idle
        {
            do_start_lifesign();
        }
}

Idle
{
    Execute(msg: xbe::event::ExecuteEvent&)
        Busy
        {
            do_send_execute_ack(msg);
            do_execute(msg);
        }

    Shutdown(msg: xbe::event::ShutdownEvent&)
        Shutdown
        {
            do_shutdown(msg);
        }

    Terminate(msg: xbe::event::TerminateEvent&)
        nil
        {
            do_terminate();
        }

    FinishedAck(msg: xbe::event::FinishedAckEvent&)
        nil
        { }
    Finished
        nil
        { }
 }

Busy
{
    Execute(msg: xbe::event::ExecuteEvent&)
        nil
        {
            do_send_execute_ack(msg);
        }
 
    Finished
        WaitForFinishedAck
        {
            do_task_finished();
        }

/*
    Failed
        WaitForFailedAck
        {
            do_task_failed();
        }
*/

    Terminate(msg: xbe::event::TerminateEvent&)
        WaitForTaskTermination
        {
            do_terminate_job(SIGTERM);
        }

    Shutdown(msg: xbe::event::ShutdownEvent&)
        Shutdown
        {
            do_terminate_job(SIGKILL);
            do_shutdown(msg);
        }
}

WaitForTaskTermination
Entry { reset_retryCounter(); do_start_timer(); }
Exit  { do_stop_timer();  }
{
    Finished
        Idle
        {
            do_terminate();
        }
    Timeout
        [ctxt.retryCounter() < ctxt.maxRetries()]
        nil
        {
            do_terminate_job(SIGTERM);
            inc_retryCounter();
        }
    Timeout
        Idle
        {
            do_terminate_job(SIGKILL);
            do_terminate();
        }

    Terminate
        nil
        {}        
}

WaitForFinishedAck
Entry { reset_retryCounter(); do_start_timer(); }
Exit  { do_stop_timer();  }
{
    FinishedAck(msg: xbe::event::FinishedAckEvent&)
        Idle
        {
            do_finished_ack(msg);
        }

    Timeout
        [ctxt.retryCounter() < ctxt.maxRetries()]
        nil
        {
            do_task_finished();
            inc_retryCounter();
        }
    Timeout
        Failed
        {
            do_failed();
        }

    Shutdown(msg: xbe::event::ShutdownEvent&)
        Shutdown
        {
            do_shutdown(msg);
        }

    Terminate(msg: xbe::event::TerminateEvent&)
        Idle
        {
        }
}

/*
WaitForFailedAck
Entry { reset_retryCounter(); do_start_timer(); }
Exit  { do_stop_timer();  }
{
    FailedAck(msg: xbe::event::FailedAckEvent&)
        Idle
        {
            do_stop_timer();
            do_failed_ack(msg);
        }

    Timeout
        [ctxt.retryCounter() < ctxt.maxRetries()]
        WaitForFailedAck
        {
            do_task_failed();
        }
    Timeout
        Failed
        {
            do_failed();
        }

    Shutdown(msg: xbe::event::ShutdownEvent&)
        Shutdown
        {
            do_shutdown(msg);
        }
    Terminate(msg: xbe::event::TerminateEvent&)
        Idle
        {
        }
}
*/

Shutdown
Entry { do_stop_lifesign(); do_stop_timer(); }
{
    // don't send life signals
    LifeSign
        nil
        { }

    StatusReq(msg: xbe::event::StatusReqEvent&)
        nil
        { }
}

Failed
Entry { do_stop_lifesign(); do_stop_timer(); }
{
    // don't send life signals
    LifeSign
        nil
        { }

    StatusReq(msg: xbe::event::StatusReqEvent&)
        nil
        { }
}

Default
{
    Execute(msg: xbe::event::ExecuteEvent&)
        nil
        {
            // ignore further execute requests
            // only state Idle provides Execute
        }

    // status requests should always be handled
    StatusReq(msg: xbe::event::StatusReqEvent&)
        nil
        {
            do_send_status(msg);
        }

    // life signals should always be handled
    LifeSign
        nil
        {
            do_send_lifesign();
        }
}

%%
