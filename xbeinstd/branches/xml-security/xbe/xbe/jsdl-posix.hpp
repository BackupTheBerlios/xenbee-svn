// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_BRANCHES_XML_SECURITY_XBE_ETC_XBE_SCHEMA_JSDL_POSIX_HPP
#define CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_BRANCHES_XML_SECURITY_XBE_ETC_XBE_SCHEMA_JSDL_POSIX_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace jsdlPosix
{
  class Environment_Type;
  class Argument_Type;
  class FileName_Type;
  class DirectoryName_Type;
  class Limits_Type;
  class UserName_Type;
  class GroupName_Type;
  class POSIXApplication_Type;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace jsdlPosix
{
  class Environment_Type: public ::xml_schema::string
  {
    public:
    // name
    // 
    typedef ::xml_schema::ncname name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // filesystemName
    // 
    typedef ::xml_schema::ncname filesystemName_type;
    typedef ::xsd::cxx::tree::optional< filesystemName_type > filesystemName_optional;
    typedef ::xsd::cxx::tree::traits< filesystemName_type, char > filesystemName_traits;

    const filesystemName_optional&
    filesystemName () const;

    filesystemName_optional&
    filesystemName ();

    void
    filesystemName (const filesystemName_type& x);

    void
    filesystemName (const filesystemName_optional& x);

    void
    filesystemName (::std::auto_ptr< filesystemName_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Environment_Type (const name_type&);

    Environment_Type (const char*,
                      const name_type&);

    Environment_Type (const ::std::string&,
                      const name_type&);

    Environment_Type (const ::xml_schema::string&,
                      const name_type&);

    Environment_Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    Environment_Type (const Environment_Type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual Environment_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Environment_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< name_type > name_;
    filesystemName_optional filesystemName_;
    any_attribute_set any_attribute_;
  };

  class Argument_Type: public ::xml_schema::normalized_string
  {
    public:
    // filesystemName
    // 
    typedef ::xml_schema::ncname filesystemName_type;
    typedef ::xsd::cxx::tree::optional< filesystemName_type > filesystemName_optional;
    typedef ::xsd::cxx::tree::traits< filesystemName_type, char > filesystemName_traits;

    const filesystemName_optional&
    filesystemName () const;

    filesystemName_optional&
    filesystemName ();

    void
    filesystemName (const filesystemName_type& x);

    void
    filesystemName (const filesystemName_optional& x);

    void
    filesystemName (::std::auto_ptr< filesystemName_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Argument_Type ();

    Argument_Type (const char*);

    Argument_Type (const ::std::string&);

    Argument_Type (const ::xml_schema::normalized_string&);

    Argument_Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    Argument_Type (const Argument_Type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual Argument_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Argument_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    filesystemName_optional filesystemName_;
    any_attribute_set any_attribute_;
  };

  class FileName_Type: public ::xml_schema::string
  {
    public:
    // filesystemName
    // 
    typedef ::xml_schema::ncname filesystemName_type;
    typedef ::xsd::cxx::tree::optional< filesystemName_type > filesystemName_optional;
    typedef ::xsd::cxx::tree::traits< filesystemName_type, char > filesystemName_traits;

    const filesystemName_optional&
    filesystemName () const;

    filesystemName_optional&
    filesystemName ();

    void
    filesystemName (const filesystemName_type& x);

    void
    filesystemName (const filesystemName_optional& x);

    void
    filesystemName (::std::auto_ptr< filesystemName_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    FileName_Type ();

    FileName_Type (const char*);

    FileName_Type (const ::std::string&);

    FileName_Type (const ::xml_schema::string&);

    FileName_Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    FileName_Type (const FileName_Type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual FileName_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~FileName_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    filesystemName_optional filesystemName_;
    any_attribute_set any_attribute_;
  };

  class DirectoryName_Type: public ::xml_schema::string
  {
    public:
    // filesystemName
    // 
    typedef ::xml_schema::ncname filesystemName_type;
    typedef ::xsd::cxx::tree::optional< filesystemName_type > filesystemName_optional;
    typedef ::xsd::cxx::tree::traits< filesystemName_type, char > filesystemName_traits;

    const filesystemName_optional&
    filesystemName () const;

    filesystemName_optional&
    filesystemName ();

    void
    filesystemName (const filesystemName_type& x);

    void
    filesystemName (const filesystemName_optional& x);

    void
    filesystemName (::std::auto_ptr< filesystemName_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    DirectoryName_Type ();

    DirectoryName_Type (const char*);

    DirectoryName_Type (const ::std::string&);

    DirectoryName_Type (const ::xml_schema::string&);

    DirectoryName_Type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    DirectoryName_Type (const DirectoryName_Type& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual DirectoryName_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DirectoryName_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    filesystemName_optional filesystemName_;
    any_attribute_set any_attribute_;
  };

  class Limits_Type: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >
  {
    public:
    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Limits_Type (const ::xml_schema::non_negative_integer&);

    Limits_Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    Limits_Type (const Limits_Type& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual Limits_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Limits_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_attribute_set any_attribute_;
  };

  class UserName_Type: public ::xml_schema::string
  {
    public:
    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    UserName_Type ();

    UserName_Type (const char*);

    UserName_Type (const ::std::string&);

    UserName_Type (const ::xml_schema::string&);

    UserName_Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    UserName_Type (const UserName_Type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual UserName_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~UserName_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_attribute_set any_attribute_;
  };

  class GroupName_Type: public ::xml_schema::string
  {
    public:
    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    GroupName_Type ();

    GroupName_Type (const char*);

    GroupName_Type (const ::std::string&);

    GroupName_Type (const ::xml_schema::string&);

    GroupName_Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    GroupName_Type (const GroupName_Type& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual GroupName_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~GroupName_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_attribute_set any_attribute_;
  };

  class POSIXApplication_Type: public ::xml_schema::type
  {
    public:
    // Executable
    // 
    typedef ::jsdlPosix::FileName_Type Executable_type;
    typedef ::xsd::cxx::tree::optional< Executable_type > Executable_optional;
    typedef ::xsd::cxx::tree::traits< Executable_type, char > Executable_traits;

    const Executable_optional&
    Executable () const;

    Executable_optional&
    Executable ();

    void
    Executable (const Executable_type& x);

    void
    Executable (const Executable_optional& x);

    void
    Executable (::std::auto_ptr< Executable_type > p);

    // Argument
    // 
    typedef ::jsdlPosix::Argument_Type Argument_type;
    typedef ::xsd::cxx::tree::sequence< Argument_type > Argument_sequence;
    typedef Argument_sequence::iterator Argument_iterator;
    typedef Argument_sequence::const_iterator Argument_const_iterator;
    typedef ::xsd::cxx::tree::traits< Argument_type, char > Argument_traits;

    const Argument_sequence&
    Argument () const;

    Argument_sequence&
    Argument ();

    void
    Argument (const Argument_sequence& s);

    // Input
    // 
    typedef ::jsdlPosix::FileName_Type Input_type;
    typedef ::xsd::cxx::tree::optional< Input_type > Input_optional;
    typedef ::xsd::cxx::tree::traits< Input_type, char > Input_traits;

    const Input_optional&
    Input () const;

    Input_optional&
    Input ();

    void
    Input (const Input_type& x);

    void
    Input (const Input_optional& x);

    void
    Input (::std::auto_ptr< Input_type > p);

    // Output
    // 
    typedef ::jsdlPosix::FileName_Type Output_type;
    typedef ::xsd::cxx::tree::optional< Output_type > Output_optional;
    typedef ::xsd::cxx::tree::traits< Output_type, char > Output_traits;

    const Output_optional&
    Output () const;

    Output_optional&
    Output ();

    void
    Output (const Output_type& x);

    void
    Output (const Output_optional& x);

    void
    Output (::std::auto_ptr< Output_type > p);

    // Error
    // 
    typedef ::jsdlPosix::FileName_Type Error_type;
    typedef ::xsd::cxx::tree::optional< Error_type > Error_optional;
    typedef ::xsd::cxx::tree::traits< Error_type, char > Error_traits;

    const Error_optional&
    Error () const;

    Error_optional&
    Error ();

    void
    Error (const Error_type& x);

    void
    Error (const Error_optional& x);

    void
    Error (::std::auto_ptr< Error_type > p);

    // WorkingDirectory
    // 
    typedef ::jsdlPosix::DirectoryName_Type WorkingDirectory_type;
    typedef ::xsd::cxx::tree::optional< WorkingDirectory_type > WorkingDirectory_optional;
    typedef ::xsd::cxx::tree::traits< WorkingDirectory_type, char > WorkingDirectory_traits;

    const WorkingDirectory_optional&
    WorkingDirectory () const;

    WorkingDirectory_optional&
    WorkingDirectory ();

    void
    WorkingDirectory (const WorkingDirectory_type& x);

    void
    WorkingDirectory (const WorkingDirectory_optional& x);

    void
    WorkingDirectory (::std::auto_ptr< WorkingDirectory_type > p);

    // Environment
    // 
    typedef ::jsdlPosix::Environment_Type Environment_type;
    typedef ::xsd::cxx::tree::sequence< Environment_type > Environment_sequence;
    typedef Environment_sequence::iterator Environment_iterator;
    typedef Environment_sequence::const_iterator Environment_const_iterator;
    typedef ::xsd::cxx::tree::traits< Environment_type, char > Environment_traits;

    const Environment_sequence&
    Environment () const;

    Environment_sequence&
    Environment ();

    void
    Environment (const Environment_sequence& s);

    // WallTimeLimit
    // 
    typedef ::jsdlPosix::Limits_Type WallTimeLimit_type;
    typedef ::xsd::cxx::tree::optional< WallTimeLimit_type > WallTimeLimit_optional;
    typedef ::xsd::cxx::tree::traits< WallTimeLimit_type, char > WallTimeLimit_traits;

    const WallTimeLimit_optional&
    WallTimeLimit () const;

    WallTimeLimit_optional&
    WallTimeLimit ();

    void
    WallTimeLimit (const WallTimeLimit_type& x);

    void
    WallTimeLimit (const WallTimeLimit_optional& x);

    void
    WallTimeLimit (::std::auto_ptr< WallTimeLimit_type > p);

    // FileSizeLimit
    // 
    typedef ::jsdlPosix::Limits_Type FileSizeLimit_type;
    typedef ::xsd::cxx::tree::optional< FileSizeLimit_type > FileSizeLimit_optional;
    typedef ::xsd::cxx::tree::traits< FileSizeLimit_type, char > FileSizeLimit_traits;

    const FileSizeLimit_optional&
    FileSizeLimit () const;

    FileSizeLimit_optional&
    FileSizeLimit ();

    void
    FileSizeLimit (const FileSizeLimit_type& x);

    void
    FileSizeLimit (const FileSizeLimit_optional& x);

    void
    FileSizeLimit (::std::auto_ptr< FileSizeLimit_type > p);

    // CoreDumpLimit
    // 
    typedef ::jsdlPosix::Limits_Type CoreDumpLimit_type;
    typedef ::xsd::cxx::tree::optional< CoreDumpLimit_type > CoreDumpLimit_optional;
    typedef ::xsd::cxx::tree::traits< CoreDumpLimit_type, char > CoreDumpLimit_traits;

    const CoreDumpLimit_optional&
    CoreDumpLimit () const;

    CoreDumpLimit_optional&
    CoreDumpLimit ();

    void
    CoreDumpLimit (const CoreDumpLimit_type& x);

    void
    CoreDumpLimit (const CoreDumpLimit_optional& x);

    void
    CoreDumpLimit (::std::auto_ptr< CoreDumpLimit_type > p);

    // DataSegmentLimit
    // 
    typedef ::jsdlPosix::Limits_Type DataSegmentLimit_type;
    typedef ::xsd::cxx::tree::optional< DataSegmentLimit_type > DataSegmentLimit_optional;
    typedef ::xsd::cxx::tree::traits< DataSegmentLimit_type, char > DataSegmentLimit_traits;

    const DataSegmentLimit_optional&
    DataSegmentLimit () const;

    DataSegmentLimit_optional&
    DataSegmentLimit ();

    void
    DataSegmentLimit (const DataSegmentLimit_type& x);

    void
    DataSegmentLimit (const DataSegmentLimit_optional& x);

    void
    DataSegmentLimit (::std::auto_ptr< DataSegmentLimit_type > p);

    // LockedMemoryLimit
    // 
    typedef ::jsdlPosix::Limits_Type LockedMemoryLimit_type;
    typedef ::xsd::cxx::tree::optional< LockedMemoryLimit_type > LockedMemoryLimit_optional;
    typedef ::xsd::cxx::tree::traits< LockedMemoryLimit_type, char > LockedMemoryLimit_traits;

    const LockedMemoryLimit_optional&
    LockedMemoryLimit () const;

    LockedMemoryLimit_optional&
    LockedMemoryLimit ();

    void
    LockedMemoryLimit (const LockedMemoryLimit_type& x);

    void
    LockedMemoryLimit (const LockedMemoryLimit_optional& x);

    void
    LockedMemoryLimit (::std::auto_ptr< LockedMemoryLimit_type > p);

    // MemoryLimit
    // 
    typedef ::jsdlPosix::Limits_Type MemoryLimit_type;
    typedef ::xsd::cxx::tree::optional< MemoryLimit_type > MemoryLimit_optional;
    typedef ::xsd::cxx::tree::traits< MemoryLimit_type, char > MemoryLimit_traits;

    const MemoryLimit_optional&
    MemoryLimit () const;

    MemoryLimit_optional&
    MemoryLimit ();

    void
    MemoryLimit (const MemoryLimit_type& x);

    void
    MemoryLimit (const MemoryLimit_optional& x);

    void
    MemoryLimit (::std::auto_ptr< MemoryLimit_type > p);

    // OpenDescriptorsLimit
    // 
    typedef ::jsdlPosix::Limits_Type OpenDescriptorsLimit_type;
    typedef ::xsd::cxx::tree::optional< OpenDescriptorsLimit_type > OpenDescriptorsLimit_optional;
    typedef ::xsd::cxx::tree::traits< OpenDescriptorsLimit_type, char > OpenDescriptorsLimit_traits;

    const OpenDescriptorsLimit_optional&
    OpenDescriptorsLimit () const;

    OpenDescriptorsLimit_optional&
    OpenDescriptorsLimit ();

    void
    OpenDescriptorsLimit (const OpenDescriptorsLimit_type& x);

    void
    OpenDescriptorsLimit (const OpenDescriptorsLimit_optional& x);

    void
    OpenDescriptorsLimit (::std::auto_ptr< OpenDescriptorsLimit_type > p);

    // PipeSizeLimit
    // 
    typedef ::jsdlPosix::Limits_Type PipeSizeLimit_type;
    typedef ::xsd::cxx::tree::optional< PipeSizeLimit_type > PipeSizeLimit_optional;
    typedef ::xsd::cxx::tree::traits< PipeSizeLimit_type, char > PipeSizeLimit_traits;

    const PipeSizeLimit_optional&
    PipeSizeLimit () const;

    PipeSizeLimit_optional&
    PipeSizeLimit ();

    void
    PipeSizeLimit (const PipeSizeLimit_type& x);

    void
    PipeSizeLimit (const PipeSizeLimit_optional& x);

    void
    PipeSizeLimit (::std::auto_ptr< PipeSizeLimit_type > p);

    // StackSizeLimit
    // 
    typedef ::jsdlPosix::Limits_Type StackSizeLimit_type;
    typedef ::xsd::cxx::tree::optional< StackSizeLimit_type > StackSizeLimit_optional;
    typedef ::xsd::cxx::tree::traits< StackSizeLimit_type, char > StackSizeLimit_traits;

    const StackSizeLimit_optional&
    StackSizeLimit () const;

    StackSizeLimit_optional&
    StackSizeLimit ();

    void
    StackSizeLimit (const StackSizeLimit_type& x);

    void
    StackSizeLimit (const StackSizeLimit_optional& x);

    void
    StackSizeLimit (::std::auto_ptr< StackSizeLimit_type > p);

    // CPUTimeLimit
    // 
    typedef ::jsdlPosix::Limits_Type CPUTimeLimit_type;
    typedef ::xsd::cxx::tree::optional< CPUTimeLimit_type > CPUTimeLimit_optional;
    typedef ::xsd::cxx::tree::traits< CPUTimeLimit_type, char > CPUTimeLimit_traits;

    const CPUTimeLimit_optional&
    CPUTimeLimit () const;

    CPUTimeLimit_optional&
    CPUTimeLimit ();

    void
    CPUTimeLimit (const CPUTimeLimit_type& x);

    void
    CPUTimeLimit (const CPUTimeLimit_optional& x);

    void
    CPUTimeLimit (::std::auto_ptr< CPUTimeLimit_type > p);

    // ProcessCountLimit
    // 
    typedef ::jsdlPosix::Limits_Type ProcessCountLimit_type;
    typedef ::xsd::cxx::tree::optional< ProcessCountLimit_type > ProcessCountLimit_optional;
    typedef ::xsd::cxx::tree::traits< ProcessCountLimit_type, char > ProcessCountLimit_traits;

    const ProcessCountLimit_optional&
    ProcessCountLimit () const;

    ProcessCountLimit_optional&
    ProcessCountLimit ();

    void
    ProcessCountLimit (const ProcessCountLimit_type& x);

    void
    ProcessCountLimit (const ProcessCountLimit_optional& x);

    void
    ProcessCountLimit (::std::auto_ptr< ProcessCountLimit_type > p);

    // VirtualMemoryLimit
    // 
    typedef ::jsdlPosix::Limits_Type VirtualMemoryLimit_type;
    typedef ::xsd::cxx::tree::optional< VirtualMemoryLimit_type > VirtualMemoryLimit_optional;
    typedef ::xsd::cxx::tree::traits< VirtualMemoryLimit_type, char > VirtualMemoryLimit_traits;

    const VirtualMemoryLimit_optional&
    VirtualMemoryLimit () const;

    VirtualMemoryLimit_optional&
    VirtualMemoryLimit ();

    void
    VirtualMemoryLimit (const VirtualMemoryLimit_type& x);

    void
    VirtualMemoryLimit (const VirtualMemoryLimit_optional& x);

    void
    VirtualMemoryLimit (::std::auto_ptr< VirtualMemoryLimit_type > p);

    // ThreadCountLimit
    // 
    typedef ::jsdlPosix::Limits_Type ThreadCountLimit_type;
    typedef ::xsd::cxx::tree::optional< ThreadCountLimit_type > ThreadCountLimit_optional;
    typedef ::xsd::cxx::tree::traits< ThreadCountLimit_type, char > ThreadCountLimit_traits;

    const ThreadCountLimit_optional&
    ThreadCountLimit () const;

    ThreadCountLimit_optional&
    ThreadCountLimit ();

    void
    ThreadCountLimit (const ThreadCountLimit_type& x);

    void
    ThreadCountLimit (const ThreadCountLimit_optional& x);

    void
    ThreadCountLimit (::std::auto_ptr< ThreadCountLimit_type > p);

    // UserName
    // 
    typedef ::jsdlPosix::UserName_Type UserName_type;
    typedef ::xsd::cxx::tree::optional< UserName_type > UserName_optional;
    typedef ::xsd::cxx::tree::traits< UserName_type, char > UserName_traits;

    const UserName_optional&
    UserName () const;

    UserName_optional&
    UserName ();

    void
    UserName (const UserName_type& x);

    void
    UserName (const UserName_optional& x);

    void
    UserName (::std::auto_ptr< UserName_type > p);

    // GroupName
    // 
    typedef ::jsdlPosix::GroupName_Type GroupName_type;
    typedef ::xsd::cxx::tree::optional< GroupName_type > GroupName_optional;
    typedef ::xsd::cxx::tree::traits< GroupName_type, char > GroupName_traits;

    const GroupName_optional&
    GroupName () const;

    GroupName_optional&
    GroupName ();

    void
    GroupName (const GroupName_type& x);

    void
    GroupName (const GroupName_optional& x);

    void
    GroupName (::std::auto_ptr< GroupName_type > p);

    // name
    // 
    typedef ::xml_schema::ncname name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::auto_ptr< name_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    POSIXApplication_Type ();

    POSIXApplication_Type (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    POSIXApplication_Type (const POSIXApplication_Type& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual POSIXApplication_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~POSIXApplication_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    Executable_optional Executable_;
    Argument_sequence Argument_;
    Input_optional Input_;
    Output_optional Output_;
    Error_optional Error_;
    WorkingDirectory_optional WorkingDirectory_;
    Environment_sequence Environment_;
    WallTimeLimit_optional WallTimeLimit_;
    FileSizeLimit_optional FileSizeLimit_;
    CoreDumpLimit_optional CoreDumpLimit_;
    DataSegmentLimit_optional DataSegmentLimit_;
    LockedMemoryLimit_optional LockedMemoryLimit_;
    MemoryLimit_optional MemoryLimit_;
    OpenDescriptorsLimit_optional OpenDescriptorsLimit_;
    PipeSizeLimit_optional PipeSizeLimit_;
    StackSizeLimit_optional StackSizeLimit_;
    CPUTimeLimit_optional CPUTimeLimit_;
    ProcessCountLimit_optional ProcessCountLimit_;
    VirtualMemoryLimit_optional VirtualMemoryLimit_;
    ThreadCountLimit_optional ThreadCountLimit_;
    UserName_optional UserName_;
    GroupName_optional GroupName_;
    name_optional name_;
    any_attribute_set any_attribute_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace jsdlPosix
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::std::string& uri,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         const ::std::string& id,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xercesc::InputSource& is,
         ::xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace jsdlPosix
{
  void
  operator<< (::xercesc::DOMElement&, const Environment_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Argument_Type&);

  void
  operator<< (::xercesc::DOMElement&, const FileName_Type&);

  void
  operator<< (::xercesc::DOMElement&, const DirectoryName_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Limits_Type&);

  void
  operator<< (::xercesc::DOMElement&, const UserName_Type&);

  void
  operator<< (::xercesc::DOMElement&, const GroupName_Type&);

  void
  operator<< (::xercesc::DOMElement&, const POSIXApplication_Type&);

  // Serialize to std::ostream.
  //

  void
  POSIXApplication (::std::ostream& os,
                    const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  POSIXApplication (::std::ostream& os,
                    const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  POSIXApplication (::std::ostream& os,
                    const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  POSIXApplication (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  POSIXApplication (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  POSIXApplication (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  POSIXApplication (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::POSIXApplication_Type& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  POSIXApplication (const ::jsdlPosix::POSIXApplication_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Executable (::std::ostream& os,
              const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Executable (::std::ostream& os,
              const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Executable (::std::ostream& os,
              const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Executable (::xercesc::XMLFormatTarget& ft,
              const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Executable (::xercesc::XMLFormatTarget& ft,
              const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Executable (::xercesc::XMLFormatTarget& ft,
              const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Executable (::xercesc::DOMDocument& d,
              const ::jsdlPosix::FileName_Type& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Executable (const ::jsdlPosix::FileName_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Argument (::std::ostream& os,
            const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Argument (::std::ostream& os,
            const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Argument (::std::ostream& os,
            const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Argument (::xercesc::XMLFormatTarget& ft,
            const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Argument (::xercesc::XMLFormatTarget& ft,
            const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Argument (::xercesc::XMLFormatTarget& ft,
            const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Argument (::xercesc::DOMDocument& d,
            const ::jsdlPosix::Argument_Type& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Argument (const ::jsdlPosix::Argument_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Input (::std::ostream& os,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Input (::std::ostream& os,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Input (::std::ostream& os,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Input (::xercesc::XMLFormatTarget& ft,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Input (::xercesc::XMLFormatTarget& ft,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Input (::xercesc::XMLFormatTarget& ft,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Input (::xercesc::DOMDocument& d,
         const ::jsdlPosix::FileName_Type& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Input (const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Output (::std::ostream& os,
          const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Output (::std::ostream& os,
          const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Output (::std::ostream& os,
          const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Output (::xercesc::XMLFormatTarget& ft,
          const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Output (::xercesc::XMLFormatTarget& ft,
          const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Output (::xercesc::XMLFormatTarget& ft,
          const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Output (::xercesc::DOMDocument& d,
          const ::jsdlPosix::FileName_Type& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Output (const ::jsdlPosix::FileName_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Error (::std::ostream& os,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Error (::std::ostream& os,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Error (::std::ostream& os,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Error (::xercesc::XMLFormatTarget& ft,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Error (::xercesc::XMLFormatTarget& ft,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  void
  Error (::xercesc::XMLFormatTarget& ft,
         const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& eh,
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Error (::xercesc::DOMDocument& d,
         const ::jsdlPosix::FileName_Type& x,
         ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Error (const ::jsdlPosix::FileName_Type& x, 
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  WorkingDirectory (::std::ostream& os,
                    const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  WorkingDirectory (::std::ostream& os,
                    const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  WorkingDirectory (::std::ostream& os,
                    const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  WorkingDirectory (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  WorkingDirectory (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  WorkingDirectory (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  WorkingDirectory (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::DirectoryName_Type& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  WorkingDirectory (const ::jsdlPosix::DirectoryName_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Environment (::std::ostream& os,
               const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Environment (::std::ostream& os,
               const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Environment (::std::ostream& os,
               const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Environment (::xercesc::XMLFormatTarget& ft,
               const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Environment (::xercesc::XMLFormatTarget& ft,
               const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Environment (::xercesc::XMLFormatTarget& ft,
               const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Environment (::xercesc::DOMDocument& d,
               const ::jsdlPosix::Environment_Type& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Environment (const ::jsdlPosix::Environment_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  WallTimeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  WallTimeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  WallTimeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  WallTimeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  WallTimeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  WallTimeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  WallTimeLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  WallTimeLimit (const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  FileSizeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  FileSizeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  FileSizeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  FileSizeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  FileSizeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  FileSizeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  FileSizeLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileSizeLimit (const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  CoreDumpLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  CoreDumpLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  CoreDumpLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CoreDumpLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  CoreDumpLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  CoreDumpLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CoreDumpLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CoreDumpLimit (const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  DataSegmentLimit (::std::ostream& os,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  DataSegmentLimit (::std::ostream& os,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  DataSegmentLimit (::std::ostream& os,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DataSegmentLimit (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  DataSegmentLimit (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  DataSegmentLimit (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DataSegmentLimit (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::Limits_Type& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DataSegmentLimit (const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  LockedMemoryLimit (::std::ostream& os,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  LockedMemoryLimit (::std::ostream& os,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  LockedMemoryLimit (::std::ostream& os,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  LockedMemoryLimit (::xercesc::XMLFormatTarget& ft,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  LockedMemoryLimit (::xercesc::XMLFormatTarget& ft,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  LockedMemoryLimit (::xercesc::XMLFormatTarget& ft,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  LockedMemoryLimit (::xercesc::DOMDocument& d,
                     const ::jsdlPosix::Limits_Type& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  LockedMemoryLimit (const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  MemoryLimit (::std::ostream& os,
               const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  MemoryLimit (::std::ostream& os,
               const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  MemoryLimit (::std::ostream& os,
               const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  MemoryLimit (::xercesc::XMLFormatTarget& ft,
               const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  MemoryLimit (::xercesc::XMLFormatTarget& ft,
               const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  MemoryLimit (::xercesc::XMLFormatTarget& ft,
               const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  MemoryLimit (::xercesc::DOMDocument& d,
               const ::jsdlPosix::Limits_Type& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  MemoryLimit (const ::jsdlPosix::Limits_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OpenDescriptorsLimit (::std::ostream& os,
                        const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  OpenDescriptorsLimit (::std::ostream& os,
                        const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::error_handler& eh,
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  OpenDescriptorsLimit (::std::ostream& os,
                        const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        ::xercesc::DOMErrorHandler& eh,
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OpenDescriptorsLimit (::xercesc::XMLFormatTarget& ft,
                        const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  OpenDescriptorsLimit (::xercesc::XMLFormatTarget& ft,
                        const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::error_handler& eh,
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  void
  OpenDescriptorsLimit (::xercesc::XMLFormatTarget& ft,
                        const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        ::xercesc::DOMErrorHandler& eh,
                        const ::std::string& e = "UTF-8",
                        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OpenDescriptorsLimit (::xercesc::DOMDocument& d,
                        const ::jsdlPosix::Limits_Type& x,
                        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OpenDescriptorsLimit (const ::jsdlPosix::Limits_Type& x, 
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  PipeSizeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  PipeSizeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  PipeSizeLimit (::std::ostream& os,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PipeSizeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  PipeSizeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  PipeSizeLimit (::xercesc::XMLFormatTarget& ft,
                 const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PipeSizeLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  PipeSizeLimit (const ::jsdlPosix::Limits_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  StackSizeLimit (::std::ostream& os,
                  const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  StackSizeLimit (::std::ostream& os,
                  const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  StackSizeLimit (::std::ostream& os,
                  const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  StackSizeLimit (::xercesc::XMLFormatTarget& ft,
                  const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  StackSizeLimit (::xercesc::XMLFormatTarget& ft,
                  const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  StackSizeLimit (::xercesc::XMLFormatTarget& ft,
                  const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  StackSizeLimit (::xercesc::DOMDocument& d,
                  const ::jsdlPosix::Limits_Type& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  StackSizeLimit (const ::jsdlPosix::Limits_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  CPUTimeLimit (::std::ostream& os,
                const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CPUTimeLimit (::std::ostream& os,
                const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CPUTimeLimit (::std::ostream& os,
                const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CPUTimeLimit (::xercesc::XMLFormatTarget& ft,
                const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CPUTimeLimit (::xercesc::XMLFormatTarget& ft,
                const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CPUTimeLimit (::xercesc::XMLFormatTarget& ft,
                const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CPUTimeLimit (::xercesc::DOMDocument& d,
                const ::jsdlPosix::Limits_Type& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CPUTimeLimit (const ::jsdlPosix::Limits_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ProcessCountLimit (::std::ostream& os,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  ProcessCountLimit (::std::ostream& os,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  ProcessCountLimit (::std::ostream& os,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ProcessCountLimit (::xercesc::XMLFormatTarget& ft,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  ProcessCountLimit (::xercesc::XMLFormatTarget& ft,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  ProcessCountLimit (::xercesc::XMLFormatTarget& ft,
                     const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ProcessCountLimit (::xercesc::DOMDocument& d,
                     const ::jsdlPosix::Limits_Type& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ProcessCountLimit (const ::jsdlPosix::Limits_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  VirtualMemoryLimit (::std::ostream& os,
                      const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  VirtualMemoryLimit (::std::ostream& os,
                      const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  VirtualMemoryLimit (::std::ostream& os,
                      const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  VirtualMemoryLimit (::xercesc::XMLFormatTarget& ft,
                      const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  VirtualMemoryLimit (::xercesc::XMLFormatTarget& ft,
                      const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  VirtualMemoryLimit (::xercesc::XMLFormatTarget& ft,
                      const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  VirtualMemoryLimit (::xercesc::DOMDocument& d,
                      const ::jsdlPosix::Limits_Type& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  VirtualMemoryLimit (const ::jsdlPosix::Limits_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ThreadCountLimit (::std::ostream& os,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  ThreadCountLimit (::std::ostream& os,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  ThreadCountLimit (::std::ostream& os,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ThreadCountLimit (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  ThreadCountLimit (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  void
  ThreadCountLimit (::xercesc::XMLFormatTarget& ft,
                    const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& eh,
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ThreadCountLimit (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::Limits_Type& x,
                    ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ThreadCountLimit (const ::jsdlPosix::Limits_Type& x, 
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  UserName (::std::ostream& os,
            const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  UserName (::std::ostream& os,
            const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  UserName (::std::ostream& os,
            const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  UserName (::xercesc::XMLFormatTarget& ft,
            const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  UserName (::xercesc::XMLFormatTarget& ft,
            const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  UserName (::xercesc::XMLFormatTarget& ft,
            const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  UserName (::xercesc::DOMDocument& d,
            const ::jsdlPosix::UserName_Type& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  UserName (const ::jsdlPosix::UserName_Type& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  GroupName (::std::ostream& os,
             const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  GroupName (::std::ostream& os,
             const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  GroupName (::std::ostream& os,
             const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  GroupName (::xercesc::XMLFormatTarget& ft,
             const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  GroupName (::xercesc::XMLFormatTarget& ft,
             const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  GroupName (::xercesc::XMLFormatTarget& ft,
             const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  GroupName (::xercesc::DOMDocument& d,
             const ::jsdlPosix::GroupName_Type& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  GroupName (const ::jsdlPosix::GroupName_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_ALEX_TMP_XENBEE_XBEINSTD_BRANCHES_XML_SECURITY_XBE_ETC_XBE_SCHEMA_JSDL_POSIX_HPP
