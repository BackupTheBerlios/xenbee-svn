#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

#AC_PREREQ(2.61)
AC_INIT([libseda],[1.0.0],[petry@itwm.fhg.de])

# store all autogenerated auxiliary files in a special directory, this prevents
# the clobbering of the toplevel directory. This directory will also contain
# custom macros needed by this package
AC_CONFIG_AUX_DIR(config)

AM_INIT_AUTOMAKE([-Wall -Werror foreign])
# generate the config header file
#AM_CONFIG_HEADER(config.h)

# Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LIBTOOL

# doxygen support
#
#DX_HTML_FEATURE(ON)
#DX_CHM_FEATURE(OFF)
#DX_CHI_FEATURE(OFF)
#DX_MAN_FEATURE(OFF)
#DX_RTF_FEATURE(OFF)
#DX_XML_FEATURE(OFF)
#DX_PDF_FEATURE(OFF)
#DX_PS_FEATURE(OFF)
##
#DX_INIT_DOXYGEN(xbeinstd, config/doxygen.cfg, doc)

# Checks for libraries.
#CHECK_SSL

AC_CHECK_LIB(pthread, pthread_create)

# check for activemq (for threads)
AP_CHECK_ACTIVEMQ([2.1.3])

# handle unit testing
AP_CHECK_CPPUNIT([1.12.0])

# handle logging support
AP_CHECK_LOG4CXX([0.9.7])

AP_CHECK_DEPRECATE_ATTR

# check for debug flag
AP_CHECK_DEBUG

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([errno.h stdlib.h string.h strings.h unistd.h])
AC_CHECK_HEADERS([pthread.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions and stop searching if the first is found.
# in common.h is bzero defined, if it is not available, so the code should
# always use bzero
AC_CHECK_FUNCS(bzero memset, break)

# if a function is not available on a target platform, but a replacement is
# provided by this project. You must replace any AC_CHECK_FUNCS calls with
# AC_REPLACE_FUNCS calls. So if for instance, the strerror function is not
# available on the target platform, but you provide a replacement for it (say
# in replace/strerror.c), replace
#     AC_CHECK_FUNCS(strerror)
# with
#     AC_REPLACE_FUNCS(strerror)
AC_REPLACE_FUNCS(strerror)

# This will effectively result in the following: If the function strerror is
# not available on a target platform, strerror.o will automatically be added to
# LIBOBJ variable. The 'replace' directory's Makefile uses this variable to
# conditionally build the replacement function. This also means, that the
# replace directory must be traversed before any other directory containing
# source code
#

# C++ Checks

AC_CXX_BOOL(,config_error=yes)
AC_CXX_CONST_CAST
AC_CXX_EXCEPTIONS
AC_CXX_EXPLICIT
AC_CXX_NAMESPACES
AC_CXX_HAVE_STL
AC_CXX_HAVE_STD
AC_CXX_HAVE_SSTREAM

# pass configuration to distcheck target
DISTCHECK_CONFIGURE_FLAGS="CC=\"$CC\" CFLAGS=\"$CFLAGS\" LDFLAGS=\"$LDFLAGS\" LIBS=\"$LIBS\""
if test "$HAVE_SMC" = "yes" ; then
  DISTCHECK_CONFIGURE_FLAGS="$DISTCHECK_CONFIGURE_FLAGS --with-smc=$SMC_HOME"
fi
AC_SUBST([DISTCHECK_CONFIGURE_FLAGS])

# output the generated files
AC_CONFIG_FILES([Makefile
          libseda.pc
          libseda.spec
          replace/Makefile
          seda/Makefile
          tests/Makefile
          tests/seda/Makefile
	  tests/seda/testsconfig.hpp
])
AC_OUTPUT
