// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_U_HPC_PETRY_SRC_XBEINSTD_BRANCHES_CMAKE_AND_SPLITTING_XBE_ETC_XBE_SCHEMA_JSDL_HPP
#define CXX_U_HPC_PETRY_SRC_XBEINSTD_BRANCHES_CMAKE_AND_SPLITTING_XBE_ETC_XBE_SCHEMA_JSDL_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace jsdl
{
  class ProcessorArchitectureEnumeration;
  class OperatingSystemTypeEnumeration;
  class FileSystemTypeEnumeration;
  class CreationFlagEnumeration;
  class Description_Type;
  class Boundary_Type;
  class Exact_Type;
  class Range_Type;
  class RangeValue_Type;
  class JobDefinition_Type;
  class JobDescription_Type;
  class JobIdentification_Type;
  class Application_Type;
  class Resources_Type;
  class CandidateHosts_Type;
  class CPUArchitecture_Type;
  class FileSystem_Type;
  class OperatingSystem_Type;
  class OperatingSystemType_Type;
  class DataStaging_Type;
  class SourceTarget_Type;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace jsdl
{
  class ProcessorArchitectureEnumeration: public ::xml_schema::string
  {
    public:
    enum value
    {
      sparc,
      powerpc,
      x86,
      x86_32,
      x86_64,
      parisc,
      mips,
      ia64,
      arm,
      other
    };

    ProcessorArchitectureEnumeration (value v);

    ProcessorArchitectureEnumeration (const char* v);

    ProcessorArchitectureEnumeration (const ::std::string& v);

    ProcessorArchitectureEnumeration (const ::xml_schema::string& v);

    ProcessorArchitectureEnumeration (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    ProcessorArchitectureEnumeration (const ::xercesc::DOMAttr& a,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    ProcessorArchitectureEnumeration (const ::std::string& s,
                                      const ::xercesc::DOMElement* e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    ProcessorArchitectureEnumeration (const ProcessorArchitectureEnumeration& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

    virtual ProcessorArchitectureEnumeration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ProcessorArchitectureEnumeration&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_ProcessorArchitectureEnumeration_convert ();
    }

    protected:
    value
    _xsd_ProcessorArchitectureEnumeration_convert () const;

    public:
    static const char* const _xsd_ProcessorArchitectureEnumeration_literals_[10];
    static const value _xsd_ProcessorArchitectureEnumeration_indexes_[10];
  };

  class OperatingSystemTypeEnumeration: public ::xml_schema::string
  {
    public:
    enum value
    {
      Unknown,
      MACOS,
      ATTUNIX,
      DGUX,
      DECNT,
      Tru64_UNIX,
      OpenVMS,
      HPUX,
      AIX,
      MVS,
      OS400,
      OS_2,
      JavaVM,
      MSDOS,
      WIN3x,
      WIN95,
      WIN98,
      WINNT,
      WINCE,
      NCR3000,
      NetWare,
      OSF,
      DC_OS,
      Reliant_UNIX,
      SCO_UnixWare,
      SCO_OpenServer,
      Sequent,
      IRIX,
      Solaris,
      SunOS,
      U6000,
      ASERIES,
      TandemNSK,
      TandemNT,
      BS2000,
      LINUX_OS,
      Lynx,
      XENIX,
      VM,
      Interactive_UNIX,
      BSDUNIX,
      FreeBSD,
      NetBSD,
      GNU_Hurd,
      OS9,
      MACH_Kernel,
      Inferno,
      QNX,
      EPOC,
      IxWorks,
      VxWorks,
      MiNT,
      BeOS,
      HP_MPE,
      NextStep,
      PalmPilot,
      Rhapsody,
      Windows_2000,
      Dedicated,
      OS_390,
      VSE,
      TPF,
      Windows_R_Me,
      Caldera_Open_UNIX,
      OpenBSD,
      Not_Applicable,
      Windows_XP,
      z_OS,
      other
    };

    OperatingSystemTypeEnumeration (value v);

    OperatingSystemTypeEnumeration (const char* v);

    OperatingSystemTypeEnumeration (const ::std::string& v);

    OperatingSystemTypeEnumeration (const ::xml_schema::string& v);

    OperatingSystemTypeEnumeration (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    OperatingSystemTypeEnumeration (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    OperatingSystemTypeEnumeration (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    OperatingSystemTypeEnumeration (const OperatingSystemTypeEnumeration& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

    virtual OperatingSystemTypeEnumeration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    OperatingSystemTypeEnumeration&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_OperatingSystemTypeEnumeration_convert ();
    }

    protected:
    value
    _xsd_OperatingSystemTypeEnumeration_convert () const;

    public:
    static const char* const _xsd_OperatingSystemTypeEnumeration_literals_[69];
    static const value _xsd_OperatingSystemTypeEnumeration_indexes_[69];
  };

  class FileSystemTypeEnumeration: public ::xml_schema::string
  {
    public:
    enum value
    {
      swap,
      temporary,
      spool,
      normal
    };

    FileSystemTypeEnumeration (value v);

    FileSystemTypeEnumeration (const char* v);

    FileSystemTypeEnumeration (const ::std::string& v);

    FileSystemTypeEnumeration (const ::xml_schema::string& v);

    FileSystemTypeEnumeration (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    FileSystemTypeEnumeration (const ::xercesc::DOMAttr& a,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    FileSystemTypeEnumeration (const ::std::string& s,
                               const ::xercesc::DOMElement* e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    FileSystemTypeEnumeration (const FileSystemTypeEnumeration& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

    virtual FileSystemTypeEnumeration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    FileSystemTypeEnumeration&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_FileSystemTypeEnumeration_convert ();
    }

    protected:
    value
    _xsd_FileSystemTypeEnumeration_convert () const;

    public:
    static const char* const _xsd_FileSystemTypeEnumeration_literals_[4];
    static const value _xsd_FileSystemTypeEnumeration_indexes_[4];
  };

  class CreationFlagEnumeration: public ::xml_schema::string
  {
    public:
    enum value
    {
      overwrite,
      append,
      dontOverwrite
    };

    CreationFlagEnumeration (value v);

    CreationFlagEnumeration (const char* v);

    CreationFlagEnumeration (const ::std::string& v);

    CreationFlagEnumeration (const ::xml_schema::string& v);

    CreationFlagEnumeration (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    CreationFlagEnumeration (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    CreationFlagEnumeration (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    CreationFlagEnumeration (const CreationFlagEnumeration& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual CreationFlagEnumeration*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CreationFlagEnumeration&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_CreationFlagEnumeration_convert ();
    }

    protected:
    value
    _xsd_CreationFlagEnumeration_convert () const;

    public:
    static const char* const _xsd_CreationFlagEnumeration_literals_[3];
    static const value _xsd_CreationFlagEnumeration_indexes_[3];
  };

  class Description_Type: public ::xml_schema::string
  {
    public:
    // Constructors.
    //
    Description_Type ();

    Description_Type (const char*);

    Description_Type (const ::std::string&);

    Description_Type (const ::xml_schema::string&);

    Description_Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    Description_Type (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    Description_Type (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    Description_Type (const Description_Type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual Description_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Description_Type ();
  };

  class Boundary_Type: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type >
  {
    public:
    // exclusiveBound
    // 
    typedef ::xml_schema::boolean exclusiveBound_type;
    typedef ::xsd::cxx::tree::optional< exclusiveBound_type > exclusiveBound_optional;
    typedef ::xsd::cxx::tree::traits< exclusiveBound_type, char > exclusiveBound_traits;

    const exclusiveBound_optional&
    exclusiveBound () const;

    exclusiveBound_optional&
    exclusiveBound ();

    void
    exclusiveBound (const exclusiveBound_type& x);

    void
    exclusiveBound (const exclusiveBound_optional& x);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Boundary_Type (const ::xml_schema::double_&);

    Boundary_Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    Boundary_Type (const Boundary_Type& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual Boundary_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Boundary_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    exclusiveBound_optional exclusiveBound_;
    any_attribute_set any_attribute_;
  };

  class Exact_Type: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type >
  {
    public:
    // epsilon
    // 
    typedef ::xml_schema::double_ epsilon_type;
    typedef ::xsd::cxx::tree::optional< epsilon_type > epsilon_optional;
    typedef ::xsd::cxx::tree::traits< epsilon_type, char > epsilon_traits;

    const epsilon_optional&
    epsilon () const;

    epsilon_optional&
    epsilon ();

    void
    epsilon (const epsilon_type& x);

    void
    epsilon (const epsilon_optional& x);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Exact_Type (const ::xml_schema::double_&);

    Exact_Type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Exact_Type (const Exact_Type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Exact_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Exact_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    epsilon_optional epsilon_;
    any_attribute_set any_attribute_;
  };

  class Range_Type: public ::xml_schema::type
  {
    public:
    // LowerBound
    // 
    typedef ::jsdl::Boundary_Type LowerBound_type;
    typedef ::xsd::cxx::tree::traits< LowerBound_type, char > LowerBound_traits;

    const LowerBound_type&
    LowerBound () const;

    LowerBound_type&
    LowerBound ();

    void
    LowerBound (const LowerBound_type& x);

    void
    LowerBound (::std::auto_ptr< LowerBound_type > p);

    // UpperBound
    // 
    typedef ::jsdl::Boundary_Type UpperBound_type;
    typedef ::xsd::cxx::tree::traits< UpperBound_type, char > UpperBound_traits;

    const UpperBound_type&
    UpperBound () const;

    UpperBound_type&
    UpperBound ();

    void
    UpperBound (const UpperBound_type& x);

    void
    UpperBound (::std::auto_ptr< UpperBound_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Range_Type (const LowerBound_type&,
                const UpperBound_type&);

    Range_Type (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    Range_Type (const Range_Type& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual Range_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Range_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< LowerBound_type > LowerBound_;
    ::xsd::cxx::tree::one< UpperBound_type > UpperBound_;
    any_attribute_set any_attribute_;
  };

  class RangeValue_Type: public ::xml_schema::type
  {
    public:
    // UpperBoundedRange
    // 
    typedef ::jsdl::Boundary_Type UpperBoundedRange_type;
    typedef ::xsd::cxx::tree::optional< UpperBoundedRange_type > UpperBoundedRange_optional;
    typedef ::xsd::cxx::tree::traits< UpperBoundedRange_type, char > UpperBoundedRange_traits;

    const UpperBoundedRange_optional&
    UpperBoundedRange () const;

    UpperBoundedRange_optional&
    UpperBoundedRange ();

    void
    UpperBoundedRange (const UpperBoundedRange_type& x);

    void
    UpperBoundedRange (const UpperBoundedRange_optional& x);

    void
    UpperBoundedRange (::std::auto_ptr< UpperBoundedRange_type > p);

    // LowerBoundedRange
    // 
    typedef ::jsdl::Boundary_Type LowerBoundedRange_type;
    typedef ::xsd::cxx::tree::optional< LowerBoundedRange_type > LowerBoundedRange_optional;
    typedef ::xsd::cxx::tree::traits< LowerBoundedRange_type, char > LowerBoundedRange_traits;

    const LowerBoundedRange_optional&
    LowerBoundedRange () const;

    LowerBoundedRange_optional&
    LowerBoundedRange ();

    void
    LowerBoundedRange (const LowerBoundedRange_type& x);

    void
    LowerBoundedRange (const LowerBoundedRange_optional& x);

    void
    LowerBoundedRange (::std::auto_ptr< LowerBoundedRange_type > p);

    // Exact
    // 
    typedef ::jsdl::Exact_Type Exact_type;
    typedef ::xsd::cxx::tree::sequence< Exact_type > Exact_sequence;
    typedef Exact_sequence::iterator Exact_iterator;
    typedef Exact_sequence::const_iterator Exact_const_iterator;
    typedef ::xsd::cxx::tree::traits< Exact_type, char > Exact_traits;

    const Exact_sequence&
    Exact () const;

    Exact_sequence&
    Exact ();

    void
    Exact (const Exact_sequence& s);

    // Range
    // 
    typedef ::jsdl::Range_Type Range_type;
    typedef ::xsd::cxx::tree::sequence< Range_type > Range_sequence;
    typedef Range_sequence::iterator Range_iterator;
    typedef Range_sequence::const_iterator Range_const_iterator;
    typedef ::xsd::cxx::tree::traits< Range_type, char > Range_traits;

    const Range_sequence&
    Range () const;

    Range_sequence&
    Range ();

    void
    Range (const Range_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    RangeValue_Type ();

    RangeValue_Type (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    RangeValue_Type (const RangeValue_Type& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual RangeValue_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RangeValue_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    UpperBoundedRange_optional UpperBoundedRange_;
    LowerBoundedRange_optional LowerBoundedRange_;
    Exact_sequence Exact_;
    Range_sequence Range_;
    any_attribute_set any_attribute_;
  };

  class JobDefinition_Type: public ::xml_schema::type
  {
    public:
    // JobDescription
    // 
    typedef ::jsdl::JobDescription_Type JobDescription_type;
    typedef ::xsd::cxx::tree::traits< JobDescription_type, char > JobDescription_traits;

    const JobDescription_type&
    JobDescription () const;

    JobDescription_type&
    JobDescription ();

    void
    JobDescription (const JobDescription_type& x);

    void
    JobDescription (::std::auto_ptr< JobDescription_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // id
    // 
    typedef ::xml_schema::id id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    JobDefinition_Type (const JobDescription_type&);

    JobDefinition_Type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    JobDefinition_Type (const JobDefinition_Type& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual JobDefinition_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~JobDefinition_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< JobDescription_type > JobDescription_;
    any_sequence any_;
    id_optional id_;
    any_attribute_set any_attribute_;
  };

  class JobDescription_Type: public ::xml_schema::type
  {
    public:
    // JobIdentification
    // 
    typedef ::jsdl::JobIdentification_Type JobIdentification_type;
    typedef ::xsd::cxx::tree::optional< JobIdentification_type > JobIdentification_optional;
    typedef ::xsd::cxx::tree::traits< JobIdentification_type, char > JobIdentification_traits;

    const JobIdentification_optional&
    JobIdentification () const;

    JobIdentification_optional&
    JobIdentification ();

    void
    JobIdentification (const JobIdentification_type& x);

    void
    JobIdentification (const JobIdentification_optional& x);

    void
    JobIdentification (::std::auto_ptr< JobIdentification_type > p);

    // Application
    // 
    typedef ::jsdl::Application_Type Application_type;
    typedef ::xsd::cxx::tree::optional< Application_type > Application_optional;
    typedef ::xsd::cxx::tree::traits< Application_type, char > Application_traits;

    const Application_optional&
    Application () const;

    Application_optional&
    Application ();

    void
    Application (const Application_type& x);

    void
    Application (const Application_optional& x);

    void
    Application (::std::auto_ptr< Application_type > p);

    // Resources
    // 
    typedef ::jsdl::Resources_Type Resources_type;
    typedef ::xsd::cxx::tree::optional< Resources_type > Resources_optional;
    typedef ::xsd::cxx::tree::traits< Resources_type, char > Resources_traits;

    const Resources_optional&
    Resources () const;

    Resources_optional&
    Resources ();

    void
    Resources (const Resources_type& x);

    void
    Resources (const Resources_optional& x);

    void
    Resources (::std::auto_ptr< Resources_type > p);

    // DataStaging
    // 
    typedef ::jsdl::DataStaging_Type DataStaging_type;
    typedef ::xsd::cxx::tree::sequence< DataStaging_type > DataStaging_sequence;
    typedef DataStaging_sequence::iterator DataStaging_iterator;
    typedef DataStaging_sequence::const_iterator DataStaging_const_iterator;
    typedef ::xsd::cxx::tree::traits< DataStaging_type, char > DataStaging_traits;

    const DataStaging_sequence&
    DataStaging () const;

    DataStaging_sequence&
    DataStaging ();

    void
    DataStaging (const DataStaging_sequence& s);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    JobDescription_Type ();

    JobDescription_Type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    JobDescription_Type (const JobDescription_Type& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual JobDescription_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~JobDescription_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    JobIdentification_optional JobIdentification_;
    Application_optional Application_;
    Resources_optional Resources_;
    DataStaging_sequence DataStaging_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class JobIdentification_Type: public ::xml_schema::type
  {
    public:
    // JobName
    // 
    typedef ::xml_schema::string JobName_type;
    typedef ::xsd::cxx::tree::optional< JobName_type > JobName_optional;
    typedef ::xsd::cxx::tree::traits< JobName_type, char > JobName_traits;

    const JobName_optional&
    JobName () const;

    JobName_optional&
    JobName ();

    void
    JobName (const JobName_type& x);

    void
    JobName (const JobName_optional& x);

    void
    JobName (::std::auto_ptr< JobName_type > p);

    // Description
    // 
    typedef ::jsdl::Description_Type Description_type;
    typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_optional&
    Description () const;

    Description_optional&
    Description ();

    void
    Description (const Description_type& x);

    void
    Description (const Description_optional& x);

    void
    Description (::std::auto_ptr< Description_type > p);

    // JobAnnotation
    // 
    typedef ::xml_schema::string JobAnnotation_type;
    typedef ::xsd::cxx::tree::sequence< JobAnnotation_type > JobAnnotation_sequence;
    typedef JobAnnotation_sequence::iterator JobAnnotation_iterator;
    typedef JobAnnotation_sequence::const_iterator JobAnnotation_const_iterator;
    typedef ::xsd::cxx::tree::traits< JobAnnotation_type, char > JobAnnotation_traits;

    const JobAnnotation_sequence&
    JobAnnotation () const;

    JobAnnotation_sequence&
    JobAnnotation ();

    void
    JobAnnotation (const JobAnnotation_sequence& s);

    // JobProject
    // 
    typedef ::xml_schema::string JobProject_type;
    typedef ::xsd::cxx::tree::sequence< JobProject_type > JobProject_sequence;
    typedef JobProject_sequence::iterator JobProject_iterator;
    typedef JobProject_sequence::const_iterator JobProject_const_iterator;
    typedef ::xsd::cxx::tree::traits< JobProject_type, char > JobProject_traits;

    const JobProject_sequence&
    JobProject () const;

    JobProject_sequence&
    JobProject ();

    void
    JobProject (const JobProject_sequence& s);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    JobIdentification_Type ();

    JobIdentification_Type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    JobIdentification_Type (const JobIdentification_Type& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

    virtual JobIdentification_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~JobIdentification_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    JobName_optional JobName_;
    Description_optional Description_;
    JobAnnotation_sequence JobAnnotation_;
    JobProject_sequence JobProject_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class Application_Type: public ::xml_schema::type
  {
    public:
    // ApplicationName
    // 
    typedef ::xml_schema::string ApplicationName_type;
    typedef ::xsd::cxx::tree::optional< ApplicationName_type > ApplicationName_optional;
    typedef ::xsd::cxx::tree::traits< ApplicationName_type, char > ApplicationName_traits;

    const ApplicationName_optional&
    ApplicationName () const;

    ApplicationName_optional&
    ApplicationName ();

    void
    ApplicationName (const ApplicationName_type& x);

    void
    ApplicationName (const ApplicationName_optional& x);

    void
    ApplicationName (::std::auto_ptr< ApplicationName_type > p);

    // ApplicationVersion
    // 
    typedef ::xml_schema::string ApplicationVersion_type;
    typedef ::xsd::cxx::tree::optional< ApplicationVersion_type > ApplicationVersion_optional;
    typedef ::xsd::cxx::tree::traits< ApplicationVersion_type, char > ApplicationVersion_traits;

    const ApplicationVersion_optional&
    ApplicationVersion () const;

    ApplicationVersion_optional&
    ApplicationVersion ();

    void
    ApplicationVersion (const ApplicationVersion_type& x);

    void
    ApplicationVersion (const ApplicationVersion_optional& x);

    void
    ApplicationVersion (::std::auto_ptr< ApplicationVersion_type > p);

    // Description
    // 
    typedef ::jsdl::Description_Type Description_type;
    typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_optional&
    Description () const;

    Description_optional&
    Description ();

    void
    Description (const Description_type& x);

    void
    Description (const Description_optional& x);

    void
    Description (::std::auto_ptr< Description_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Application_Type ();

    Application_Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    Application_Type (const Application_Type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual Application_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Application_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ApplicationName_optional ApplicationName_;
    ApplicationVersion_optional ApplicationVersion_;
    Description_optional Description_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class Resources_Type: public ::xml_schema::type
  {
    public:
    // CandidateHosts
    // 
    typedef ::jsdl::CandidateHosts_Type CandidateHosts_type;
    typedef ::xsd::cxx::tree::optional< CandidateHosts_type > CandidateHosts_optional;
    typedef ::xsd::cxx::tree::traits< CandidateHosts_type, char > CandidateHosts_traits;

    const CandidateHosts_optional&
    CandidateHosts () const;

    CandidateHosts_optional&
    CandidateHosts ();

    void
    CandidateHosts (const CandidateHosts_type& x);

    void
    CandidateHosts (const CandidateHosts_optional& x);

    void
    CandidateHosts (::std::auto_ptr< CandidateHosts_type > p);

    // FileSystem
    // 
    typedef ::jsdl::FileSystem_Type FileSystem_type;
    typedef ::xsd::cxx::tree::sequence< FileSystem_type > FileSystem_sequence;
    typedef FileSystem_sequence::iterator FileSystem_iterator;
    typedef FileSystem_sequence::const_iterator FileSystem_const_iterator;
    typedef ::xsd::cxx::tree::traits< FileSystem_type, char > FileSystem_traits;

    const FileSystem_sequence&
    FileSystem () const;

    FileSystem_sequence&
    FileSystem ();

    void
    FileSystem (const FileSystem_sequence& s);

    // ExclusiveExecution
    // 
    typedef ::xml_schema::boolean ExclusiveExecution_type;
    typedef ::xsd::cxx::tree::optional< ExclusiveExecution_type > ExclusiveExecution_optional;
    typedef ::xsd::cxx::tree::traits< ExclusiveExecution_type, char > ExclusiveExecution_traits;

    const ExclusiveExecution_optional&
    ExclusiveExecution () const;

    ExclusiveExecution_optional&
    ExclusiveExecution ();

    void
    ExclusiveExecution (const ExclusiveExecution_type& x);

    void
    ExclusiveExecution (const ExclusiveExecution_optional& x);

    // OperatingSystem
    // 
    typedef ::jsdl::OperatingSystem_Type OperatingSystem_type;
    typedef ::xsd::cxx::tree::optional< OperatingSystem_type > OperatingSystem_optional;
    typedef ::xsd::cxx::tree::traits< OperatingSystem_type, char > OperatingSystem_traits;

    const OperatingSystem_optional&
    OperatingSystem () const;

    OperatingSystem_optional&
    OperatingSystem ();

    void
    OperatingSystem (const OperatingSystem_type& x);

    void
    OperatingSystem (const OperatingSystem_optional& x);

    void
    OperatingSystem (::std::auto_ptr< OperatingSystem_type > p);

    // CPUArchitecture
    // 
    typedef ::jsdl::CPUArchitecture_Type CPUArchitecture_type;
    typedef ::xsd::cxx::tree::optional< CPUArchitecture_type > CPUArchitecture_optional;
    typedef ::xsd::cxx::tree::traits< CPUArchitecture_type, char > CPUArchitecture_traits;

    const CPUArchitecture_optional&
    CPUArchitecture () const;

    CPUArchitecture_optional&
    CPUArchitecture ();

    void
    CPUArchitecture (const CPUArchitecture_type& x);

    void
    CPUArchitecture (const CPUArchitecture_optional& x);

    void
    CPUArchitecture (::std::auto_ptr< CPUArchitecture_type > p);

    // IndividualCPUSpeed
    // 
    typedef ::jsdl::RangeValue_Type IndividualCPUSpeed_type;
    typedef ::xsd::cxx::tree::optional< IndividualCPUSpeed_type > IndividualCPUSpeed_optional;
    typedef ::xsd::cxx::tree::traits< IndividualCPUSpeed_type, char > IndividualCPUSpeed_traits;

    const IndividualCPUSpeed_optional&
    IndividualCPUSpeed () const;

    IndividualCPUSpeed_optional&
    IndividualCPUSpeed ();

    void
    IndividualCPUSpeed (const IndividualCPUSpeed_type& x);

    void
    IndividualCPUSpeed (const IndividualCPUSpeed_optional& x);

    void
    IndividualCPUSpeed (::std::auto_ptr< IndividualCPUSpeed_type > p);

    // IndividualCPUTime
    // 
    typedef ::jsdl::RangeValue_Type IndividualCPUTime_type;
    typedef ::xsd::cxx::tree::optional< IndividualCPUTime_type > IndividualCPUTime_optional;
    typedef ::xsd::cxx::tree::traits< IndividualCPUTime_type, char > IndividualCPUTime_traits;

    const IndividualCPUTime_optional&
    IndividualCPUTime () const;

    IndividualCPUTime_optional&
    IndividualCPUTime ();

    void
    IndividualCPUTime (const IndividualCPUTime_type& x);

    void
    IndividualCPUTime (const IndividualCPUTime_optional& x);

    void
    IndividualCPUTime (::std::auto_ptr< IndividualCPUTime_type > p);

    // IndividualCPUCount
    // 
    typedef ::jsdl::RangeValue_Type IndividualCPUCount_type;
    typedef ::xsd::cxx::tree::optional< IndividualCPUCount_type > IndividualCPUCount_optional;
    typedef ::xsd::cxx::tree::traits< IndividualCPUCount_type, char > IndividualCPUCount_traits;

    const IndividualCPUCount_optional&
    IndividualCPUCount () const;

    IndividualCPUCount_optional&
    IndividualCPUCount ();

    void
    IndividualCPUCount (const IndividualCPUCount_type& x);

    void
    IndividualCPUCount (const IndividualCPUCount_optional& x);

    void
    IndividualCPUCount (::std::auto_ptr< IndividualCPUCount_type > p);

    // IndividualNetworkBandwidth
    // 
    typedef ::jsdl::RangeValue_Type IndividualNetworkBandwidth_type;
    typedef ::xsd::cxx::tree::optional< IndividualNetworkBandwidth_type > IndividualNetworkBandwidth_optional;
    typedef ::xsd::cxx::tree::traits< IndividualNetworkBandwidth_type, char > IndividualNetworkBandwidth_traits;

    const IndividualNetworkBandwidth_optional&
    IndividualNetworkBandwidth () const;

    IndividualNetworkBandwidth_optional&
    IndividualNetworkBandwidth ();

    void
    IndividualNetworkBandwidth (const IndividualNetworkBandwidth_type& x);

    void
    IndividualNetworkBandwidth (const IndividualNetworkBandwidth_optional& x);

    void
    IndividualNetworkBandwidth (::std::auto_ptr< IndividualNetworkBandwidth_type > p);

    // IndividualPhysicalMemory
    // 
    typedef ::jsdl::RangeValue_Type IndividualPhysicalMemory_type;
    typedef ::xsd::cxx::tree::optional< IndividualPhysicalMemory_type > IndividualPhysicalMemory_optional;
    typedef ::xsd::cxx::tree::traits< IndividualPhysicalMemory_type, char > IndividualPhysicalMemory_traits;

    const IndividualPhysicalMemory_optional&
    IndividualPhysicalMemory () const;

    IndividualPhysicalMemory_optional&
    IndividualPhysicalMemory ();

    void
    IndividualPhysicalMemory (const IndividualPhysicalMemory_type& x);

    void
    IndividualPhysicalMemory (const IndividualPhysicalMemory_optional& x);

    void
    IndividualPhysicalMemory (::std::auto_ptr< IndividualPhysicalMemory_type > p);

    // IndividualVirtualMemory
    // 
    typedef ::jsdl::RangeValue_Type IndividualVirtualMemory_type;
    typedef ::xsd::cxx::tree::optional< IndividualVirtualMemory_type > IndividualVirtualMemory_optional;
    typedef ::xsd::cxx::tree::traits< IndividualVirtualMemory_type, char > IndividualVirtualMemory_traits;

    const IndividualVirtualMemory_optional&
    IndividualVirtualMemory () const;

    IndividualVirtualMemory_optional&
    IndividualVirtualMemory ();

    void
    IndividualVirtualMemory (const IndividualVirtualMemory_type& x);

    void
    IndividualVirtualMemory (const IndividualVirtualMemory_optional& x);

    void
    IndividualVirtualMemory (::std::auto_ptr< IndividualVirtualMemory_type > p);

    // IndividualDiskSpace
    // 
    typedef ::jsdl::RangeValue_Type IndividualDiskSpace_type;
    typedef ::xsd::cxx::tree::optional< IndividualDiskSpace_type > IndividualDiskSpace_optional;
    typedef ::xsd::cxx::tree::traits< IndividualDiskSpace_type, char > IndividualDiskSpace_traits;

    const IndividualDiskSpace_optional&
    IndividualDiskSpace () const;

    IndividualDiskSpace_optional&
    IndividualDiskSpace ();

    void
    IndividualDiskSpace (const IndividualDiskSpace_type& x);

    void
    IndividualDiskSpace (const IndividualDiskSpace_optional& x);

    void
    IndividualDiskSpace (::std::auto_ptr< IndividualDiskSpace_type > p);

    // TotalCPUTime
    // 
    typedef ::jsdl::RangeValue_Type TotalCPUTime_type;
    typedef ::xsd::cxx::tree::optional< TotalCPUTime_type > TotalCPUTime_optional;
    typedef ::xsd::cxx::tree::traits< TotalCPUTime_type, char > TotalCPUTime_traits;

    const TotalCPUTime_optional&
    TotalCPUTime () const;

    TotalCPUTime_optional&
    TotalCPUTime ();

    void
    TotalCPUTime (const TotalCPUTime_type& x);

    void
    TotalCPUTime (const TotalCPUTime_optional& x);

    void
    TotalCPUTime (::std::auto_ptr< TotalCPUTime_type > p);

    // TotalCPUCount
    // 
    typedef ::jsdl::RangeValue_Type TotalCPUCount_type;
    typedef ::xsd::cxx::tree::optional< TotalCPUCount_type > TotalCPUCount_optional;
    typedef ::xsd::cxx::tree::traits< TotalCPUCount_type, char > TotalCPUCount_traits;

    const TotalCPUCount_optional&
    TotalCPUCount () const;

    TotalCPUCount_optional&
    TotalCPUCount ();

    void
    TotalCPUCount (const TotalCPUCount_type& x);

    void
    TotalCPUCount (const TotalCPUCount_optional& x);

    void
    TotalCPUCount (::std::auto_ptr< TotalCPUCount_type > p);

    // TotalPhysicalMemory
    // 
    typedef ::jsdl::RangeValue_Type TotalPhysicalMemory_type;
    typedef ::xsd::cxx::tree::optional< TotalPhysicalMemory_type > TotalPhysicalMemory_optional;
    typedef ::xsd::cxx::tree::traits< TotalPhysicalMemory_type, char > TotalPhysicalMemory_traits;

    const TotalPhysicalMemory_optional&
    TotalPhysicalMemory () const;

    TotalPhysicalMemory_optional&
    TotalPhysicalMemory ();

    void
    TotalPhysicalMemory (const TotalPhysicalMemory_type& x);

    void
    TotalPhysicalMemory (const TotalPhysicalMemory_optional& x);

    void
    TotalPhysicalMemory (::std::auto_ptr< TotalPhysicalMemory_type > p);

    // TotalVirtualMemory
    // 
    typedef ::jsdl::RangeValue_Type TotalVirtualMemory_type;
    typedef ::xsd::cxx::tree::optional< TotalVirtualMemory_type > TotalVirtualMemory_optional;
    typedef ::xsd::cxx::tree::traits< TotalVirtualMemory_type, char > TotalVirtualMemory_traits;

    const TotalVirtualMemory_optional&
    TotalVirtualMemory () const;

    TotalVirtualMemory_optional&
    TotalVirtualMemory ();

    void
    TotalVirtualMemory (const TotalVirtualMemory_type& x);

    void
    TotalVirtualMemory (const TotalVirtualMemory_optional& x);

    void
    TotalVirtualMemory (::std::auto_ptr< TotalVirtualMemory_type > p);

    // TotalDiskSpace
    // 
    typedef ::jsdl::RangeValue_Type TotalDiskSpace_type;
    typedef ::xsd::cxx::tree::optional< TotalDiskSpace_type > TotalDiskSpace_optional;
    typedef ::xsd::cxx::tree::traits< TotalDiskSpace_type, char > TotalDiskSpace_traits;

    const TotalDiskSpace_optional&
    TotalDiskSpace () const;

    TotalDiskSpace_optional&
    TotalDiskSpace ();

    void
    TotalDiskSpace (const TotalDiskSpace_type& x);

    void
    TotalDiskSpace (const TotalDiskSpace_optional& x);

    void
    TotalDiskSpace (::std::auto_ptr< TotalDiskSpace_type > p);

    // TotalResourceCount
    // 
    typedef ::jsdl::RangeValue_Type TotalResourceCount_type;
    typedef ::xsd::cxx::tree::optional< TotalResourceCount_type > TotalResourceCount_optional;
    typedef ::xsd::cxx::tree::traits< TotalResourceCount_type, char > TotalResourceCount_traits;

    const TotalResourceCount_optional&
    TotalResourceCount () const;

    TotalResourceCount_optional&
    TotalResourceCount ();

    void
    TotalResourceCount (const TotalResourceCount_type& x);

    void
    TotalResourceCount (const TotalResourceCount_optional& x);

    void
    TotalResourceCount (::std::auto_ptr< TotalResourceCount_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    Resources_Type ();

    Resources_Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    Resources_Type (const Resources_Type& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual Resources_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~Resources_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    CandidateHosts_optional CandidateHosts_;
    FileSystem_sequence FileSystem_;
    ExclusiveExecution_optional ExclusiveExecution_;
    OperatingSystem_optional OperatingSystem_;
    CPUArchitecture_optional CPUArchitecture_;
    IndividualCPUSpeed_optional IndividualCPUSpeed_;
    IndividualCPUTime_optional IndividualCPUTime_;
    IndividualCPUCount_optional IndividualCPUCount_;
    IndividualNetworkBandwidth_optional IndividualNetworkBandwidth_;
    IndividualPhysicalMemory_optional IndividualPhysicalMemory_;
    IndividualVirtualMemory_optional IndividualVirtualMemory_;
    IndividualDiskSpace_optional IndividualDiskSpace_;
    TotalCPUTime_optional TotalCPUTime_;
    TotalCPUCount_optional TotalCPUCount_;
    TotalPhysicalMemory_optional TotalPhysicalMemory_;
    TotalVirtualMemory_optional TotalVirtualMemory_;
    TotalDiskSpace_optional TotalDiskSpace_;
    TotalResourceCount_optional TotalResourceCount_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class CandidateHosts_Type: public ::xml_schema::type
  {
    public:
    // HostName
    // 
    typedef ::xml_schema::string HostName_type;
    typedef ::xsd::cxx::tree::sequence< HostName_type > HostName_sequence;
    typedef HostName_sequence::iterator HostName_iterator;
    typedef HostName_sequence::const_iterator HostName_const_iterator;
    typedef ::xsd::cxx::tree::traits< HostName_type, char > HostName_traits;

    const HostName_sequence&
    HostName () const;

    HostName_sequence&
    HostName ();

    void
    HostName (const HostName_sequence& s);

    // Constructors.
    //
    CandidateHosts_Type ();

    CandidateHosts_Type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    CandidateHosts_Type (const CandidateHosts_Type& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual CandidateHosts_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CandidateHosts_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    HostName_sequence HostName_;
  };

  class CPUArchitecture_Type: public ::xml_schema::type
  {
    public:
    // CPUArchitectureName
    // 
    typedef ::jsdl::ProcessorArchitectureEnumeration CPUArchitectureName_type;
    typedef ::xsd::cxx::tree::traits< CPUArchitectureName_type, char > CPUArchitectureName_traits;

    const CPUArchitectureName_type&
    CPUArchitectureName () const;

    CPUArchitectureName_type&
    CPUArchitectureName ();

    void
    CPUArchitectureName (const CPUArchitectureName_type& x);

    void
    CPUArchitectureName (::std::auto_ptr< CPUArchitectureName_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    CPUArchitecture_Type (const CPUArchitectureName_type&);

    CPUArchitecture_Type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    CPUArchitecture_Type (const CPUArchitecture_Type& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual CPUArchitecture_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CPUArchitecture_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< CPUArchitectureName_type > CPUArchitectureName_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class FileSystem_Type: public ::xml_schema::type
  {
    public:
    // FileSystemType
    // 
    typedef ::jsdl::FileSystemTypeEnumeration FileSystemType_type;
    typedef ::xsd::cxx::tree::optional< FileSystemType_type > FileSystemType_optional;
    typedef ::xsd::cxx::tree::traits< FileSystemType_type, char > FileSystemType_traits;

    const FileSystemType_optional&
    FileSystemType () const;

    FileSystemType_optional&
    FileSystemType ();

    void
    FileSystemType (const FileSystemType_type& x);

    void
    FileSystemType (const FileSystemType_optional& x);

    void
    FileSystemType (::std::auto_ptr< FileSystemType_type > p);

    // Description
    // 
    typedef ::jsdl::Description_Type Description_type;
    typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_optional&
    Description () const;

    Description_optional&
    Description ();

    void
    Description (const Description_type& x);

    void
    Description (const Description_optional& x);

    void
    Description (::std::auto_ptr< Description_type > p);

    // MountPoint
    // 
    typedef ::xml_schema::string MountPoint_type;
    typedef ::xsd::cxx::tree::optional< MountPoint_type > MountPoint_optional;
    typedef ::xsd::cxx::tree::traits< MountPoint_type, char > MountPoint_traits;

    const MountPoint_optional&
    MountPoint () const;

    MountPoint_optional&
    MountPoint ();

    void
    MountPoint (const MountPoint_type& x);

    void
    MountPoint (const MountPoint_optional& x);

    void
    MountPoint (::std::auto_ptr< MountPoint_type > p);

    // DiskSpace
    // 
    typedef ::jsdl::RangeValue_Type DiskSpace_type;
    typedef ::xsd::cxx::tree::optional< DiskSpace_type > DiskSpace_optional;
    typedef ::xsd::cxx::tree::traits< DiskSpace_type, char > DiskSpace_traits;

    const DiskSpace_optional&
    DiskSpace () const;

    DiskSpace_optional&
    DiskSpace ();

    void
    DiskSpace (const DiskSpace_type& x);

    void
    DiskSpace (const DiskSpace_optional& x);

    void
    DiskSpace (::std::auto_ptr< DiskSpace_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // name
    // 
    typedef ::xml_schema::ncname name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    FileSystem_Type (const name_type&);

    FileSystem_Type (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    FileSystem_Type (const FileSystem_Type& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual FileSystem_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~FileSystem_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    FileSystemType_optional FileSystemType_;
    Description_optional Description_;
    MountPoint_optional MountPoint_;
    DiskSpace_optional DiskSpace_;
    any_sequence any_;
    ::xsd::cxx::tree::one< name_type > name_;
    any_attribute_set any_attribute_;
  };

  class OperatingSystem_Type: public ::xml_schema::type
  {
    public:
    // OperatingSystemType
    // 
    typedef ::jsdl::OperatingSystemType_Type OperatingSystemType_type;
    typedef ::xsd::cxx::tree::optional< OperatingSystemType_type > OperatingSystemType_optional;
    typedef ::xsd::cxx::tree::traits< OperatingSystemType_type, char > OperatingSystemType_traits;

    const OperatingSystemType_optional&
    OperatingSystemType () const;

    OperatingSystemType_optional&
    OperatingSystemType ();

    void
    OperatingSystemType (const OperatingSystemType_type& x);

    void
    OperatingSystemType (const OperatingSystemType_optional& x);

    void
    OperatingSystemType (::std::auto_ptr< OperatingSystemType_type > p);

    // OperatingSystemVersion
    // 
    typedef ::xml_schema::string OperatingSystemVersion_type;
    typedef ::xsd::cxx::tree::optional< OperatingSystemVersion_type > OperatingSystemVersion_optional;
    typedef ::xsd::cxx::tree::traits< OperatingSystemVersion_type, char > OperatingSystemVersion_traits;

    const OperatingSystemVersion_optional&
    OperatingSystemVersion () const;

    OperatingSystemVersion_optional&
    OperatingSystemVersion ();

    void
    OperatingSystemVersion (const OperatingSystemVersion_type& x);

    void
    OperatingSystemVersion (const OperatingSystemVersion_optional& x);

    void
    OperatingSystemVersion (::std::auto_ptr< OperatingSystemVersion_type > p);

    // Description
    // 
    typedef ::jsdl::Description_Type Description_type;
    typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
    typedef ::xsd::cxx::tree::traits< Description_type, char > Description_traits;

    const Description_optional&
    Description () const;

    Description_optional&
    Description ();

    void
    Description (const Description_type& x);

    void
    Description (const Description_optional& x);

    void
    Description (::std::auto_ptr< Description_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    OperatingSystem_Type ();

    OperatingSystem_Type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    OperatingSystem_Type (const OperatingSystem_Type& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual OperatingSystem_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~OperatingSystem_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    OperatingSystemType_optional OperatingSystemType_;
    OperatingSystemVersion_optional OperatingSystemVersion_;
    Description_optional Description_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class OperatingSystemType_Type: public ::xml_schema::type
  {
    public:
    // OperatingSystemName
    // 
    typedef ::jsdl::OperatingSystemTypeEnumeration OperatingSystemName_type;
    typedef ::xsd::cxx::tree::traits< OperatingSystemName_type, char > OperatingSystemName_traits;

    const OperatingSystemName_type&
    OperatingSystemName () const;

    OperatingSystemName_type&
    OperatingSystemName ();

    void
    OperatingSystemName (const OperatingSystemName_type& x);

    void
    OperatingSystemName (::std::auto_ptr< OperatingSystemName_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    OperatingSystemType_Type (const OperatingSystemName_type&);

    OperatingSystemType_Type (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    OperatingSystemType_Type (const OperatingSystemType_Type& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

    virtual OperatingSystemType_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~OperatingSystemType_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< OperatingSystemName_type > OperatingSystemName_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };

  class DataStaging_Type: public ::xml_schema::type
  {
    public:
    // FileName
    // 
    typedef ::xml_schema::string FileName_type;
    typedef ::xsd::cxx::tree::traits< FileName_type, char > FileName_traits;

    const FileName_type&
    FileName () const;

    FileName_type&
    FileName ();

    void
    FileName (const FileName_type& x);

    void
    FileName (::std::auto_ptr< FileName_type > p);

    // FilesystemName
    // 
    typedef ::xml_schema::ncname FilesystemName_type;
    typedef ::xsd::cxx::tree::optional< FilesystemName_type > FilesystemName_optional;
    typedef ::xsd::cxx::tree::traits< FilesystemName_type, char > FilesystemName_traits;

    const FilesystemName_optional&
    FilesystemName () const;

    FilesystemName_optional&
    FilesystemName ();

    void
    FilesystemName (const FilesystemName_type& x);

    void
    FilesystemName (const FilesystemName_optional& x);

    void
    FilesystemName (::std::auto_ptr< FilesystemName_type > p);

    // CreationFlag
    // 
    typedef ::jsdl::CreationFlagEnumeration CreationFlag_type;
    typedef ::xsd::cxx::tree::traits< CreationFlag_type, char > CreationFlag_traits;

    const CreationFlag_type&
    CreationFlag () const;

    CreationFlag_type&
    CreationFlag ();

    void
    CreationFlag (const CreationFlag_type& x);

    void
    CreationFlag (::std::auto_ptr< CreationFlag_type > p);

    // DeleteOnTermination
    // 
    typedef ::xml_schema::boolean DeleteOnTermination_type;
    typedef ::xsd::cxx::tree::optional< DeleteOnTermination_type > DeleteOnTermination_optional;
    typedef ::xsd::cxx::tree::traits< DeleteOnTermination_type, char > DeleteOnTermination_traits;

    const DeleteOnTermination_optional&
    DeleteOnTermination () const;

    DeleteOnTermination_optional&
    DeleteOnTermination ();

    void
    DeleteOnTermination (const DeleteOnTermination_type& x);

    void
    DeleteOnTermination (const DeleteOnTermination_optional& x);

    // Source
    // 
    typedef ::jsdl::SourceTarget_Type Source_type;
    typedef ::xsd::cxx::tree::optional< Source_type > Source_optional;
    typedef ::xsd::cxx::tree::traits< Source_type, char > Source_traits;

    const Source_optional&
    Source () const;

    Source_optional&
    Source ();

    void
    Source (const Source_type& x);

    void
    Source (const Source_optional& x);

    void
    Source (::std::auto_ptr< Source_type > p);

    // Target
    // 
    typedef ::jsdl::SourceTarget_Type Target_type;
    typedef ::xsd::cxx::tree::optional< Target_type > Target_optional;
    typedef ::xsd::cxx::tree::traits< Target_type, char > Target_traits;

    const Target_optional&
    Target () const;

    Target_optional&
    Target ();

    void
    Target (const Target_type& x);

    void
    Target (const Target_optional& x);

    void
    Target (::std::auto_ptr< Target_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // name
    // 
    typedef ::xml_schema::ncname name_type;
    typedef ::xsd::cxx::tree::optional< name_type > name_optional;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_optional&
    name () const;

    name_optional&
    name ();

    void
    name (const name_type& x);

    void
    name (const name_optional& x);

    void
    name (::std::auto_ptr< name_type > p);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    DataStaging_Type (const FileName_type&,
                      const CreationFlag_type&);

    DataStaging_Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    DataStaging_Type (const DataStaging_Type& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual DataStaging_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DataStaging_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    ::xsd::cxx::tree::one< FileName_type > FileName_;
    FilesystemName_optional FilesystemName_;
    ::xsd::cxx::tree::one< CreationFlag_type > CreationFlag_;
    DeleteOnTermination_optional DeleteOnTermination_;
    Source_optional Source_;
    Target_optional Target_;
    any_sequence any_;
    name_optional name_;
    any_attribute_set any_attribute_;
  };

  class SourceTarget_Type: public ::xml_schema::type
  {
    public:
    // URI
    // 
    typedef ::xml_schema::uri URI_type;
    typedef ::xsd::cxx::tree::optional< URI_type > URI_optional;
    typedef ::xsd::cxx::tree::traits< URI_type, char > URI_traits;

    const URI_optional&
    URI () const;

    URI_optional&
    URI ();

    void
    URI (const URI_type& x);

    void
    URI (const URI_optional& x);

    void
    URI (::std::auto_ptr< URI_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any_attribute
    // 
    typedef ::xsd::cxx::tree::attribute_set< char > any_attribute_set;
    typedef any_attribute_set::iterator any_attribute_iterator;
    typedef any_attribute_set::const_iterator any_attribute_const_iterator;

    const any_attribute_set&
    any_attribute () const;

    any_attribute_set&
    any_attribute ();

    void
    any_attribute (const any_attribute_set& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    SourceTarget_Type ();

    SourceTarget_Type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    SourceTarget_Type (const SourceTarget_Type& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual SourceTarget_Type*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SourceTarget_Type ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    URI_optional URI_;
    any_sequence any_;
    any_attribute_set any_attribute_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace jsdl
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::std::string& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::std::string& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::std::string& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           const ::std::string& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           const ::std::string& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace jsdl
{
  void
  operator<< (::xercesc::DOMElement&, const ProcessorArchitectureEnumeration&);

  void
  operator<< (::xercesc::DOMAttr&, const ProcessorArchitectureEnumeration&);

  void
  operator<< (::xml_schema::list_stream&,
              const ProcessorArchitectureEnumeration&);

  void
  operator<< (::xercesc::DOMElement&, const OperatingSystemTypeEnumeration&);

  void
  operator<< (::xercesc::DOMAttr&, const OperatingSystemTypeEnumeration&);

  void
  operator<< (::xml_schema::list_stream&,
              const OperatingSystemTypeEnumeration&);

  void
  operator<< (::xercesc::DOMElement&, const FileSystemTypeEnumeration&);

  void
  operator<< (::xercesc::DOMAttr&, const FileSystemTypeEnumeration&);

  void
  operator<< (::xml_schema::list_stream&,
              const FileSystemTypeEnumeration&);

  void
  operator<< (::xercesc::DOMElement&, const CreationFlagEnumeration&);

  void
  operator<< (::xercesc::DOMAttr&, const CreationFlagEnumeration&);

  void
  operator<< (::xml_schema::list_stream&,
              const CreationFlagEnumeration&);

  void
  operator<< (::xercesc::DOMElement&, const Description_Type&);

  void
  operator<< (::xercesc::DOMAttr&, const Description_Type&);

  void
  operator<< (::xml_schema::list_stream&,
              const Description_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Boundary_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Exact_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Range_Type&);

  void
  operator<< (::xercesc::DOMElement&, const RangeValue_Type&);

  void
  operator<< (::xercesc::DOMElement&, const JobDefinition_Type&);

  void
  operator<< (::xercesc::DOMElement&, const JobDescription_Type&);

  void
  operator<< (::xercesc::DOMElement&, const JobIdentification_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Application_Type&);

  void
  operator<< (::xercesc::DOMElement&, const Resources_Type&);

  void
  operator<< (::xercesc::DOMElement&, const CandidateHosts_Type&);

  void
  operator<< (::xercesc::DOMElement&, const CPUArchitecture_Type&);

  void
  operator<< (::xercesc::DOMElement&, const FileSystem_Type&);

  void
  operator<< (::xercesc::DOMElement&, const OperatingSystem_Type&);

  void
  operator<< (::xercesc::DOMElement&, const OperatingSystemType_Type&);

  void
  operator<< (::xercesc::DOMElement&, const DataStaging_Type&);

  void
  operator<< (::xercesc::DOMElement&, const SourceTarget_Type&);

  // Serialize to std::ostream.
  //

  void
  JobDefinition (::std::ostream& os,
                 const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobDefinition (::std::ostream& os,
                 const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobDefinition (::std::ostream& os,
                 const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  JobDefinition (::xercesc::XMLFormatTarget& ft,
                 const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobDefinition (::xercesc::XMLFormatTarget& ft,
                 const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobDefinition (::xercesc::XMLFormatTarget& ft,
                 const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  JobDefinition (::xercesc::DOMDocument& d,
                 const ::jsdl::JobDefinition_Type& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobDefinition (const ::jsdl::JobDefinition_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  JobDescription (::std::ostream& os,
                  const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  JobDescription (::std::ostream& os,
                  const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  JobDescription (::std::ostream& os,
                  const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  JobDescription (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  JobDescription (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  JobDescription (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  JobDescription (::xercesc::DOMDocument& d,
                  const ::jsdl::JobDescription_Type& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobDescription (const ::jsdl::JobDescription_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  JobIdentification (::std::ostream& os,
                     const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  JobIdentification (::std::ostream& os,
                     const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  JobIdentification (::std::ostream& os,
                     const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  JobIdentification (::xercesc::XMLFormatTarget& ft,
                     const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  JobIdentification (::xercesc::XMLFormatTarget& ft,
                     const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  JobIdentification (::xercesc::XMLFormatTarget& ft,
                     const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  JobIdentification (::xercesc::DOMDocument& d,
                     const ::jsdl::JobIdentification_Type& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobIdentification (const ::jsdl::JobIdentification_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  JobName (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  JobName (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  JobName (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  JobName (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  JobName (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  JobName (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  JobName (::xercesc::DOMDocument& d,
           const ::xml_schema::string& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobName (const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Description (::std::ostream& os,
               const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Description (::std::ostream& os,
               const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Description (::std::ostream& os,
               const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Description (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Description (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Description (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Description (::xercesc::DOMDocument& d,
               const ::jsdl::Description_Type& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Description (const ::jsdl::Description_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  JobAnnotation (::std::ostream& os,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobAnnotation (::std::ostream& os,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobAnnotation (::std::ostream& os,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  JobAnnotation (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobAnnotation (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  JobAnnotation (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  JobAnnotation (::xercesc::DOMDocument& d,
                 const ::xml_schema::string& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobAnnotation (const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  JobProject (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  JobProject (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  JobProject (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  JobProject (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  JobProject (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  JobProject (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  JobProject (::xercesc::DOMDocument& d,
              const ::xml_schema::string& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobProject (const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Application (::std::ostream& os,
               const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Application (::std::ostream& os,
               const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Application (::std::ostream& os,
               const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Application (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Application (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  Application (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Application (::xercesc::DOMDocument& d,
               const ::jsdl::Application_Type& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Application (const ::jsdl::Application_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ApplicationName (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  ApplicationName (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  ApplicationName (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ApplicationName (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  ApplicationName (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  ApplicationName (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ApplicationName (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ApplicationName (const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ApplicationVersion (::std::ostream& os,
                      const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ApplicationVersion (::std::ostream& os,
                      const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ApplicationVersion (::std::ostream& os,
                      const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ApplicationVersion (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ApplicationVersion (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ApplicationVersion (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ApplicationVersion (::xercesc::DOMDocument& d,
                      const ::xml_schema::string& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ApplicationVersion (const ::xml_schema::string& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Resources (::std::ostream& os,
             const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Resources (::std::ostream& os,
             const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Resources (::std::ostream& os,
             const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Resources (::xercesc::XMLFormatTarget& ft,
             const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Resources (::xercesc::XMLFormatTarget& ft,
             const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Resources (::xercesc::XMLFormatTarget& ft,
             const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Resources (::xercesc::DOMDocument& d,
             const ::jsdl::Resources_Type& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Resources (const ::jsdl::Resources_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  CandidateHosts (::std::ostream& os,
                  const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  CandidateHosts (::std::ostream& os,
                  const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  CandidateHosts (::std::ostream& os,
                  const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CandidateHosts (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  CandidateHosts (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  CandidateHosts (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CandidateHosts (::xercesc::DOMDocument& d,
                  const ::jsdl::CandidateHosts_Type& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CandidateHosts (const ::jsdl::CandidateHosts_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  HostName (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  HostName (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  HostName (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  HostName (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  HostName (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  HostName (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  HostName (::xercesc::DOMDocument& d,
            const ::xml_schema::string& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  HostName (const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperatingSystem (::std::ostream& os,
                   const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  OperatingSystem (::std::ostream& os,
                   const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  OperatingSystem (::std::ostream& os,
                   const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperatingSystem (::xercesc::XMLFormatTarget& ft,
                   const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  OperatingSystem (::xercesc::XMLFormatTarget& ft,
                   const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  OperatingSystem (::xercesc::XMLFormatTarget& ft,
                   const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperatingSystem (::xercesc::DOMDocument& d,
                   const ::jsdl::OperatingSystem_Type& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystem (const ::jsdl::OperatingSystem_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperatingSystemType (::std::ostream& os,
                       const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemType (::std::ostream& os,
                       const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemType (::std::ostream& os,
                       const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperatingSystemType (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemType (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemType (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperatingSystemType (::xercesc::DOMDocument& d,
                       const ::jsdl::OperatingSystemType_Type& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystemType (const ::jsdl::OperatingSystemType_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperatingSystemVersion (::std::ostream& os,
                          const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  OperatingSystemVersion (::std::ostream& os,
                          const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  OperatingSystemVersion (::std::ostream& os,
                          const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperatingSystemVersion (::xercesc::XMLFormatTarget& ft,
                          const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  OperatingSystemVersion (::xercesc::XMLFormatTarget& ft,
                          const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  OperatingSystemVersion (::xercesc::XMLFormatTarget& ft,
                          const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperatingSystemVersion (::xercesc::DOMDocument& d,
                          const ::xml_schema::string& x,
                          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystemVersion (const ::xml_schema::string& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  OperatingSystemName (::std::ostream& os,
                       const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemName (::std::ostream& os,
                       const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemName (::std::ostream& os,
                       const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  OperatingSystemName (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemName (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  OperatingSystemName (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  OperatingSystemName (::xercesc::DOMDocument& d,
                       const ::jsdl::OperatingSystemTypeEnumeration& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystemName (const ::jsdl::OperatingSystemTypeEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  ExclusiveExecution (::std::ostream& os,
                      const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ExclusiveExecution (::std::ostream& os,
                      const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ExclusiveExecution (::std::ostream& os,
                      const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  ExclusiveExecution (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ExclusiveExecution (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  ExclusiveExecution (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  ExclusiveExecution (::xercesc::DOMDocument& d,
                      const ::xml_schema::boolean& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ExclusiveExecution (const ::xml_schema::boolean& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  CPUArchitecture (::std::ostream& os,
                   const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  CPUArchitecture (::std::ostream& os,
                   const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  CPUArchitecture (::std::ostream& os,
                   const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CPUArchitecture (::xercesc::XMLFormatTarget& ft,
                   const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  CPUArchitecture (::xercesc::XMLFormatTarget& ft,
                   const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  CPUArchitecture (::xercesc::XMLFormatTarget& ft,
                   const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CPUArchitecture (::xercesc::DOMDocument& d,
                   const ::jsdl::CPUArchitecture_Type& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CPUArchitecture (const ::jsdl::CPUArchitecture_Type& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  CPUArchitectureName (::std::ostream& os,
                       const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  CPUArchitectureName (::std::ostream& os,
                       const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  CPUArchitectureName (::std::ostream& os,
                       const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CPUArchitectureName (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  CPUArchitectureName (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  CPUArchitectureName (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CPUArchitectureName (::xercesc::DOMDocument& d,
                       const ::jsdl::ProcessorArchitectureEnumeration& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CPUArchitectureName (const ::jsdl::ProcessorArchitectureEnumeration& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  FileSystem (::std::ostream& os,
              const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  FileSystem (::std::ostream& os,
              const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  FileSystem (::std::ostream& os,
              const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  FileSystem (::xercesc::XMLFormatTarget& ft,
              const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  FileSystem (::xercesc::XMLFormatTarget& ft,
              const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  FileSystem (::xercesc::XMLFormatTarget& ft,
              const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  FileSystem (::xercesc::DOMDocument& d,
              const ::jsdl::FileSystem_Type& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileSystem (const ::jsdl::FileSystem_Type& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  FileSystemType (::std::ostream& os,
                  const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FileSystemType (::std::ostream& os,
                  const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FileSystemType (::std::ostream& os,
                  const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  FileSystemType (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FileSystemType (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FileSystemType (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  FileSystemType (::xercesc::DOMDocument& d,
                  const ::jsdl::FileSystemTypeEnumeration& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileSystemType (const ::jsdl::FileSystemTypeEnumeration& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  MountPoint (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  MountPoint (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  MountPoint (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  MountPoint (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  MountPoint (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  MountPoint (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  MountPoint (::xercesc::DOMDocument& d,
              const ::xml_schema::string& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  MountPoint (const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  DiskSpace (::std::ostream& os,
             const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  DiskSpace (::std::ostream& os,
             const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  DiskSpace (::std::ostream& os,
             const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DiskSpace (::xercesc::XMLFormatTarget& ft,
             const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  DiskSpace (::xercesc::XMLFormatTarget& ft,
             const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  DiskSpace (::xercesc::XMLFormatTarget& ft,
             const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DiskSpace (::xercesc::DOMDocument& d,
             const ::jsdl::RangeValue_Type& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DiskSpace (const ::jsdl::RangeValue_Type& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualCPUTime (::std::ostream& os,
                     const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  IndividualCPUTime (::std::ostream& os,
                     const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  IndividualCPUTime (::std::ostream& os,
                     const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualCPUTime (::xercesc::XMLFormatTarget& ft,
                     const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  IndividualCPUTime (::xercesc::XMLFormatTarget& ft,
                     const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  IndividualCPUTime (::xercesc::XMLFormatTarget& ft,
                     const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualCPUTime (::xercesc::DOMDocument& d,
                     const ::jsdl::RangeValue_Type& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualCPUTime (const ::jsdl::RangeValue_Type& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualCPUSpeed (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUSpeed (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUSpeed (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualCPUSpeed (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUSpeed (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUSpeed (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualCPUSpeed (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualCPUSpeed (const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualCPUCount (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUCount (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUCount (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualCPUCount (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUCount (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  IndividualCPUCount (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualCPUCount (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualCPUCount (const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualPhysicalMemory (::std::ostream& os,
                            const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  IndividualPhysicalMemory (::std::ostream& os,
                            const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& eh,
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  IndividualPhysicalMemory (::std::ostream& os,
                            const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& eh,
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualPhysicalMemory (::xercesc::XMLFormatTarget& ft,
                            const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  IndividualPhysicalMemory (::xercesc::XMLFormatTarget& ft,
                            const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& eh,
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  void
  IndividualPhysicalMemory (::xercesc::XMLFormatTarget& ft,
                            const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& eh,
                            const ::std::string& e = "UTF-8",
                            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualPhysicalMemory (::xercesc::DOMDocument& d,
                            const ::jsdl::RangeValue_Type& x,
                            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualPhysicalMemory (const ::jsdl::RangeValue_Type& x, 
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualVirtualMemory (::std::ostream& os,
                           const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  IndividualVirtualMemory (::std::ostream& os,
                           const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::error_handler& eh,
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  IndividualVirtualMemory (::std::ostream& os,
                           const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           ::xercesc::DOMErrorHandler& eh,
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualVirtualMemory (::xercesc::XMLFormatTarget& ft,
                           const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  IndividualVirtualMemory (::xercesc::XMLFormatTarget& ft,
                           const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::error_handler& eh,
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  void
  IndividualVirtualMemory (::xercesc::XMLFormatTarget& ft,
                           const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           ::xercesc::DOMErrorHandler& eh,
                           const ::std::string& e = "UTF-8",
                           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualVirtualMemory (::xercesc::DOMDocument& d,
                           const ::jsdl::RangeValue_Type& x,
                           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualVirtualMemory (const ::jsdl::RangeValue_Type& x, 
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualNetworkBandwidth (::std::ostream& os,
                              const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

  void
  IndividualNetworkBandwidth (::std::ostream& os,
                              const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::error_handler& eh,
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

  void
  IndividualNetworkBandwidth (::std::ostream& os,
                              const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              ::xercesc::DOMErrorHandler& eh,
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualNetworkBandwidth (::xercesc::XMLFormatTarget& ft,
                              const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

  void
  IndividualNetworkBandwidth (::xercesc::XMLFormatTarget& ft,
                              const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::error_handler& eh,
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

  void
  IndividualNetworkBandwidth (::xercesc::XMLFormatTarget& ft,
                              const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              ::xercesc::DOMErrorHandler& eh,
                              const ::std::string& e = "UTF-8",
                              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualNetworkBandwidth (::xercesc::DOMDocument& d,
                              const ::jsdl::RangeValue_Type& x,
                              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualNetworkBandwidth (const ::jsdl::RangeValue_Type& x, 
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  IndividualDiskSpace (::std::ostream& os,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  IndividualDiskSpace (::std::ostream& os,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  IndividualDiskSpace (::std::ostream& os,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  IndividualDiskSpace (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  IndividualDiskSpace (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  IndividualDiskSpace (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  IndividualDiskSpace (::xercesc::DOMDocument& d,
                       const ::jsdl::RangeValue_Type& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualDiskSpace (const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  TotalCPUTime (::std::ostream& os,
                const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  TotalCPUTime (::std::ostream& os,
                const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  TotalCPUTime (::std::ostream& os,
                const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  TotalCPUTime (::xercesc::XMLFormatTarget& ft,
                const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  TotalCPUTime (::xercesc::XMLFormatTarget& ft,
                const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  TotalCPUTime (::xercesc::XMLFormatTarget& ft,
                const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  TotalCPUTime (::xercesc::DOMDocument& d,
                const ::jsdl::RangeValue_Type& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalCPUTime (const ::jsdl::RangeValue_Type& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  TotalCPUCount (::std::ostream& os,
                 const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  TotalCPUCount (::std::ostream& os,
                 const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  TotalCPUCount (::std::ostream& os,
                 const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  TotalCPUCount (::xercesc::XMLFormatTarget& ft,
                 const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  TotalCPUCount (::xercesc::XMLFormatTarget& ft,
                 const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  void
  TotalCPUCount (::xercesc::XMLFormatTarget& ft,
                 const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& eh,
                 const ::std::string& e = "UTF-8",
                 ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  TotalCPUCount (::xercesc::DOMDocument& d,
                 const ::jsdl::RangeValue_Type& x,
                 ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalCPUCount (const ::jsdl::RangeValue_Type& x, 
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  TotalPhysicalMemory (::std::ostream& os,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  TotalPhysicalMemory (::std::ostream& os,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  TotalPhysicalMemory (::std::ostream& os,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  TotalPhysicalMemory (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  TotalPhysicalMemory (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  TotalPhysicalMemory (::xercesc::XMLFormatTarget& ft,
                       const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  TotalPhysicalMemory (::xercesc::DOMDocument& d,
                       const ::jsdl::RangeValue_Type& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalPhysicalMemory (const ::jsdl::RangeValue_Type& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  TotalVirtualMemory (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalVirtualMemory (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalVirtualMemory (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  TotalVirtualMemory (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalVirtualMemory (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalVirtualMemory (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  TotalVirtualMemory (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalVirtualMemory (const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  TotalDiskSpace (::std::ostream& os,
                  const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  TotalDiskSpace (::std::ostream& os,
                  const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  TotalDiskSpace (::std::ostream& os,
                  const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  TotalDiskSpace (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  TotalDiskSpace (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  TotalDiskSpace (::xercesc::XMLFormatTarget& ft,
                  const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  TotalDiskSpace (::xercesc::DOMDocument& d,
                  const ::jsdl::RangeValue_Type& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalDiskSpace (const ::jsdl::RangeValue_Type& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  TotalResourceCount (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalResourceCount (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalResourceCount (::std::ostream& os,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  TotalResourceCount (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalResourceCount (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  void
  TotalResourceCount (::xercesc::XMLFormatTarget& ft,
                      const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& eh,
                      const ::std::string& e = "UTF-8",
                      ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  TotalResourceCount (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& x,
                      ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalResourceCount (const ::jsdl::RangeValue_Type& x, 
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  DataStaging (::std::ostream& os,
               const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DataStaging (::std::ostream& os,
               const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DataStaging (::std::ostream& os,
               const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DataStaging (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DataStaging (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DataStaging (::xercesc::XMLFormatTarget& ft,
               const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DataStaging (::xercesc::DOMDocument& d,
               const ::jsdl::DataStaging_Type& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DataStaging (const ::jsdl::DataStaging_Type& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  FileName (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  FileName (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  FileName (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  FileName (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  FileName (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  FileName (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  FileName (::xercesc::DOMDocument& d,
            const ::xml_schema::string& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileName (const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  FilesystemName (::std::ostream& os,
                  const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FilesystemName (::std::ostream& os,
                  const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FilesystemName (::std::ostream& os,
                  const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  FilesystemName (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FilesystemName (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  FilesystemName (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  FilesystemName (::xercesc::DOMDocument& d,
                  const ::xml_schema::ncname& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FilesystemName (const ::xml_schema::ncname& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  CreationFlag (::std::ostream& os,
                const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CreationFlag (::std::ostream& os,
                const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CreationFlag (::std::ostream& os,
                const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CreationFlag (::xercesc::XMLFormatTarget& ft,
                const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CreationFlag (::xercesc::XMLFormatTarget& ft,
                const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  CreationFlag (::xercesc::XMLFormatTarget& ft,
                const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CreationFlag (::xercesc::DOMDocument& d,
                const ::jsdl::CreationFlagEnumeration& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CreationFlag (const ::jsdl::CreationFlagEnumeration& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  DeleteOnTermination (::std::ostream& os,
                       const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  DeleteOnTermination (::std::ostream& os,
                       const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  DeleteOnTermination (::std::ostream& os,
                       const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DeleteOnTermination (::xercesc::XMLFormatTarget& ft,
                       const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  DeleteOnTermination (::xercesc::XMLFormatTarget& ft,
                       const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  DeleteOnTermination (::xercesc::XMLFormatTarget& ft,
                       const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DeleteOnTermination (::xercesc::DOMDocument& d,
                       const ::xml_schema::boolean& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DeleteOnTermination (const ::xml_schema::boolean& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Source (::std::ostream& os,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Source (::std::ostream& os,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Source (::std::ostream& os,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Source (::xercesc::XMLFormatTarget& ft,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Source (::xercesc::XMLFormatTarget& ft,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Source (::xercesc::XMLFormatTarget& ft,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Source (::xercesc::DOMDocument& d,
          const ::jsdl::SourceTarget_Type& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Source (const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  Target (::std::ostream& os,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Target (::std::ostream& os,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Target (::std::ostream& os,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Target (::xercesc::XMLFormatTarget& ft,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Target (::xercesc::XMLFormatTarget& ft,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Target (::xercesc::XMLFormatTarget& ft,
          const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Target (::xercesc::DOMDocument& d,
          const ::jsdl::SourceTarget_Type& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Target (const ::jsdl::SourceTarget_Type& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  URI (::std::ostream& os,
       const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  URI (::std::ostream& os,
       const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::error_handler& eh,
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  URI (::std::ostream& os,
       const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       ::xercesc::DOMErrorHandler& eh,
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  URI (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  URI (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::error_handler& eh,
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  URI (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       ::xercesc::DOMErrorHandler& eh,
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  URI (::xercesc::DOMDocument& d,
       const ::xml_schema::uri& x,
       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  URI (const ::xml_schema::uri& x, 
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f = 0);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_U_HPC_PETRY_SRC_XBEINSTD_BRANCHES_CMAKE_AND_SPLITTING_XBE_ETC_XBE_SCHEMA_JSDL_HPP
