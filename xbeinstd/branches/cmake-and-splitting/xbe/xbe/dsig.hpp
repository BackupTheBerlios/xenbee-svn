// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_U_HPC_PETRY_SRC_XBEINSTD_BRANCHES_CMAKE_AND_SPLITTING_XBE_ETC_XBE_SCHEMA_DSIG_HPP
#define CXX_U_HPC_PETRY_SRC_XBEINSTD_BRANCHES_CMAKE_AND_SPLITTING_XBE_ETC_XBE_SCHEMA_DSIG_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace dsig
{
  class CryptoBinary;
  class SignatureType;
  class SignatureValueType;
  class SignedInfoType;
  class CanonicalizationMethodType;
  class SignatureMethodType;
  class ReferenceType;
  class TransformsType;
  class TransformType;
  class DigestMethodType;
  class DigestValueType;
  class KeyInfoType;
  class KeyValueType;
  class RetrievalMethodType;
  class X509DataType;
  class X509IssuerSerialType;
  class PGPDataType;
  class SPKIDataType;
  class ObjectType;
  class ManifestType;
  class SignaturePropertiesType;
  class SignaturePropertyType;
  class HMACOutputLengthType;
  class DSAKeyValueType;
  class RSAKeyValueType;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace dsig
{
  class CryptoBinary: public ::xml_schema::base64_binary
  {
    public:
    // Constructors.
    //
    CryptoBinary ();

    CryptoBinary (const ::xml_schema::base64_binary&);

    CryptoBinary (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    CryptoBinary (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    CryptoBinary (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    CryptoBinary (const CryptoBinary& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual CryptoBinary*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CryptoBinary ();
  };

  class SignatureType: public ::xml_schema::type
  {
    public:
    // SignedInfo
    // 
    typedef ::dsig::SignedInfoType SignedInfo_type;
    typedef ::xsd::cxx::tree::traits< SignedInfo_type, char > SignedInfo_traits;

    const SignedInfo_type&
    SignedInfo () const;

    SignedInfo_type&
    SignedInfo ();

    void
    SignedInfo (const SignedInfo_type& x);

    void
    SignedInfo (::std::auto_ptr< SignedInfo_type > p);

    // SignatureValue
    // 
    typedef ::dsig::SignatureValueType SignatureValue_type;
    typedef ::xsd::cxx::tree::traits< SignatureValue_type, char > SignatureValue_traits;

    const SignatureValue_type&
    SignatureValue () const;

    SignatureValue_type&
    SignatureValue ();

    void
    SignatureValue (const SignatureValue_type& x);

    void
    SignatureValue (::std::auto_ptr< SignatureValue_type > p);

    // KeyInfo
    // 
    typedef ::dsig::KeyInfoType KeyInfo_type;
    typedef ::xsd::cxx::tree::optional< KeyInfo_type > KeyInfo_optional;
    typedef ::xsd::cxx::tree::traits< KeyInfo_type, char > KeyInfo_traits;

    const KeyInfo_optional&
    KeyInfo () const;

    KeyInfo_optional&
    KeyInfo ();

    void
    KeyInfo (const KeyInfo_type& x);

    void
    KeyInfo (const KeyInfo_optional& x);

    void
    KeyInfo (::std::auto_ptr< KeyInfo_type > p);

    // Object
    // 
    typedef ::dsig::ObjectType Object_type;
    typedef ::xsd::cxx::tree::sequence< Object_type > Object_sequence;
    typedef Object_sequence::iterator Object_iterator;
    typedef Object_sequence::const_iterator Object_const_iterator;
    typedef ::xsd::cxx::tree::traits< Object_type, char > Object_traits;

    const Object_sequence&
    Object () const;

    Object_sequence&
    Object ();

    void
    Object (const Object_sequence& s);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // Constructors.
    //
    SignatureType (const SignedInfo_type&,
                   const SignatureValue_type&);

    SignatureType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    SignatureType (const SignatureType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual SignatureType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SignatureType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< SignedInfo_type > SignedInfo_;
    ::xsd::cxx::tree::one< SignatureValue_type > SignatureValue_;
    KeyInfo_optional KeyInfo_;
    Object_sequence Object_;
    Id_optional Id_;
  };

  class SignatureValueType: public ::xml_schema::base64_binary
  {
    public:
    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // Constructors.
    //
    SignatureValueType ();

    SignatureValueType (const ::xml_schema::base64_binary&);

    SignatureValueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    SignatureValueType (const SignatureValueType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual SignatureValueType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SignatureValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Id_optional Id_;
  };

  class SignedInfoType: public ::xml_schema::type
  {
    public:
    // CanonicalizationMethod
    // 
    typedef ::dsig::CanonicalizationMethodType CanonicalizationMethod_type;
    typedef ::xsd::cxx::tree::traits< CanonicalizationMethod_type, char > CanonicalizationMethod_traits;

    const CanonicalizationMethod_type&
    CanonicalizationMethod () const;

    CanonicalizationMethod_type&
    CanonicalizationMethod ();

    void
    CanonicalizationMethod (const CanonicalizationMethod_type& x);

    void
    CanonicalizationMethod (::std::auto_ptr< CanonicalizationMethod_type > p);

    // SignatureMethod
    // 
    typedef ::dsig::SignatureMethodType SignatureMethod_type;
    typedef ::xsd::cxx::tree::traits< SignatureMethod_type, char > SignatureMethod_traits;

    const SignatureMethod_type&
    SignatureMethod () const;

    SignatureMethod_type&
    SignatureMethod ();

    void
    SignatureMethod (const SignatureMethod_type& x);

    void
    SignatureMethod (::std::auto_ptr< SignatureMethod_type > p);

    // Reference
    // 
    typedef ::dsig::ReferenceType Reference_type;
    typedef ::xsd::cxx::tree::sequence< Reference_type > Reference_sequence;
    typedef Reference_sequence::iterator Reference_iterator;
    typedef Reference_sequence::const_iterator Reference_const_iterator;
    typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

    const Reference_sequence&
    Reference () const;

    Reference_sequence&
    Reference ();

    void
    Reference (const Reference_sequence& s);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // Constructors.
    //
    SignedInfoType (const CanonicalizationMethod_type&,
                    const SignatureMethod_type&);

    SignedInfoType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    SignedInfoType (const SignedInfoType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual SignedInfoType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SignedInfoType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< CanonicalizationMethod_type > CanonicalizationMethod_;
    ::xsd::cxx::tree::one< SignatureMethod_type > SignatureMethod_;
    Reference_sequence Reference_;
    Id_optional Id_;
  };

  class CanonicalizationMethodType: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // Algorithm
    // 
    typedef ::xml_schema::uri Algorithm_type;
    typedef ::xsd::cxx::tree::traits< Algorithm_type, char > Algorithm_traits;

    const Algorithm_type&
    Algorithm () const;

    Algorithm_type&
    Algorithm ();

    void
    Algorithm (const Algorithm_type& x);

    void
    Algorithm (::std::auto_ptr< Algorithm_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    CanonicalizationMethodType (const Algorithm_type&);

    CanonicalizationMethodType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    CanonicalizationMethodType (const CanonicalizationMethodType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

    virtual CanonicalizationMethodType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~CanonicalizationMethodType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    ::xsd::cxx::tree::one< Algorithm_type > Algorithm_;
  };

  class SignatureMethodType: public ::xml_schema::type
  {
    public:
    // HMACOutputLength
    // 
    typedef ::dsig::HMACOutputLengthType HMACOutputLength_type;
    typedef ::xsd::cxx::tree::optional< HMACOutputLength_type > HMACOutputLength_optional;
    typedef ::xsd::cxx::tree::traits< HMACOutputLength_type, char > HMACOutputLength_traits;

    const HMACOutputLength_optional&
    HMACOutputLength () const;

    HMACOutputLength_optional&
    HMACOutputLength ();

    void
    HMACOutputLength (const HMACOutputLength_type& x);

    void
    HMACOutputLength (const HMACOutputLength_optional& x);

    void
    HMACOutputLength (::std::auto_ptr< HMACOutputLength_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // Algorithm
    // 
    typedef ::xml_schema::uri Algorithm_type;
    typedef ::xsd::cxx::tree::traits< Algorithm_type, char > Algorithm_traits;

    const Algorithm_type&
    Algorithm () const;

    Algorithm_type&
    Algorithm ();

    void
    Algorithm (const Algorithm_type& x);

    void
    Algorithm (::std::auto_ptr< Algorithm_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    SignatureMethodType (const Algorithm_type&);

    SignatureMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    SignatureMethodType (const SignatureMethodType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual SignatureMethodType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SignatureMethodType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    HMACOutputLength_optional HMACOutputLength_;
    any_sequence any_;
    ::xsd::cxx::tree::one< Algorithm_type > Algorithm_;
  };

  class ReferenceType: public ::xml_schema::type
  {
    public:
    // Transforms
    // 
    typedef ::dsig::TransformsType Transforms_type;
    typedef ::xsd::cxx::tree::optional< Transforms_type > Transforms_optional;
    typedef ::xsd::cxx::tree::traits< Transforms_type, char > Transforms_traits;

    const Transforms_optional&
    Transforms () const;

    Transforms_optional&
    Transforms ();

    void
    Transforms (const Transforms_type& x);

    void
    Transforms (const Transforms_optional& x);

    void
    Transforms (::std::auto_ptr< Transforms_type > p);

    // DigestMethod
    // 
    typedef ::dsig::DigestMethodType DigestMethod_type;
    typedef ::xsd::cxx::tree::traits< DigestMethod_type, char > DigestMethod_traits;

    const DigestMethod_type&
    DigestMethod () const;

    DigestMethod_type&
    DigestMethod ();

    void
    DigestMethod (const DigestMethod_type& x);

    void
    DigestMethod (::std::auto_ptr< DigestMethod_type > p);

    // DigestValue
    // 
    typedef ::dsig::DigestValueType DigestValue_type;
    typedef ::xsd::cxx::tree::traits< DigestValue_type, char > DigestValue_traits;

    const DigestValue_type&
    DigestValue () const;

    DigestValue_type&
    DigestValue ();

    void
    DigestValue (const DigestValue_type& x);

    void
    DigestValue (::std::auto_ptr< DigestValue_type > p);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // URI
    // 
    typedef ::xml_schema::uri URI_type;
    typedef ::xsd::cxx::tree::optional< URI_type > URI_optional;
    typedef ::xsd::cxx::tree::traits< URI_type, char > URI_traits;

    const URI_optional&
    URI () const;

    URI_optional&
    URI ();

    void
    URI (const URI_type& x);

    void
    URI (const URI_optional& x);

    void
    URI (::std::auto_ptr< URI_type > p);

    // Type
    // 
    typedef ::xml_schema::uri Type_type;
    typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
    typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

    const Type_optional&
    Type () const;

    Type_optional&
    Type ();

    void
    Type (const Type_type& x);

    void
    Type (const Type_optional& x);

    void
    Type (::std::auto_ptr< Type_type > p);

    // Constructors.
    //
    ReferenceType (const DigestMethod_type&,
                   const DigestValue_type&);

    ReferenceType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    ReferenceType (const ReferenceType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual ReferenceType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ReferenceType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Transforms_optional Transforms_;
    ::xsd::cxx::tree::one< DigestMethod_type > DigestMethod_;
    ::xsd::cxx::tree::one< DigestValue_type > DigestValue_;
    Id_optional Id_;
    URI_optional URI_;
    Type_optional Type_;
  };

  class TransformsType: public ::xml_schema::type
  {
    public:
    // Transform
    // 
    typedef ::dsig::TransformType Transform_type;
    typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
    typedef Transform_sequence::iterator Transform_iterator;
    typedef Transform_sequence::const_iterator Transform_const_iterator;
    typedef ::xsd::cxx::tree::traits< Transform_type, char > Transform_traits;

    const Transform_sequence&
    Transform () const;

    Transform_sequence&
    Transform ();

    void
    Transform (const Transform_sequence& s);

    // Constructors.
    //
    TransformsType ();

    TransformsType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    TransformsType (const TransformsType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual TransformsType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~TransformsType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Transform_sequence Transform_;
  };

  class TransformType: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // XPath
    // 
    typedef ::xml_schema::string XPath_type;
    typedef ::xsd::cxx::tree::sequence< XPath_type > XPath_sequence;
    typedef XPath_sequence::iterator XPath_iterator;
    typedef XPath_sequence::const_iterator XPath_const_iterator;
    typedef ::xsd::cxx::tree::traits< XPath_type, char > XPath_traits;

    const XPath_sequence&
    XPath () const;

    XPath_sequence&
    XPath ();

    void
    XPath (const XPath_sequence& s);

    // Algorithm
    // 
    typedef ::xml_schema::uri Algorithm_type;
    typedef ::xsd::cxx::tree::traits< Algorithm_type, char > Algorithm_traits;

    const Algorithm_type&
    Algorithm () const;

    Algorithm_type&
    Algorithm ();

    void
    Algorithm (const Algorithm_type& x);

    void
    Algorithm (::std::auto_ptr< Algorithm_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    TransformType (const Algorithm_type&);

    TransformType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    TransformType (const TransformType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual TransformType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~TransformType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    XPath_sequence XPath_;
    ::xsd::cxx::tree::one< Algorithm_type > Algorithm_;
  };

  class DigestMethodType: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // Algorithm
    // 
    typedef ::xml_schema::uri Algorithm_type;
    typedef ::xsd::cxx::tree::traits< Algorithm_type, char > Algorithm_traits;

    const Algorithm_type&
    Algorithm () const;

    Algorithm_type&
    Algorithm ();

    void
    Algorithm (const Algorithm_type& x);

    void
    Algorithm (::std::auto_ptr< Algorithm_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    DigestMethodType (const Algorithm_type&);

    DigestMethodType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    DigestMethodType (const DigestMethodType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual DigestMethodType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DigestMethodType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    ::xsd::cxx::tree::one< Algorithm_type > Algorithm_;
  };

  class DigestValueType: public ::xml_schema::base64_binary
  {
    public:
    // Constructors.
    //
    DigestValueType ();

    DigestValueType (const ::xml_schema::base64_binary&);

    DigestValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    DigestValueType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    DigestValueType (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    DigestValueType (const DigestValueType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual DigestValueType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DigestValueType ();
  };

  class KeyInfoType: public ::xml_schema::type
  {
    public:
    // KeyName
    // 
    typedef ::xml_schema::string KeyName_type;
    typedef ::xsd::cxx::tree::sequence< KeyName_type > KeyName_sequence;
    typedef KeyName_sequence::iterator KeyName_iterator;
    typedef KeyName_sequence::const_iterator KeyName_const_iterator;
    typedef ::xsd::cxx::tree::traits< KeyName_type, char > KeyName_traits;

    const KeyName_sequence&
    KeyName () const;

    KeyName_sequence&
    KeyName ();

    void
    KeyName (const KeyName_sequence& s);

    // KeyValue
    // 
    typedef ::dsig::KeyValueType KeyValue_type;
    typedef ::xsd::cxx::tree::sequence< KeyValue_type > KeyValue_sequence;
    typedef KeyValue_sequence::iterator KeyValue_iterator;
    typedef KeyValue_sequence::const_iterator KeyValue_const_iterator;
    typedef ::xsd::cxx::tree::traits< KeyValue_type, char > KeyValue_traits;

    const KeyValue_sequence&
    KeyValue () const;

    KeyValue_sequence&
    KeyValue ();

    void
    KeyValue (const KeyValue_sequence& s);

    // RetrievalMethod
    // 
    typedef ::dsig::RetrievalMethodType RetrievalMethod_type;
    typedef ::xsd::cxx::tree::sequence< RetrievalMethod_type > RetrievalMethod_sequence;
    typedef RetrievalMethod_sequence::iterator RetrievalMethod_iterator;
    typedef RetrievalMethod_sequence::const_iterator RetrievalMethod_const_iterator;
    typedef ::xsd::cxx::tree::traits< RetrievalMethod_type, char > RetrievalMethod_traits;

    const RetrievalMethod_sequence&
    RetrievalMethod () const;

    RetrievalMethod_sequence&
    RetrievalMethod ();

    void
    RetrievalMethod (const RetrievalMethod_sequence& s);

    // X509Data
    // 
    typedef ::dsig::X509DataType X509Data_type;
    typedef ::xsd::cxx::tree::sequence< X509Data_type > X509Data_sequence;
    typedef X509Data_sequence::iterator X509Data_iterator;
    typedef X509Data_sequence::const_iterator X509Data_const_iterator;
    typedef ::xsd::cxx::tree::traits< X509Data_type, char > X509Data_traits;

    const X509Data_sequence&
    X509Data () const;

    X509Data_sequence&
    X509Data ();

    void
    X509Data (const X509Data_sequence& s);

    // PGPData
    // 
    typedef ::dsig::PGPDataType PGPData_type;
    typedef ::xsd::cxx::tree::sequence< PGPData_type > PGPData_sequence;
    typedef PGPData_sequence::iterator PGPData_iterator;
    typedef PGPData_sequence::const_iterator PGPData_const_iterator;
    typedef ::xsd::cxx::tree::traits< PGPData_type, char > PGPData_traits;

    const PGPData_sequence&
    PGPData () const;

    PGPData_sequence&
    PGPData ();

    void
    PGPData (const PGPData_sequence& s);

    // SPKIData
    // 
    typedef ::dsig::SPKIDataType SPKIData_type;
    typedef ::xsd::cxx::tree::sequence< SPKIData_type > SPKIData_sequence;
    typedef SPKIData_sequence::iterator SPKIData_iterator;
    typedef SPKIData_sequence::const_iterator SPKIData_const_iterator;
    typedef ::xsd::cxx::tree::traits< SPKIData_type, char > SPKIData_traits;

    const SPKIData_sequence&
    SPKIData () const;

    SPKIData_sequence&
    SPKIData ();

    void
    SPKIData (const SPKIData_sequence& s);

    // MgmtData
    // 
    typedef ::xml_schema::string MgmtData_type;
    typedef ::xsd::cxx::tree::sequence< MgmtData_type > MgmtData_sequence;
    typedef MgmtData_sequence::iterator MgmtData_iterator;
    typedef MgmtData_sequence::const_iterator MgmtData_const_iterator;
    typedef ::xsd::cxx::tree::traits< MgmtData_type, char > MgmtData_traits;

    const MgmtData_sequence&
    MgmtData () const;

    MgmtData_sequence&
    MgmtData ();

    void
    MgmtData (const MgmtData_sequence& s);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    KeyInfoType ();

    KeyInfoType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    KeyInfoType (const KeyInfoType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual KeyInfoType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~KeyInfoType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    KeyName_sequence KeyName_;
    KeyValue_sequence KeyValue_;
    RetrievalMethod_sequence RetrievalMethod_;
    X509Data_sequence X509Data_;
    PGPData_sequence PGPData_;
    SPKIData_sequence SPKIData_;
    MgmtData_sequence MgmtData_;
    any_sequence any_;
    Id_optional Id_;
  };

  class KeyValueType: public ::xml_schema::type
  {
    public:
    // DSAKeyValue
    // 
    typedef ::dsig::DSAKeyValueType DSAKeyValue_type;
    typedef ::xsd::cxx::tree::optional< DSAKeyValue_type > DSAKeyValue_optional;
    typedef ::xsd::cxx::tree::traits< DSAKeyValue_type, char > DSAKeyValue_traits;

    const DSAKeyValue_optional&
    DSAKeyValue () const;

    DSAKeyValue_optional&
    DSAKeyValue ();

    void
    DSAKeyValue (const DSAKeyValue_type& x);

    void
    DSAKeyValue (const DSAKeyValue_optional& x);

    void
    DSAKeyValue (::std::auto_ptr< DSAKeyValue_type > p);

    // RSAKeyValue
    // 
    typedef ::dsig::RSAKeyValueType RSAKeyValue_type;
    typedef ::xsd::cxx::tree::optional< RSAKeyValue_type > RSAKeyValue_optional;
    typedef ::xsd::cxx::tree::traits< RSAKeyValue_type, char > RSAKeyValue_traits;

    const RSAKeyValue_optional&
    RSAKeyValue () const;

    RSAKeyValue_optional&
    RSAKeyValue ();

    void
    RSAKeyValue (const RSAKeyValue_type& x);

    void
    RSAKeyValue (const RSAKeyValue_optional& x);

    void
    RSAKeyValue (::std::auto_ptr< RSAKeyValue_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_optional any_optional;

    const any_optional&
    any () const;

    any_optional&
    any ();

    void
    any (const ::xercesc::DOMElement& e);

    void
    any (::xercesc::DOMElement* p);

    void
    any (const any_optional& x);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    KeyValueType ();

    KeyValueType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    KeyValueType (const KeyValueType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual KeyValueType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~KeyValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    DSAKeyValue_optional DSAKeyValue_;
    RSAKeyValue_optional RSAKeyValue_;
    any_optional any_;
  };

  class RetrievalMethodType: public ::xml_schema::type
  {
    public:
    // Transforms
    // 
    typedef ::dsig::TransformsType Transforms_type;
    typedef ::xsd::cxx::tree::optional< Transforms_type > Transforms_optional;
    typedef ::xsd::cxx::tree::traits< Transforms_type, char > Transforms_traits;

    const Transforms_optional&
    Transforms () const;

    Transforms_optional&
    Transforms ();

    void
    Transforms (const Transforms_type& x);

    void
    Transforms (const Transforms_optional& x);

    void
    Transforms (::std::auto_ptr< Transforms_type > p);

    // URI
    // 
    typedef ::xml_schema::uri URI_type;
    typedef ::xsd::cxx::tree::optional< URI_type > URI_optional;
    typedef ::xsd::cxx::tree::traits< URI_type, char > URI_traits;

    const URI_optional&
    URI () const;

    URI_optional&
    URI ();

    void
    URI (const URI_type& x);

    void
    URI (const URI_optional& x);

    void
    URI (::std::auto_ptr< URI_type > p);

    // Type
    // 
    typedef ::xml_schema::uri Type_type;
    typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
    typedef ::xsd::cxx::tree::traits< Type_type, char > Type_traits;

    const Type_optional&
    Type () const;

    Type_optional&
    Type ();

    void
    Type (const Type_type& x);

    void
    Type (const Type_optional& x);

    void
    Type (::std::auto_ptr< Type_type > p);

    // Constructors.
    //
    RetrievalMethodType ();

    RetrievalMethodType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    RetrievalMethodType (const RetrievalMethodType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual RetrievalMethodType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RetrievalMethodType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Transforms_optional Transforms_;
    URI_optional URI_;
    Type_optional Type_;
  };

  class X509DataType: public ::xml_schema::type
  {
    public:
    // X509IssuerSerial
    // 
    typedef ::dsig::X509IssuerSerialType X509IssuerSerial_type;
    typedef ::xsd::cxx::tree::sequence< X509IssuerSerial_type > X509IssuerSerial_sequence;
    typedef X509IssuerSerial_sequence::iterator X509IssuerSerial_iterator;
    typedef X509IssuerSerial_sequence::const_iterator X509IssuerSerial_const_iterator;
    typedef ::xsd::cxx::tree::traits< X509IssuerSerial_type, char > X509IssuerSerial_traits;

    const X509IssuerSerial_sequence&
    X509IssuerSerial () const;

    X509IssuerSerial_sequence&
    X509IssuerSerial ();

    void
    X509IssuerSerial (const X509IssuerSerial_sequence& s);

    // X509SKI
    // 
    typedef ::xml_schema::base64_binary X509SKI_type;
    typedef ::xsd::cxx::tree::sequence< X509SKI_type > X509SKI_sequence;
    typedef X509SKI_sequence::iterator X509SKI_iterator;
    typedef X509SKI_sequence::const_iterator X509SKI_const_iterator;
    typedef ::xsd::cxx::tree::traits< X509SKI_type, char > X509SKI_traits;

    const X509SKI_sequence&
    X509SKI () const;

    X509SKI_sequence&
    X509SKI ();

    void
    X509SKI (const X509SKI_sequence& s);

    // X509SubjectName
    // 
    typedef ::xml_schema::string X509SubjectName_type;
    typedef ::xsd::cxx::tree::sequence< X509SubjectName_type > X509SubjectName_sequence;
    typedef X509SubjectName_sequence::iterator X509SubjectName_iterator;
    typedef X509SubjectName_sequence::const_iterator X509SubjectName_const_iterator;
    typedef ::xsd::cxx::tree::traits< X509SubjectName_type, char > X509SubjectName_traits;

    const X509SubjectName_sequence&
    X509SubjectName () const;

    X509SubjectName_sequence&
    X509SubjectName ();

    void
    X509SubjectName (const X509SubjectName_sequence& s);

    // X509Certificate
    // 
    typedef ::xml_schema::base64_binary X509Certificate_type;
    typedef ::xsd::cxx::tree::sequence< X509Certificate_type > X509Certificate_sequence;
    typedef X509Certificate_sequence::iterator X509Certificate_iterator;
    typedef X509Certificate_sequence::const_iterator X509Certificate_const_iterator;
    typedef ::xsd::cxx::tree::traits< X509Certificate_type, char > X509Certificate_traits;

    const X509Certificate_sequence&
    X509Certificate () const;

    X509Certificate_sequence&
    X509Certificate ();

    void
    X509Certificate (const X509Certificate_sequence& s);

    // X509CRL
    // 
    typedef ::xml_schema::base64_binary X509CRL_type;
    typedef ::xsd::cxx::tree::sequence< X509CRL_type > X509CRL_sequence;
    typedef X509CRL_sequence::iterator X509CRL_iterator;
    typedef X509CRL_sequence::const_iterator X509CRL_const_iterator;
    typedef ::xsd::cxx::tree::traits< X509CRL_type, char > X509CRL_traits;

    const X509CRL_sequence&
    X509CRL () const;

    X509CRL_sequence&
    X509CRL ();

    void
    X509CRL (const X509CRL_sequence& s);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    X509DataType ();

    X509DataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    X509DataType (const X509DataType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual X509DataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~X509DataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    X509IssuerSerial_sequence X509IssuerSerial_;
    X509SKI_sequence X509SKI_;
    X509SubjectName_sequence X509SubjectName_;
    X509Certificate_sequence X509Certificate_;
    X509CRL_sequence X509CRL_;
    any_sequence any_;
  };

  class X509IssuerSerialType: public ::xml_schema::type
  {
    public:
    // X509IssuerName
    // 
    typedef ::xml_schema::string X509IssuerName_type;
    typedef ::xsd::cxx::tree::traits< X509IssuerName_type, char > X509IssuerName_traits;

    const X509IssuerName_type&
    X509IssuerName () const;

    X509IssuerName_type&
    X509IssuerName ();

    void
    X509IssuerName (const X509IssuerName_type& x);

    void
    X509IssuerName (::std::auto_ptr< X509IssuerName_type > p);

    // X509SerialNumber
    // 
    typedef ::xml_schema::integer X509SerialNumber_type;
    typedef ::xsd::cxx::tree::traits< X509SerialNumber_type, char > X509SerialNumber_traits;

    const X509SerialNumber_type&
    X509SerialNumber () const;

    X509SerialNumber_type&
    X509SerialNumber ();

    void
    X509SerialNumber (const X509SerialNumber_type& x);

    // Constructors.
    //
    X509IssuerSerialType (const X509IssuerName_type&,
                          const X509SerialNumber_type&);

    X509IssuerSerialType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    X509IssuerSerialType (const X509IssuerSerialType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual X509IssuerSerialType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~X509IssuerSerialType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< X509IssuerName_type > X509IssuerName_;
    ::xsd::cxx::tree::one< X509SerialNumber_type > X509SerialNumber_;
  };

  class PGPDataType: public ::xml_schema::type
  {
    public:
    // PGPKeyID
    // 
    typedef ::xml_schema::base64_binary PGPKeyID_type;
    typedef ::xsd::cxx::tree::optional< PGPKeyID_type > PGPKeyID_optional;
    typedef ::xsd::cxx::tree::traits< PGPKeyID_type, char > PGPKeyID_traits;

    const PGPKeyID_optional&
    PGPKeyID () const;

    PGPKeyID_optional&
    PGPKeyID ();

    void
    PGPKeyID (const PGPKeyID_type& x);

    void
    PGPKeyID (const PGPKeyID_optional& x);

    void
    PGPKeyID (::std::auto_ptr< PGPKeyID_type > p);

    // PGPKeyPacket
    // 
    typedef ::xml_schema::base64_binary PGPKeyPacket_type;
    typedef ::xsd::cxx::tree::optional< PGPKeyPacket_type > PGPKeyPacket_optional;
    typedef ::xsd::cxx::tree::traits< PGPKeyPacket_type, char > PGPKeyPacket_traits;

    const PGPKeyPacket_optional&
    PGPKeyPacket () const;

    PGPKeyPacket_optional&
    PGPKeyPacket ();

    void
    PGPKeyPacket (const PGPKeyPacket_type& x);

    void
    PGPKeyPacket (const PGPKeyPacket_optional& x);

    void
    PGPKeyPacket (::std::auto_ptr< PGPKeyPacket_type > p);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // any1
    // 
    typedef ::xsd::cxx::tree::element_sequence any1_sequence;
    typedef any1_sequence::iterator any1_iterator;
    typedef any1_sequence::const_iterator any1_const_iterator;

    const any1_sequence&
    any1 () const;

    any1_sequence&
    any1 ();

    void
    any1 (const any1_sequence& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    PGPDataType ();

    PGPDataType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    PGPDataType (const PGPDataType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual PGPDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~PGPDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    PGPKeyID_optional PGPKeyID_;
    PGPKeyPacket_optional PGPKeyPacket_;
    any_sequence any_;
    any1_sequence any1_;
  };

  class SPKIDataType: public ::xml_schema::type
  {
    public:
    // SPKISexp
    // 
    typedef ::xml_schema::base64_binary SPKISexp_type;
    typedef ::xsd::cxx::tree::sequence< SPKISexp_type > SPKISexp_sequence;
    typedef SPKISexp_sequence::iterator SPKISexp_iterator;
    typedef SPKISexp_sequence::const_iterator SPKISexp_const_iterator;
    typedef ::xsd::cxx::tree::traits< SPKISexp_type, char > SPKISexp_traits;

    const SPKISexp_sequence&
    SPKISexp () const;

    SPKISexp_sequence&
    SPKISexp ();

    void
    SPKISexp (const SPKISexp_sequence& s);

    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    SPKIDataType ();

    SPKIDataType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    SPKIDataType (const SPKIDataType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual SPKIDataType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SPKIDataType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    SPKISexp_sequence SPKISexp_;
    any_sequence any_;
  };

  class ObjectType: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // MimeType
    // 
    typedef ::xml_schema::string MimeType_type;
    typedef ::xsd::cxx::tree::optional< MimeType_type > MimeType_optional;
    typedef ::xsd::cxx::tree::traits< MimeType_type, char > MimeType_traits;

    const MimeType_optional&
    MimeType () const;

    MimeType_optional&
    MimeType ();

    void
    MimeType (const MimeType_type& x);

    void
    MimeType (const MimeType_optional& x);

    void
    MimeType (::std::auto_ptr< MimeType_type > p);

    // Encoding
    // 
    typedef ::xml_schema::uri Encoding_type;
    typedef ::xsd::cxx::tree::optional< Encoding_type > Encoding_optional;
    typedef ::xsd::cxx::tree::traits< Encoding_type, char > Encoding_traits;

    const Encoding_optional&
    Encoding () const;

    Encoding_optional&
    Encoding ();

    void
    Encoding (const Encoding_type& x);

    void
    Encoding (const Encoding_optional& x);

    void
    Encoding (::std::auto_ptr< Encoding_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    ObjectType ();

    ObjectType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    ObjectType (const ObjectType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual ObjectType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ObjectType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    Id_optional Id_;
    MimeType_optional MimeType_;
    Encoding_optional Encoding_;
  };

  class ManifestType: public ::xml_schema::type
  {
    public:
    // Reference
    // 
    typedef ::dsig::ReferenceType Reference_type;
    typedef ::xsd::cxx::tree::sequence< Reference_type > Reference_sequence;
    typedef Reference_sequence::iterator Reference_iterator;
    typedef Reference_sequence::const_iterator Reference_const_iterator;
    typedef ::xsd::cxx::tree::traits< Reference_type, char > Reference_traits;

    const Reference_sequence&
    Reference () const;

    Reference_sequence&
    Reference ();

    void
    Reference (const Reference_sequence& s);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // Constructors.
    //
    ManifestType ();

    ManifestType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    ManifestType (const ManifestType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual ManifestType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~ManifestType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    Reference_sequence Reference_;
    Id_optional Id_;
  };

  class SignaturePropertiesType: public ::xml_schema::type
  {
    public:
    // SignatureProperty
    // 
    typedef ::dsig::SignaturePropertyType SignatureProperty_type;
    typedef ::xsd::cxx::tree::sequence< SignatureProperty_type > SignatureProperty_sequence;
    typedef SignatureProperty_sequence::iterator SignatureProperty_iterator;
    typedef SignatureProperty_sequence::const_iterator SignatureProperty_const_iterator;
    typedef ::xsd::cxx::tree::traits< SignatureProperty_type, char > SignatureProperty_traits;

    const SignatureProperty_sequence&
    SignatureProperty () const;

    SignatureProperty_sequence&
    SignatureProperty ();

    void
    SignatureProperty (const SignatureProperty_sequence& s);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // Constructors.
    //
    SignaturePropertiesType ();

    SignaturePropertiesType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    SignaturePropertiesType (const SignaturePropertiesType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    virtual SignaturePropertiesType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SignaturePropertiesType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    SignatureProperty_sequence SignatureProperty_;
    Id_optional Id_;
  };

  class SignaturePropertyType: public ::xml_schema::type
  {
    public:
    // any
    // 
    typedef ::xsd::cxx::tree::element_sequence any_sequence;
    typedef any_sequence::iterator any_iterator;
    typedef any_sequence::const_iterator any_const_iterator;

    const any_sequence&
    any () const;

    any_sequence&
    any ();

    void
    any (const any_sequence& s);

    // Target
    // 
    typedef ::xml_schema::uri Target_type;
    typedef ::xsd::cxx::tree::traits< Target_type, char > Target_traits;

    const Target_type&
    Target () const;

    Target_type&
    Target ();

    void
    Target (const Target_type& x);

    void
    Target (::std::auto_ptr< Target_type > p);

    // Id
    // 
    typedef ::xml_schema::id Id_type;
    typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
    typedef ::xsd::cxx::tree::traits< Id_type, char > Id_traits;

    const Id_optional&
    Id () const;

    Id_optional&
    Id ();

    void
    Id (const Id_type& x);

    void
    Id (const Id_optional& x);

    void
    Id (::std::auto_ptr< Id_type > p);

    // DOMDocument for wildcard content.
    //
    const ::xercesc::DOMDocument&
    dom_document () const;

    ::xercesc::DOMDocument&
    dom_document ();

    // Constructors.
    //
    SignaturePropertyType (const Target_type&);

    SignaturePropertyType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    SignaturePropertyType (const SignaturePropertyType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

    virtual SignaturePropertyType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~SignaturePropertyType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

    any_sequence any_;
    ::xsd::cxx::tree::one< Target_type > Target_;
    Id_optional Id_;
  };

  class HMACOutputLengthType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >
  {
    public:
    // Constructors.
    //
    HMACOutputLengthType (const ::xml_schema::integer&);

    HMACOutputLengthType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    HMACOutputLengthType (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    HMACOutputLengthType (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    HMACOutputLengthType (const HMACOutputLengthType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual HMACOutputLengthType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~HMACOutputLengthType ();
  };

  class DSAKeyValueType: public ::xml_schema::type
  {
    public:
    // P
    // 
    typedef ::dsig::CryptoBinary P_type;
    typedef ::xsd::cxx::tree::optional< P_type > P_optional;
    typedef ::xsd::cxx::tree::traits< P_type, char > P_traits;

    const P_optional&
    P () const;

    P_optional&
    P ();

    void
    P (const P_type& x);

    void
    P (const P_optional& x);

    void
    P (::std::auto_ptr< P_type > p);

    // Q
    // 
    typedef ::dsig::CryptoBinary Q_type;
    typedef ::xsd::cxx::tree::optional< Q_type > Q_optional;
    typedef ::xsd::cxx::tree::traits< Q_type, char > Q_traits;

    const Q_optional&
    Q () const;

    Q_optional&
    Q ();

    void
    Q (const Q_type& x);

    void
    Q (const Q_optional& x);

    void
    Q (::std::auto_ptr< Q_type > p);

    // G
    // 
    typedef ::dsig::CryptoBinary G_type;
    typedef ::xsd::cxx::tree::optional< G_type > G_optional;
    typedef ::xsd::cxx::tree::traits< G_type, char > G_traits;

    const G_optional&
    G () const;

    G_optional&
    G ();

    void
    G (const G_type& x);

    void
    G (const G_optional& x);

    void
    G (::std::auto_ptr< G_type > p);

    // Y
    // 
    typedef ::dsig::CryptoBinary Y_type;
    typedef ::xsd::cxx::tree::traits< Y_type, char > Y_traits;

    const Y_type&
    Y () const;

    Y_type&
    Y ();

    void
    Y (const Y_type& x);

    void
    Y (::std::auto_ptr< Y_type > p);

    // J
    // 
    typedef ::dsig::CryptoBinary J_type;
    typedef ::xsd::cxx::tree::optional< J_type > J_optional;
    typedef ::xsd::cxx::tree::traits< J_type, char > J_traits;

    const J_optional&
    J () const;

    J_optional&
    J ();

    void
    J (const J_type& x);

    void
    J (const J_optional& x);

    void
    J (::std::auto_ptr< J_type > p);

    // Seed
    // 
    typedef ::dsig::CryptoBinary Seed_type;
    typedef ::xsd::cxx::tree::optional< Seed_type > Seed_optional;
    typedef ::xsd::cxx::tree::traits< Seed_type, char > Seed_traits;

    const Seed_optional&
    Seed () const;

    Seed_optional&
    Seed ();

    void
    Seed (const Seed_type& x);

    void
    Seed (const Seed_optional& x);

    void
    Seed (::std::auto_ptr< Seed_type > p);

    // PgenCounter
    // 
    typedef ::dsig::CryptoBinary PgenCounter_type;
    typedef ::xsd::cxx::tree::optional< PgenCounter_type > PgenCounter_optional;
    typedef ::xsd::cxx::tree::traits< PgenCounter_type, char > PgenCounter_traits;

    const PgenCounter_optional&
    PgenCounter () const;

    PgenCounter_optional&
    PgenCounter ();

    void
    PgenCounter (const PgenCounter_type& x);

    void
    PgenCounter (const PgenCounter_optional& x);

    void
    PgenCounter (::std::auto_ptr< PgenCounter_type > p);

    // Constructors.
    //
    DSAKeyValueType (const Y_type&);

    DSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    DSAKeyValueType (const DSAKeyValueType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual DSAKeyValueType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~DSAKeyValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    P_optional P_;
    Q_optional Q_;
    G_optional G_;
    ::xsd::cxx::tree::one< Y_type > Y_;
    J_optional J_;
    Seed_optional Seed_;
    PgenCounter_optional PgenCounter_;
  };

  class RSAKeyValueType: public ::xml_schema::type
  {
    public:
    // Modulus
    // 
    typedef ::dsig::CryptoBinary Modulus_type;
    typedef ::xsd::cxx::tree::traits< Modulus_type, char > Modulus_traits;

    const Modulus_type&
    Modulus () const;

    Modulus_type&
    Modulus ();

    void
    Modulus (const Modulus_type& x);

    void
    Modulus (::std::auto_ptr< Modulus_type > p);

    // Exponent
    // 
    typedef ::dsig::CryptoBinary Exponent_type;
    typedef ::xsd::cxx::tree::traits< Exponent_type, char > Exponent_traits;

    const Exponent_type&
    Exponent () const;

    Exponent_type&
    Exponent ();

    void
    Exponent (const Exponent_type& x);

    void
    Exponent (::std::auto_ptr< Exponent_type > p);

    // Constructors.
    //
    RSAKeyValueType (const Modulus_type&,
                     const Exponent_type&);

    RSAKeyValueType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    RSAKeyValueType (const RSAKeyValueType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

    virtual RSAKeyValueType*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~RSAKeyValueType ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< Modulus_type > Modulus_;
    ::xsd::cxx::tree::one< Exponent_type > Exponent_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace dsig
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::std::string& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::std::string& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::std::string& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          const ::std::string& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          const ::std::string& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::std::string& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::std::string& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::std::string& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            const ::std::string& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            const ::std::string& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace dsig
{
  void
  operator<< (::xercesc::DOMElement&, const CryptoBinary&);

  void
  operator<< (::xercesc::DOMAttr&, const CryptoBinary&);

  void
  operator<< (::xml_schema::list_stream&,
              const CryptoBinary&);

  // Serialize to std::ostream.
  //

  void
  Signature (::std::ostream& os,
             const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Signature (::std::ostream& os,
             const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Signature (::std::ostream& os,
             const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Signature (::xercesc::XMLFormatTarget& ft,
             const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Signature (::xercesc::XMLFormatTarget& ft,
             const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Signature (::xercesc::XMLFormatTarget& ft,
             const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Signature (::xercesc::DOMDocument& d,
             const ::dsig::SignatureType& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Signature (const ::dsig::SignatureType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SignatureType&);

  // Serialize to std::ostream.
  //

  void
  SignatureValue (::std::ostream& os,
                  const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  SignatureValue (::std::ostream& os,
                  const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  SignatureValue (::std::ostream& os,
                  const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SignatureValue (::xercesc::XMLFormatTarget& ft,
                  const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  SignatureValue (::xercesc::XMLFormatTarget& ft,
                  const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  void
  SignatureValue (::xercesc::XMLFormatTarget& ft,
                  const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& eh,
                  const ::std::string& e = "UTF-8",
                  ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SignatureValue (::xercesc::DOMDocument& d,
                  const ::dsig::SignatureValueType& x,
                  ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureValue (const ::dsig::SignatureValueType& x, 
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SignatureValueType&);

  // Serialize to std::ostream.
  //

  void
  SignedInfo (::std::ostream& os,
              const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  SignedInfo (::std::ostream& os,
              const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  SignedInfo (::std::ostream& os,
              const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SignedInfo (::xercesc::XMLFormatTarget& ft,
              const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  SignedInfo (::xercesc::XMLFormatTarget& ft,
              const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  SignedInfo (::xercesc::XMLFormatTarget& ft,
              const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SignedInfo (::xercesc::DOMDocument& d,
              const ::dsig::SignedInfoType& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignedInfo (const ::dsig::SignedInfoType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SignedInfoType&);

  // Serialize to std::ostream.
  //

  void
  CanonicalizationMethod (::std::ostream& os,
                          const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  CanonicalizationMethod (::std::ostream& os,
                          const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  CanonicalizationMethod (::std::ostream& os,
                          const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  CanonicalizationMethod (::xercesc::XMLFormatTarget& ft,
                          const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  CanonicalizationMethod (::xercesc::XMLFormatTarget& ft,
                          const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  void
  CanonicalizationMethod (::xercesc::XMLFormatTarget& ft,
                          const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& eh,
                          const ::std::string& e = "UTF-8",
                          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  CanonicalizationMethod (::xercesc::DOMDocument& d,
                          const ::dsig::CanonicalizationMethodType& x,
                          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CanonicalizationMethod (const ::dsig::CanonicalizationMethodType& x, 
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const CanonicalizationMethodType&);

  // Serialize to std::ostream.
  //

  void
  SignatureMethod (::std::ostream& os,
                   const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  SignatureMethod (::std::ostream& os,
                   const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  SignatureMethod (::std::ostream& os,
                   const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SignatureMethod (::xercesc::XMLFormatTarget& ft,
                   const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  SignatureMethod (::xercesc::XMLFormatTarget& ft,
                   const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  SignatureMethod (::xercesc::XMLFormatTarget& ft,
                   const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SignatureMethod (::xercesc::DOMDocument& d,
                   const ::dsig::SignatureMethodType& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureMethod (const ::dsig::SignatureMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SignatureMethodType&);

  // Serialize to std::ostream.
  //

  void
  Reference (::std::ostream& os,
             const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Reference (::std::ostream& os,
             const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Reference (::std::ostream& os,
             const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Reference (::xercesc::XMLFormatTarget& ft,
             const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Reference (::xercesc::XMLFormatTarget& ft,
             const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Reference (::xercesc::XMLFormatTarget& ft,
             const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Reference (::xercesc::DOMDocument& d,
             const ::dsig::ReferenceType& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Reference (const ::dsig::ReferenceType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const ReferenceType&);

  // Serialize to std::ostream.
  //

  void
  Transforms (::std::ostream& os,
              const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Transforms (::std::ostream& os,
              const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Transforms (::std::ostream& os,
              const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Transforms (::xercesc::XMLFormatTarget& ft,
              const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Transforms (::xercesc::XMLFormatTarget& ft,
              const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  void
  Transforms (::xercesc::XMLFormatTarget& ft,
              const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& eh,
              const ::std::string& e = "UTF-8",
              ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Transforms (::xercesc::DOMDocument& d,
              const ::dsig::TransformsType& x,
              ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Transforms (const ::dsig::TransformsType& x, 
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const TransformsType&);

  // Serialize to std::ostream.
  //

  void
  Transform (::std::ostream& os,
             const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Transform (::std::ostream& os,
             const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Transform (::std::ostream& os,
             const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Transform (::xercesc::XMLFormatTarget& ft,
             const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Transform (::xercesc::XMLFormatTarget& ft,
             const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  void
  Transform (::xercesc::XMLFormatTarget& ft,
             const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& eh,
             const ::std::string& e = "UTF-8",
             ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Transform (::xercesc::DOMDocument& d,
             const ::dsig::TransformType& x,
             ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Transform (const ::dsig::TransformType& x, 
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const TransformType&);

  // Serialize to std::ostream.
  //

  void
  DigestMethod (::std::ostream& os,
                const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  DigestMethod (::std::ostream& os,
                const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  DigestMethod (::std::ostream& os,
                const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DigestMethod (::xercesc::XMLFormatTarget& ft,
                const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  DigestMethod (::xercesc::XMLFormatTarget& ft,
                const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  void
  DigestMethod (::xercesc::XMLFormatTarget& ft,
                const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& eh,
                const ::std::string& e = "UTF-8",
                ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DigestMethod (::xercesc::DOMDocument& d,
                const ::dsig::DigestMethodType& x,
                ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DigestMethod (const ::dsig::DigestMethodType& x, 
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DigestMethodType&);

  // Serialize to std::ostream.
  //

  void
  DigestValue (::std::ostream& os,
               const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DigestValue (::std::ostream& os,
               const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DigestValue (::std::ostream& os,
               const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DigestValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DigestValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DigestValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DigestValue (::xercesc::DOMDocument& d,
               const ::dsig::DigestValueType& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DigestValue (const ::dsig::DigestValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DigestValueType&);

  void
  operator<< (::xercesc::DOMAttr&, const DigestValueType&);

  void
  operator<< (::xml_schema::list_stream&,
              const DigestValueType&);

  // Serialize to std::ostream.
  //

  void
  KeyInfo (::std::ostream& os,
           const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyInfo (::std::ostream& os,
           const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyInfo (::std::ostream& os,
           const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  KeyInfo (::xercesc::XMLFormatTarget& ft,
           const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyInfo (::xercesc::XMLFormatTarget& ft,
           const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyInfo (::xercesc::XMLFormatTarget& ft,
           const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  KeyInfo (::xercesc::DOMDocument& d,
           const ::dsig::KeyInfoType& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  KeyInfo (const ::dsig::KeyInfoType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const KeyInfoType&);

  // Serialize to std::ostream.
  //

  void
  KeyName (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyName (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyName (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  KeyName (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyName (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  KeyName (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  KeyName (::xercesc::DOMDocument& d,
           const ::xml_schema::string& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  KeyName (const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  MgmtData (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  MgmtData (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  MgmtData (::std::ostream& os,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  MgmtData (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  MgmtData (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  MgmtData (::xercesc::XMLFormatTarget& ft,
            const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  MgmtData (::xercesc::DOMDocument& d,
            const ::xml_schema::string& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  MgmtData (const ::xml_schema::string& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  KeyValue (::std::ostream& os,
            const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  KeyValue (::std::ostream& os,
            const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  KeyValue (::std::ostream& os,
            const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  KeyValue (::xercesc::XMLFormatTarget& ft,
            const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  KeyValue (::xercesc::XMLFormatTarget& ft,
            const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  KeyValue (::xercesc::XMLFormatTarget& ft,
            const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  KeyValue (::xercesc::DOMDocument& d,
            const ::dsig::KeyValueType& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  KeyValue (const ::dsig::KeyValueType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const KeyValueType&);

  // Serialize to std::ostream.
  //

  void
  RetrievalMethod (::std::ostream& os,
                   const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  RetrievalMethod (::std::ostream& os,
                   const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  RetrievalMethod (::std::ostream& os,
                   const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  RetrievalMethod (::xercesc::XMLFormatTarget& ft,
                   const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  RetrievalMethod (::xercesc::XMLFormatTarget& ft,
                   const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  void
  RetrievalMethod (::xercesc::XMLFormatTarget& ft,
                   const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& eh,
                   const ::std::string& e = "UTF-8",
                   ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  RetrievalMethod (::xercesc::DOMDocument& d,
                   const ::dsig::RetrievalMethodType& x,
                   ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  RetrievalMethod (const ::dsig::RetrievalMethodType& x, 
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const RetrievalMethodType&);

  // Serialize to std::ostream.
  //

  void
  X509Data (::std::ostream& os,
            const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  X509Data (::std::ostream& os,
            const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  X509Data (::std::ostream& os,
            const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  X509Data (::xercesc::XMLFormatTarget& ft,
            const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  X509Data (::xercesc::XMLFormatTarget& ft,
            const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  X509Data (::xercesc::XMLFormatTarget& ft,
            const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  X509Data (::xercesc::DOMDocument& d,
            const ::dsig::X509DataType& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  X509Data (const ::dsig::X509DataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const X509DataType&);

  void
  operator<< (::xercesc::DOMElement&, const X509IssuerSerialType&);

  // Serialize to std::ostream.
  //

  void
  PGPData (::std::ostream& os,
           const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  PGPData (::std::ostream& os,
           const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  PGPData (::std::ostream& os,
           const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  PGPData (::xercesc::XMLFormatTarget& ft,
           const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  PGPData (::xercesc::XMLFormatTarget& ft,
           const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  PGPData (::xercesc::XMLFormatTarget& ft,
           const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  PGPData (::xercesc::DOMDocument& d,
           const ::dsig::PGPDataType& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  PGPData (const ::dsig::PGPDataType& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const PGPDataType&);

  // Serialize to std::ostream.
  //

  void
  SPKIData (::std::ostream& os,
            const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  SPKIData (::std::ostream& os,
            const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  SPKIData (::std::ostream& os,
            const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SPKIData (::xercesc::XMLFormatTarget& ft,
            const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  SPKIData (::xercesc::XMLFormatTarget& ft,
            const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  SPKIData (::xercesc::XMLFormatTarget& ft,
            const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SPKIData (::xercesc::DOMDocument& d,
            const ::dsig::SPKIDataType& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SPKIData (const ::dsig::SPKIDataType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SPKIDataType&);

  // Serialize to std::ostream.
  //

  void
  Object (::std::ostream& os,
          const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Object (::std::ostream& os,
          const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Object (::std::ostream& os,
          const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Object (::xercesc::XMLFormatTarget& ft,
          const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Object (::xercesc::XMLFormatTarget& ft,
          const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  Object (::xercesc::XMLFormatTarget& ft,
          const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Object (::xercesc::DOMDocument& d,
          const ::dsig::ObjectType& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Object (const ::dsig::ObjectType& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const ObjectType&);

  // Serialize to std::ostream.
  //

  void
  Manifest (::std::ostream& os,
            const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Manifest (::std::ostream& os,
            const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Manifest (::std::ostream& os,
            const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  Manifest (::xercesc::XMLFormatTarget& ft,
            const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Manifest (::xercesc::XMLFormatTarget& ft,
            const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  void
  Manifest (::xercesc::XMLFormatTarget& ft,
            const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& eh,
            const ::std::string& e = "UTF-8",
            ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  Manifest (::xercesc::DOMDocument& d,
            const ::dsig::ManifestType& x,
            ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Manifest (const ::dsig::ManifestType& x, 
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const ManifestType&);

  // Serialize to std::ostream.
  //

  void
  SignatureProperties (::std::ostream& os,
                       const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  SignatureProperties (::std::ostream& os,
                       const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  SignatureProperties (::std::ostream& os,
                       const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SignatureProperties (::xercesc::XMLFormatTarget& ft,
                       const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  SignatureProperties (::xercesc::XMLFormatTarget& ft,
                       const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  void
  SignatureProperties (::xercesc::XMLFormatTarget& ft,
                       const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& eh,
                       const ::std::string& e = "UTF-8",
                       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SignatureProperties (::xercesc::DOMDocument& d,
                       const ::dsig::SignaturePropertiesType& x,
                       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureProperties (const ::dsig::SignaturePropertiesType& x, 
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SignaturePropertiesType&);

  // Serialize to std::ostream.
  //

  void
  SignatureProperty (::std::ostream& os,
                     const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  SignatureProperty (::std::ostream& os,
                     const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  SignatureProperty (::std::ostream& os,
                     const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  SignatureProperty (::xercesc::XMLFormatTarget& ft,
                     const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  SignatureProperty (::xercesc::XMLFormatTarget& ft,
                     const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  void
  SignatureProperty (::xercesc::XMLFormatTarget& ft,
                     const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& eh,
                     const ::std::string& e = "UTF-8",
                     ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  SignatureProperty (::xercesc::DOMDocument& d,
                     const ::dsig::SignaturePropertyType& x,
                     ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureProperty (const ::dsig::SignaturePropertyType& x, 
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const SignaturePropertyType&);

  void
  operator<< (::xercesc::DOMElement&, const HMACOutputLengthType&);

  void
  operator<< (::xercesc::DOMAttr&, const HMACOutputLengthType&);

  void
  operator<< (::xml_schema::list_stream&,
              const HMACOutputLengthType&);

  // Serialize to std::ostream.
  //

  void
  DSAKeyValue (::std::ostream& os,
               const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DSAKeyValue (::std::ostream& os,
               const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DSAKeyValue (::std::ostream& os,
               const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  DSAKeyValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DSAKeyValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  DSAKeyValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  DSAKeyValue (::xercesc::DOMDocument& d,
               const ::dsig::DSAKeyValueType& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DSAKeyValue (const ::dsig::DSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const DSAKeyValueType&);

  // Serialize to std::ostream.
  //

  void
  RSAKeyValue (::std::ostream& os,
               const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  RSAKeyValue (::std::ostream& os,
               const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  RSAKeyValue (::std::ostream& os,
               const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  RSAKeyValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  RSAKeyValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  RSAKeyValue (::xercesc::XMLFormatTarget& ft,
               const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& eh,
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  RSAKeyValue (::xercesc::DOMDocument& d,
               const ::dsig::RSAKeyValueType& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  RSAKeyValue (const ::dsig::RSAKeyValueType& x, 
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const RSAKeyValueType&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_U_HPC_PETRY_SRC_XBEINSTD_BRANCHES_CMAKE_AND_SPLITTING_XBE_ETC_XBE_SCHEMA_DSIG_HPP
