// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "jsdl-posix-schema.hpp"

namespace jsdlPosix
{
  // Environment_Type
  // 

  const Environment_Type::name_type& Environment_Type::
  name () const
  {
    return this->name_.get ();
  }

  Environment_Type::name_type& Environment_Type::
  name ()
  {
    return this->name_.get ();
  }

  void Environment_Type::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void Environment_Type::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const Environment_Type::filesystemName_optional& Environment_Type::
  filesystemName () const
  {
    return this->filesystemName_;
  }

  Environment_Type::filesystemName_optional& Environment_Type::
  filesystemName ()
  {
    return this->filesystemName_;
  }

  void Environment_Type::
  filesystemName (const filesystemName_type& x)
  {
    this->filesystemName_.set (x);
  }

  void Environment_Type::
  filesystemName (const filesystemName_optional& x)
  {
    this->filesystemName_ = x;
  }

  void Environment_Type::
  filesystemName (::std::auto_ptr< filesystemName_type > x)
  {
    this->filesystemName_.set (x);
  }


  // Argument_Type
  // 

  const Argument_Type::filesystemName_optional& Argument_Type::
  filesystemName () const
  {
    return this->filesystemName_;
  }

  Argument_Type::filesystemName_optional& Argument_Type::
  filesystemName ()
  {
    return this->filesystemName_;
  }

  void Argument_Type::
  filesystemName (const filesystemName_type& x)
  {
    this->filesystemName_.set (x);
  }

  void Argument_Type::
  filesystemName (const filesystemName_optional& x)
  {
    this->filesystemName_ = x;
  }

  void Argument_Type::
  filesystemName (::std::auto_ptr< filesystemName_type > x)
  {
    this->filesystemName_.set (x);
  }


  // FileName_Type
  // 

  const FileName_Type::filesystemName_optional& FileName_Type::
  filesystemName () const
  {
    return this->filesystemName_;
  }

  FileName_Type::filesystemName_optional& FileName_Type::
  filesystemName ()
  {
    return this->filesystemName_;
  }

  void FileName_Type::
  filesystemName (const filesystemName_type& x)
  {
    this->filesystemName_.set (x);
  }

  void FileName_Type::
  filesystemName (const filesystemName_optional& x)
  {
    this->filesystemName_ = x;
  }

  void FileName_Type::
  filesystemName (::std::auto_ptr< filesystemName_type > x)
  {
    this->filesystemName_.set (x);
  }


  // DirectoryName_Type
  // 

  const DirectoryName_Type::filesystemName_optional& DirectoryName_Type::
  filesystemName () const
  {
    return this->filesystemName_;
  }

  DirectoryName_Type::filesystemName_optional& DirectoryName_Type::
  filesystemName ()
  {
    return this->filesystemName_;
  }

  void DirectoryName_Type::
  filesystemName (const filesystemName_type& x)
  {
    this->filesystemName_.set (x);
  }

  void DirectoryName_Type::
  filesystemName (const filesystemName_optional& x)
  {
    this->filesystemName_ = x;
  }

  void DirectoryName_Type::
  filesystemName (::std::auto_ptr< filesystemName_type > x)
  {
    this->filesystemName_.set (x);
  }


  // Limits_Type
  // 


  // UserName_Type
  // 


  // GroupName_Type
  // 


  // POSIXApplication_Type
  // 

  const POSIXApplication_Type::Executable_optional& POSIXApplication_Type::
  Executable () const
  {
    return this->Executable_;
  }

  POSIXApplication_Type::Executable_optional& POSIXApplication_Type::
  Executable ()
  {
    return this->Executable_;
  }

  void POSIXApplication_Type::
  Executable (const Executable_type& x)
  {
    this->Executable_.set (x);
  }

  void POSIXApplication_Type::
  Executable (const Executable_optional& x)
  {
    this->Executable_ = x;
  }

  void POSIXApplication_Type::
  Executable (::std::auto_ptr< Executable_type > x)
  {
    this->Executable_.set (x);
  }

  const POSIXApplication_Type::Argument_sequence& POSIXApplication_Type::
  Argument () const
  {
    return this->Argument_;
  }

  POSIXApplication_Type::Argument_sequence& POSIXApplication_Type::
  Argument ()
  {
    return this->Argument_;
  }

  void POSIXApplication_Type::
  Argument (const Argument_sequence& s)
  {
    this->Argument_ = s;
  }

  const POSIXApplication_Type::Input_optional& POSIXApplication_Type::
  Input () const
  {
    return this->Input_;
  }

  POSIXApplication_Type::Input_optional& POSIXApplication_Type::
  Input ()
  {
    return this->Input_;
  }

  void POSIXApplication_Type::
  Input (const Input_type& x)
  {
    this->Input_.set (x);
  }

  void POSIXApplication_Type::
  Input (const Input_optional& x)
  {
    this->Input_ = x;
  }

  void POSIXApplication_Type::
  Input (::std::auto_ptr< Input_type > x)
  {
    this->Input_.set (x);
  }

  const POSIXApplication_Type::Output_optional& POSIXApplication_Type::
  Output () const
  {
    return this->Output_;
  }

  POSIXApplication_Type::Output_optional& POSIXApplication_Type::
  Output ()
  {
    return this->Output_;
  }

  void POSIXApplication_Type::
  Output (const Output_type& x)
  {
    this->Output_.set (x);
  }

  void POSIXApplication_Type::
  Output (const Output_optional& x)
  {
    this->Output_ = x;
  }

  void POSIXApplication_Type::
  Output (::std::auto_ptr< Output_type > x)
  {
    this->Output_.set (x);
  }

  const POSIXApplication_Type::Error_optional& POSIXApplication_Type::
  Error () const
  {
    return this->Error_;
  }

  POSIXApplication_Type::Error_optional& POSIXApplication_Type::
  Error ()
  {
    return this->Error_;
  }

  void POSIXApplication_Type::
  Error (const Error_type& x)
  {
    this->Error_.set (x);
  }

  void POSIXApplication_Type::
  Error (const Error_optional& x)
  {
    this->Error_ = x;
  }

  void POSIXApplication_Type::
  Error (::std::auto_ptr< Error_type > x)
  {
    this->Error_.set (x);
  }

  const POSIXApplication_Type::WorkingDirectory_optional& POSIXApplication_Type::
  WorkingDirectory () const
  {
    return this->WorkingDirectory_;
  }

  POSIXApplication_Type::WorkingDirectory_optional& POSIXApplication_Type::
  WorkingDirectory ()
  {
    return this->WorkingDirectory_;
  }

  void POSIXApplication_Type::
  WorkingDirectory (const WorkingDirectory_type& x)
  {
    this->WorkingDirectory_.set (x);
  }

  void POSIXApplication_Type::
  WorkingDirectory (const WorkingDirectory_optional& x)
  {
    this->WorkingDirectory_ = x;
  }

  void POSIXApplication_Type::
  WorkingDirectory (::std::auto_ptr< WorkingDirectory_type > x)
  {
    this->WorkingDirectory_.set (x);
  }

  const POSIXApplication_Type::Environment_sequence& POSIXApplication_Type::
  Environment () const
  {
    return this->Environment_;
  }

  POSIXApplication_Type::Environment_sequence& POSIXApplication_Type::
  Environment ()
  {
    return this->Environment_;
  }

  void POSIXApplication_Type::
  Environment (const Environment_sequence& s)
  {
    this->Environment_ = s;
  }

  const POSIXApplication_Type::WallTimeLimit_optional& POSIXApplication_Type::
  WallTimeLimit () const
  {
    return this->WallTimeLimit_;
  }

  POSIXApplication_Type::WallTimeLimit_optional& POSIXApplication_Type::
  WallTimeLimit ()
  {
    return this->WallTimeLimit_;
  }

  void POSIXApplication_Type::
  WallTimeLimit (const WallTimeLimit_type& x)
  {
    this->WallTimeLimit_.set (x);
  }

  void POSIXApplication_Type::
  WallTimeLimit (const WallTimeLimit_optional& x)
  {
    this->WallTimeLimit_ = x;
  }

  void POSIXApplication_Type::
  WallTimeLimit (::std::auto_ptr< WallTimeLimit_type > x)
  {
    this->WallTimeLimit_.set (x);
  }

  const POSIXApplication_Type::FileSizeLimit_optional& POSIXApplication_Type::
  FileSizeLimit () const
  {
    return this->FileSizeLimit_;
  }

  POSIXApplication_Type::FileSizeLimit_optional& POSIXApplication_Type::
  FileSizeLimit ()
  {
    return this->FileSizeLimit_;
  }

  void POSIXApplication_Type::
  FileSizeLimit (const FileSizeLimit_type& x)
  {
    this->FileSizeLimit_.set (x);
  }

  void POSIXApplication_Type::
  FileSizeLimit (const FileSizeLimit_optional& x)
  {
    this->FileSizeLimit_ = x;
  }

  void POSIXApplication_Type::
  FileSizeLimit (::std::auto_ptr< FileSizeLimit_type > x)
  {
    this->FileSizeLimit_.set (x);
  }

  const POSIXApplication_Type::CoreDumpLimit_optional& POSIXApplication_Type::
  CoreDumpLimit () const
  {
    return this->CoreDumpLimit_;
  }

  POSIXApplication_Type::CoreDumpLimit_optional& POSIXApplication_Type::
  CoreDumpLimit ()
  {
    return this->CoreDumpLimit_;
  }

  void POSIXApplication_Type::
  CoreDumpLimit (const CoreDumpLimit_type& x)
  {
    this->CoreDumpLimit_.set (x);
  }

  void POSIXApplication_Type::
  CoreDumpLimit (const CoreDumpLimit_optional& x)
  {
    this->CoreDumpLimit_ = x;
  }

  void POSIXApplication_Type::
  CoreDumpLimit (::std::auto_ptr< CoreDumpLimit_type > x)
  {
    this->CoreDumpLimit_.set (x);
  }

  const POSIXApplication_Type::DataSegmentLimit_optional& POSIXApplication_Type::
  DataSegmentLimit () const
  {
    return this->DataSegmentLimit_;
  }

  POSIXApplication_Type::DataSegmentLimit_optional& POSIXApplication_Type::
  DataSegmentLimit ()
  {
    return this->DataSegmentLimit_;
  }

  void POSIXApplication_Type::
  DataSegmentLimit (const DataSegmentLimit_type& x)
  {
    this->DataSegmentLimit_.set (x);
  }

  void POSIXApplication_Type::
  DataSegmentLimit (const DataSegmentLimit_optional& x)
  {
    this->DataSegmentLimit_ = x;
  }

  void POSIXApplication_Type::
  DataSegmentLimit (::std::auto_ptr< DataSegmentLimit_type > x)
  {
    this->DataSegmentLimit_.set (x);
  }

  const POSIXApplication_Type::LockedMemoryLimit_optional& POSIXApplication_Type::
  LockedMemoryLimit () const
  {
    return this->LockedMemoryLimit_;
  }

  POSIXApplication_Type::LockedMemoryLimit_optional& POSIXApplication_Type::
  LockedMemoryLimit ()
  {
    return this->LockedMemoryLimit_;
  }

  void POSIXApplication_Type::
  LockedMemoryLimit (const LockedMemoryLimit_type& x)
  {
    this->LockedMemoryLimit_.set (x);
  }

  void POSIXApplication_Type::
  LockedMemoryLimit (const LockedMemoryLimit_optional& x)
  {
    this->LockedMemoryLimit_ = x;
  }

  void POSIXApplication_Type::
  LockedMemoryLimit (::std::auto_ptr< LockedMemoryLimit_type > x)
  {
    this->LockedMemoryLimit_.set (x);
  }

  const POSIXApplication_Type::MemoryLimit_optional& POSIXApplication_Type::
  MemoryLimit () const
  {
    return this->MemoryLimit_;
  }

  POSIXApplication_Type::MemoryLimit_optional& POSIXApplication_Type::
  MemoryLimit ()
  {
    return this->MemoryLimit_;
  }

  void POSIXApplication_Type::
  MemoryLimit (const MemoryLimit_type& x)
  {
    this->MemoryLimit_.set (x);
  }

  void POSIXApplication_Type::
  MemoryLimit (const MemoryLimit_optional& x)
  {
    this->MemoryLimit_ = x;
  }

  void POSIXApplication_Type::
  MemoryLimit (::std::auto_ptr< MemoryLimit_type > x)
  {
    this->MemoryLimit_.set (x);
  }

  const POSIXApplication_Type::OpenDescriptorsLimit_optional& POSIXApplication_Type::
  OpenDescriptorsLimit () const
  {
    return this->OpenDescriptorsLimit_;
  }

  POSIXApplication_Type::OpenDescriptorsLimit_optional& POSIXApplication_Type::
  OpenDescriptorsLimit ()
  {
    return this->OpenDescriptorsLimit_;
  }

  void POSIXApplication_Type::
  OpenDescriptorsLimit (const OpenDescriptorsLimit_type& x)
  {
    this->OpenDescriptorsLimit_.set (x);
  }

  void POSIXApplication_Type::
  OpenDescriptorsLimit (const OpenDescriptorsLimit_optional& x)
  {
    this->OpenDescriptorsLimit_ = x;
  }

  void POSIXApplication_Type::
  OpenDescriptorsLimit (::std::auto_ptr< OpenDescriptorsLimit_type > x)
  {
    this->OpenDescriptorsLimit_.set (x);
  }

  const POSIXApplication_Type::PipeSizeLimit_optional& POSIXApplication_Type::
  PipeSizeLimit () const
  {
    return this->PipeSizeLimit_;
  }

  POSIXApplication_Type::PipeSizeLimit_optional& POSIXApplication_Type::
  PipeSizeLimit ()
  {
    return this->PipeSizeLimit_;
  }

  void POSIXApplication_Type::
  PipeSizeLimit (const PipeSizeLimit_type& x)
  {
    this->PipeSizeLimit_.set (x);
  }

  void POSIXApplication_Type::
  PipeSizeLimit (const PipeSizeLimit_optional& x)
  {
    this->PipeSizeLimit_ = x;
  }

  void POSIXApplication_Type::
  PipeSizeLimit (::std::auto_ptr< PipeSizeLimit_type > x)
  {
    this->PipeSizeLimit_.set (x);
  }

  const POSIXApplication_Type::StackSizeLimit_optional& POSIXApplication_Type::
  StackSizeLimit () const
  {
    return this->StackSizeLimit_;
  }

  POSIXApplication_Type::StackSizeLimit_optional& POSIXApplication_Type::
  StackSizeLimit ()
  {
    return this->StackSizeLimit_;
  }

  void POSIXApplication_Type::
  StackSizeLimit (const StackSizeLimit_type& x)
  {
    this->StackSizeLimit_.set (x);
  }

  void POSIXApplication_Type::
  StackSizeLimit (const StackSizeLimit_optional& x)
  {
    this->StackSizeLimit_ = x;
  }

  void POSIXApplication_Type::
  StackSizeLimit (::std::auto_ptr< StackSizeLimit_type > x)
  {
    this->StackSizeLimit_.set (x);
  }

  const POSIXApplication_Type::CPUTimeLimit_optional& POSIXApplication_Type::
  CPUTimeLimit () const
  {
    return this->CPUTimeLimit_;
  }

  POSIXApplication_Type::CPUTimeLimit_optional& POSIXApplication_Type::
  CPUTimeLimit ()
  {
    return this->CPUTimeLimit_;
  }

  void POSIXApplication_Type::
  CPUTimeLimit (const CPUTimeLimit_type& x)
  {
    this->CPUTimeLimit_.set (x);
  }

  void POSIXApplication_Type::
  CPUTimeLimit (const CPUTimeLimit_optional& x)
  {
    this->CPUTimeLimit_ = x;
  }

  void POSIXApplication_Type::
  CPUTimeLimit (::std::auto_ptr< CPUTimeLimit_type > x)
  {
    this->CPUTimeLimit_.set (x);
  }

  const POSIXApplication_Type::ProcessCountLimit_optional& POSIXApplication_Type::
  ProcessCountLimit () const
  {
    return this->ProcessCountLimit_;
  }

  POSIXApplication_Type::ProcessCountLimit_optional& POSIXApplication_Type::
  ProcessCountLimit ()
  {
    return this->ProcessCountLimit_;
  }

  void POSIXApplication_Type::
  ProcessCountLimit (const ProcessCountLimit_type& x)
  {
    this->ProcessCountLimit_.set (x);
  }

  void POSIXApplication_Type::
  ProcessCountLimit (const ProcessCountLimit_optional& x)
  {
    this->ProcessCountLimit_ = x;
  }

  void POSIXApplication_Type::
  ProcessCountLimit (::std::auto_ptr< ProcessCountLimit_type > x)
  {
    this->ProcessCountLimit_.set (x);
  }

  const POSIXApplication_Type::VirtualMemoryLimit_optional& POSIXApplication_Type::
  VirtualMemoryLimit () const
  {
    return this->VirtualMemoryLimit_;
  }

  POSIXApplication_Type::VirtualMemoryLimit_optional& POSIXApplication_Type::
  VirtualMemoryLimit ()
  {
    return this->VirtualMemoryLimit_;
  }

  void POSIXApplication_Type::
  VirtualMemoryLimit (const VirtualMemoryLimit_type& x)
  {
    this->VirtualMemoryLimit_.set (x);
  }

  void POSIXApplication_Type::
  VirtualMemoryLimit (const VirtualMemoryLimit_optional& x)
  {
    this->VirtualMemoryLimit_ = x;
  }

  void POSIXApplication_Type::
  VirtualMemoryLimit (::std::auto_ptr< VirtualMemoryLimit_type > x)
  {
    this->VirtualMemoryLimit_.set (x);
  }

  const POSIXApplication_Type::ThreadCountLimit_optional& POSIXApplication_Type::
  ThreadCountLimit () const
  {
    return this->ThreadCountLimit_;
  }

  POSIXApplication_Type::ThreadCountLimit_optional& POSIXApplication_Type::
  ThreadCountLimit ()
  {
    return this->ThreadCountLimit_;
  }

  void POSIXApplication_Type::
  ThreadCountLimit (const ThreadCountLimit_type& x)
  {
    this->ThreadCountLimit_.set (x);
  }

  void POSIXApplication_Type::
  ThreadCountLimit (const ThreadCountLimit_optional& x)
  {
    this->ThreadCountLimit_ = x;
  }

  void POSIXApplication_Type::
  ThreadCountLimit (::std::auto_ptr< ThreadCountLimit_type > x)
  {
    this->ThreadCountLimit_.set (x);
  }

  const POSIXApplication_Type::UserName_optional& POSIXApplication_Type::
  UserName () const
  {
    return this->UserName_;
  }

  POSIXApplication_Type::UserName_optional& POSIXApplication_Type::
  UserName ()
  {
    return this->UserName_;
  }

  void POSIXApplication_Type::
  UserName (const UserName_type& x)
  {
    this->UserName_.set (x);
  }

  void POSIXApplication_Type::
  UserName (const UserName_optional& x)
  {
    this->UserName_ = x;
  }

  void POSIXApplication_Type::
  UserName (::std::auto_ptr< UserName_type > x)
  {
    this->UserName_.set (x);
  }

  const POSIXApplication_Type::GroupName_optional& POSIXApplication_Type::
  GroupName () const
  {
    return this->GroupName_;
  }

  POSIXApplication_Type::GroupName_optional& POSIXApplication_Type::
  GroupName ()
  {
    return this->GroupName_;
  }

  void POSIXApplication_Type::
  GroupName (const GroupName_type& x)
  {
    this->GroupName_.set (x);
  }

  void POSIXApplication_Type::
  GroupName (const GroupName_optional& x)
  {
    this->GroupName_ = x;
  }

  void POSIXApplication_Type::
  GroupName (::std::auto_ptr< GroupName_type > x)
  {
    this->GroupName_.set (x);
  }

  const POSIXApplication_Type::name_optional& POSIXApplication_Type::
  name () const
  {
    return this->name_;
  }

  POSIXApplication_Type::name_optional& POSIXApplication_Type::
  name ()
  {
    return this->name_;
  }

  void POSIXApplication_Type::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void POSIXApplication_Type::
  name (const name_optional& x)
  {
    this->name_ = x;
  }

  void POSIXApplication_Type::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace jsdlPosix
{
  // Environment_Type
  //

  Environment_Type::
  Environment_Type (const name_type& name)
  : ::xml_schema::string (),
    name_ (name, ::xml_schema::flags (), this),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Environment_Type::
  Environment_Type (const char* string,
                    const name_type& name)
  : ::xml_schema::string (string),
    name_ (name, ::xml_schema::flags (), this),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Environment_Type::
  Environment_Type (const ::std::string& string,
                    const name_type& name)
  : ::xml_schema::string (string),
    name_ (name, ::xml_schema::flags (), this),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Environment_Type::
  Environment_Type (const ::xml_schema::string& string,
                    const name_type& name)
  : ::xml_schema::string (string),
    name_ (name, ::xml_schema::flags (), this),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Environment_Type::
  Environment_Type (const Environment_Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    name_ (x.name_, f, this),
    filesystemName_ (x.filesystemName_, f, this)
  {
  }

  Environment_Type::
  Environment_Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    filesystemName_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Environment_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name (r);
        continue;
      }

      if (n.name () == "filesystemName" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< filesystemName_type > r (
          filesystemName_traits::create (i, f, this));

        this->filesystemName (r);
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }
  }

  Environment_Type* Environment_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Environment_Type (*this, f, c);
  }

  Environment_Type::
  ~Environment_Type ()
  {
  }

  // Argument_Type
  //

  Argument_Type::
  Argument_Type ()
  : ::xml_schema::normalized_string (),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Argument_Type::
  Argument_Type (const char* normalized_string)
  : ::xml_schema::normalized_string (normalized_string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Argument_Type::
  Argument_Type (const ::std::string& normalized_string)
  : ::xml_schema::normalized_string (normalized_string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Argument_Type::
  Argument_Type (const ::xml_schema::normalized_string& normalized_string)
  : ::xml_schema::normalized_string (normalized_string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  Argument_Type::
  Argument_Type (const Argument_Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::normalized_string (x, f, c),
    filesystemName_ (x.filesystemName_, f, this)
  {
  }

  Argument_Type::
  Argument_Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::normalized_string (e, f | ::xml_schema::flags::base, c),
    filesystemName_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Argument_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "filesystemName" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< filesystemName_type > r (
          filesystemName_traits::create (i, f, this));

        this->filesystemName (r);
        continue;
      }
    }
  }

  Argument_Type* Argument_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Argument_Type (*this, f, c);
  }

  Argument_Type::
  ~Argument_Type ()
  {
  }

  // FileName_Type
  //

  FileName_Type::
  FileName_Type ()
  : ::xml_schema::string (),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  FileName_Type::
  FileName_Type (const char* string)
  : ::xml_schema::string (string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  FileName_Type::
  FileName_Type (const ::std::string& string)
  : ::xml_schema::string (string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  FileName_Type::
  FileName_Type (const ::xml_schema::string& string)
  : ::xml_schema::string (string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  FileName_Type::
  FileName_Type (const FileName_Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    filesystemName_ (x.filesystemName_, f, this)
  {
  }

  FileName_Type::
  FileName_Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    filesystemName_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void FileName_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "filesystemName" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< filesystemName_type > r (
          filesystemName_traits::create (i, f, this));

        this->filesystemName (r);
        continue;
      }
    }
  }

  FileName_Type* FileName_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new FileName_Type (*this, f, c);
  }

  FileName_Type::
  ~FileName_Type ()
  {
  }

  // DirectoryName_Type
  //

  DirectoryName_Type::
  DirectoryName_Type ()
  : ::xml_schema::string (),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  DirectoryName_Type::
  DirectoryName_Type (const char* string)
  : ::xml_schema::string (string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  DirectoryName_Type::
  DirectoryName_Type (const ::std::string& string)
  : ::xml_schema::string (string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  DirectoryName_Type::
  DirectoryName_Type (const ::xml_schema::string& string)
  : ::xml_schema::string (string),
    filesystemName_ (::xml_schema::flags (), this)
  {
  }

  DirectoryName_Type::
  DirectoryName_Type (const DirectoryName_Type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c),
    filesystemName_ (x.filesystemName_, f, this)
  {
  }

  DirectoryName_Type::
  DirectoryName_Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::string (e, f | ::xml_schema::flags::base, c),
    filesystemName_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void DirectoryName_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "filesystemName" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< filesystemName_type > r (
          filesystemName_traits::create (i, f, this));

        this->filesystemName (r);
        continue;
      }
    }
  }

  DirectoryName_Type* DirectoryName_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new DirectoryName_Type (*this, f, c);
  }

  DirectoryName_Type::
  ~DirectoryName_Type ()
  {
  }

  // Limits_Type
  //

  Limits_Type::
  Limits_Type (const ::xml_schema::non_negative_integer& non_negative_integer)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (non_negative_integer)
  {
  }

  Limits_Type::
  Limits_Type (const Limits_Type& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  Limits_Type::
  Limits_Type (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  Limits_Type* Limits_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Limits_Type (*this, f, c);
  }

  Limits_Type::
  ~Limits_Type ()
  {
  }

  // UserName_Type
  //

  UserName_Type::
  UserName_Type ()
  : ::xml_schema::string ()
  {
  }

  UserName_Type::
  UserName_Type (const char* string)
  : ::xml_schema::string (string)
  {
  }

  UserName_Type::
  UserName_Type (const ::std::string& string)
  : ::xml_schema::string (string)
  {
  }

  UserName_Type::
  UserName_Type (const ::xml_schema::string& string)
  : ::xml_schema::string (string)
  {
  }

  UserName_Type::
  UserName_Type (const UserName_Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  UserName_Type::
  UserName_Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  UserName_Type* UserName_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new UserName_Type (*this, f, c);
  }

  UserName_Type::
  ~UserName_Type ()
  {
  }

  // GroupName_Type
  //

  GroupName_Type::
  GroupName_Type ()
  : ::xml_schema::string ()
  {
  }

  GroupName_Type::
  GroupName_Type (const char* string)
  : ::xml_schema::string (string)
  {
  }

  GroupName_Type::
  GroupName_Type (const ::std::string& string)
  : ::xml_schema::string (string)
  {
  }

  GroupName_Type::
  GroupName_Type (const ::xml_schema::string& string)
  : ::xml_schema::string (string)
  {
  }

  GroupName_Type::
  GroupName_Type (const GroupName_Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  GroupName_Type::
  GroupName_Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  GroupName_Type* GroupName_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new GroupName_Type (*this, f, c);
  }

  GroupName_Type::
  ~GroupName_Type ()
  {
  }

  // POSIXApplication_Type
  //

  POSIXApplication_Type::
  POSIXApplication_Type ()
  : ::xml_schema::type (),
    Executable_ (::xml_schema::flags (), this),
    Argument_ (::xml_schema::flags (), this),
    Input_ (::xml_schema::flags (), this),
    Output_ (::xml_schema::flags (), this),
    Error_ (::xml_schema::flags (), this),
    WorkingDirectory_ (::xml_schema::flags (), this),
    Environment_ (::xml_schema::flags (), this),
    WallTimeLimit_ (::xml_schema::flags (), this),
    FileSizeLimit_ (::xml_schema::flags (), this),
    CoreDumpLimit_ (::xml_schema::flags (), this),
    DataSegmentLimit_ (::xml_schema::flags (), this),
    LockedMemoryLimit_ (::xml_schema::flags (), this),
    MemoryLimit_ (::xml_schema::flags (), this),
    OpenDescriptorsLimit_ (::xml_schema::flags (), this),
    PipeSizeLimit_ (::xml_schema::flags (), this),
    StackSizeLimit_ (::xml_schema::flags (), this),
    CPUTimeLimit_ (::xml_schema::flags (), this),
    ProcessCountLimit_ (::xml_schema::flags (), this),
    VirtualMemoryLimit_ (::xml_schema::flags (), this),
    ThreadCountLimit_ (::xml_schema::flags (), this),
    UserName_ (::xml_schema::flags (), this),
    GroupName_ (::xml_schema::flags (), this),
    name_ (::xml_schema::flags (), this)
  {
  }

  POSIXApplication_Type::
  POSIXApplication_Type (const POSIXApplication_Type& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Executable_ (x.Executable_, f, this),
    Argument_ (x.Argument_, f, this),
    Input_ (x.Input_, f, this),
    Output_ (x.Output_, f, this),
    Error_ (x.Error_, f, this),
    WorkingDirectory_ (x.WorkingDirectory_, f, this),
    Environment_ (x.Environment_, f, this),
    WallTimeLimit_ (x.WallTimeLimit_, f, this),
    FileSizeLimit_ (x.FileSizeLimit_, f, this),
    CoreDumpLimit_ (x.CoreDumpLimit_, f, this),
    DataSegmentLimit_ (x.DataSegmentLimit_, f, this),
    LockedMemoryLimit_ (x.LockedMemoryLimit_, f, this),
    MemoryLimit_ (x.MemoryLimit_, f, this),
    OpenDescriptorsLimit_ (x.OpenDescriptorsLimit_, f, this),
    PipeSizeLimit_ (x.PipeSizeLimit_, f, this),
    StackSizeLimit_ (x.StackSizeLimit_, f, this),
    CPUTimeLimit_ (x.CPUTimeLimit_, f, this),
    ProcessCountLimit_ (x.ProcessCountLimit_, f, this),
    VirtualMemoryLimit_ (x.VirtualMemoryLimit_, f, this),
    ThreadCountLimit_ (x.ThreadCountLimit_, f, this),
    UserName_ (x.UserName_, f, this),
    GroupName_ (x.GroupName_, f, this),
    name_ (x.name_, f, this)
  {
  }

  POSIXApplication_Type::
  POSIXApplication_Type (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Executable_ (f, this),
    Argument_ (f, this),
    Input_ (f, this),
    Output_ (f, this),
    Error_ (f, this),
    WorkingDirectory_ (f, this),
    Environment_ (f, this),
    WallTimeLimit_ (f, this),
    FileSizeLimit_ (f, this),
    CoreDumpLimit_ (f, this),
    DataSegmentLimit_ (f, this),
    LockedMemoryLimit_ (f, this),
    MemoryLimit_ (f, this),
    OpenDescriptorsLimit_ (f, this),
    PipeSizeLimit_ (f, this),
    StackSizeLimit_ (f, this),
    CPUTimeLimit_ (f, this),
    ProcessCountLimit_ (f, this),
    VirtualMemoryLimit_ (f, this),
    ThreadCountLimit_ (f, this),
    UserName_ (f, this),
    GroupName_ (f, this),
    name_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void POSIXApplication_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Executable
      //
      if (n.name () == "Executable" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< Executable_type > r (
          Executable_traits::create (i, f, this));

        if (!this->Executable ())
        {
          this->Executable (r);
          continue;
        }
      }

      // Argument
      //
      if (n.name () == "Argument" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< Argument_type > r (
          Argument_traits::create (i, f, this));

        this->Argument ().push_back (r);
        continue;
      }

      // Input
      //
      if (n.name () == "Input" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< Input_type > r (
          Input_traits::create (i, f, this));

        if (!this->Input ())
        {
          this->Input (r);
          continue;
        }
      }

      // Output
      //
      if (n.name () == "Output" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< Output_type > r (
          Output_traits::create (i, f, this));

        if (!this->Output ())
        {
          this->Output (r);
          continue;
        }
      }

      // Error
      //
      if (n.name () == "Error" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< Error_type > r (
          Error_traits::create (i, f, this));

        if (!this->Error ())
        {
          this->Error (r);
          continue;
        }
      }

      // WorkingDirectory
      //
      if (n.name () == "WorkingDirectory" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< WorkingDirectory_type > r (
          WorkingDirectory_traits::create (i, f, this));

        if (!this->WorkingDirectory ())
        {
          this->WorkingDirectory (r);
          continue;
        }
      }

      // Environment
      //
      if (n.name () == "Environment" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< Environment_type > r (
          Environment_traits::create (i, f, this));

        this->Environment ().push_back (r);
        continue;
      }

      // WallTimeLimit
      //
      if (n.name () == "WallTimeLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< WallTimeLimit_type > r (
          WallTimeLimit_traits::create (i, f, this));

        if (!this->WallTimeLimit ())
        {
          this->WallTimeLimit (r);
          continue;
        }
      }

      // FileSizeLimit
      //
      if (n.name () == "FileSizeLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< FileSizeLimit_type > r (
          FileSizeLimit_traits::create (i, f, this));

        if (!this->FileSizeLimit ())
        {
          this->FileSizeLimit (r);
          continue;
        }
      }

      // CoreDumpLimit
      //
      if (n.name () == "CoreDumpLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< CoreDumpLimit_type > r (
          CoreDumpLimit_traits::create (i, f, this));

        if (!this->CoreDumpLimit ())
        {
          this->CoreDumpLimit (r);
          continue;
        }
      }

      // DataSegmentLimit
      //
      if (n.name () == "DataSegmentLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< DataSegmentLimit_type > r (
          DataSegmentLimit_traits::create (i, f, this));

        if (!this->DataSegmentLimit ())
        {
          this->DataSegmentLimit (r);
          continue;
        }
      }

      // LockedMemoryLimit
      //
      if (n.name () == "LockedMemoryLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< LockedMemoryLimit_type > r (
          LockedMemoryLimit_traits::create (i, f, this));

        if (!this->LockedMemoryLimit ())
        {
          this->LockedMemoryLimit (r);
          continue;
        }
      }

      // MemoryLimit
      //
      if (n.name () == "MemoryLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< MemoryLimit_type > r (
          MemoryLimit_traits::create (i, f, this));

        if (!this->MemoryLimit ())
        {
          this->MemoryLimit (r);
          continue;
        }
      }

      // OpenDescriptorsLimit
      //
      if (n.name () == "OpenDescriptorsLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< OpenDescriptorsLimit_type > r (
          OpenDescriptorsLimit_traits::create (i, f, this));

        if (!this->OpenDescriptorsLimit ())
        {
          this->OpenDescriptorsLimit (r);
          continue;
        }
      }

      // PipeSizeLimit
      //
      if (n.name () == "PipeSizeLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< PipeSizeLimit_type > r (
          PipeSizeLimit_traits::create (i, f, this));

        if (!this->PipeSizeLimit ())
        {
          this->PipeSizeLimit (r);
          continue;
        }
      }

      // StackSizeLimit
      //
      if (n.name () == "StackSizeLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< StackSizeLimit_type > r (
          StackSizeLimit_traits::create (i, f, this));

        if (!this->StackSizeLimit ())
        {
          this->StackSizeLimit (r);
          continue;
        }
      }

      // CPUTimeLimit
      //
      if (n.name () == "CPUTimeLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< CPUTimeLimit_type > r (
          CPUTimeLimit_traits::create (i, f, this));

        if (!this->CPUTimeLimit ())
        {
          this->CPUTimeLimit (r);
          continue;
        }
      }

      // ProcessCountLimit
      //
      if (n.name () == "ProcessCountLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< ProcessCountLimit_type > r (
          ProcessCountLimit_traits::create (i, f, this));

        if (!this->ProcessCountLimit ())
        {
          this->ProcessCountLimit (r);
          continue;
        }
      }

      // VirtualMemoryLimit
      //
      if (n.name () == "VirtualMemoryLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< VirtualMemoryLimit_type > r (
          VirtualMemoryLimit_traits::create (i, f, this));

        if (!this->VirtualMemoryLimit ())
        {
          this->VirtualMemoryLimit (r);
          continue;
        }
      }

      // ThreadCountLimit
      //
      if (n.name () == "ThreadCountLimit" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< ThreadCountLimit_type > r (
          ThreadCountLimit_traits::create (i, f, this));

        if (!this->ThreadCountLimit ())
        {
          this->ThreadCountLimit (r);
          continue;
        }
      }

      // UserName
      //
      if (n.name () == "UserName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< UserName_type > r (
          UserName_traits::create (i, f, this));

        if (!this->UserName ())
        {
          this->UserName (r);
          continue;
        }
      }

      // GroupName
      //
      if (n.name () == "GroupName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
      {
        ::std::auto_ptr< GroupName_type > r (
          GroupName_traits::create (i, f, this));

        if (!this->GroupName ())
        {
          this->GroupName (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name (r);
        continue;
      }
    }
  }

  POSIXApplication_Type* POSIXApplication_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new POSIXApplication_Type (*this, f, c);
  }

  POSIXApplication_Type::
  ~POSIXApplication_Type ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace jsdlPosix
{
  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
      ::jsdlPosix::POSIXApplication (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
      ::jsdlPosix::POSIXApplication (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
      ::jsdlPosix::POSIXApplication (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::POSIXApplication (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::POSIXApplication (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::POSIXApplication (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::POSIXApplication (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::POSIXApplication (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::POSIXApplication (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
      ::jsdlPosix::POSIXApplication (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
      ::jsdlPosix::POSIXApplication (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
      ::jsdlPosix::POSIXApplication (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
        ::jsdlPosix::POSIXApplication (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "POSIXApplication" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::POSIXApplication_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "POSIXApplication",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type >
  POSIXApplication (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "POSIXApplication" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::POSIXApplication_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::POSIXApplication_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "POSIXApplication",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Executable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Executable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Executable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Executable (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Executable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Executable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Executable (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Executable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Executable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Executable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Executable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Executable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::jsdlPosix::Executable (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Executable" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Executable",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Executable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Executable" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Executable",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
      ::jsdlPosix::Argument (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
      ::jsdlPosix::Argument (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
      ::jsdlPosix::Argument (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Argument (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Argument (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Argument (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Argument (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Argument (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Argument (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
      ::jsdlPosix::Argument (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
      ::jsdlPosix::Argument (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
      ::jsdlPosix::Argument (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
        ::jsdlPosix::Argument (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Argument" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Argument_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Argument",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Argument_Type >
  Argument (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Argument" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Argument_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Argument_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Argument",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Input (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Input (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Input (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Input (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Input (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Input (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Input (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Input (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Input (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Input (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Input (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Input (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::jsdlPosix::Input (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Input" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Input",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Input (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Input" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Input",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Output (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Output (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Output (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Output (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Output (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Output (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Output (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Output (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Output (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Output (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Output (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Output (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::jsdlPosix::Output (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Output" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Output",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Output (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Output" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Output",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::std::string& u,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Error (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::std::string& u,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Error (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::std::string& u,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Error (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Error (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Error (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Error (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Error (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         const ::std::string& sid,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Error (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::std::istream& is,
         const ::std::string& sid,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Error (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xercesc::InputSource& i,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Error (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xercesc::InputSource& i,
         ::xml_schema::error_handler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Error (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xercesc::InputSource& i,
         ::xercesc::DOMErrorHandler& h,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
      ::jsdlPosix::Error (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (const ::xercesc::DOMDocument& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::jsdlPosix::Error (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Error" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Error",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::FileName_Type >
  Error (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
         ::xml_schema::flags f,
         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Error" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::FileName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::FileName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Error",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
      ::jsdlPosix::WorkingDirectory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
      ::jsdlPosix::WorkingDirectory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
      ::jsdlPosix::WorkingDirectory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::WorkingDirectory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::WorkingDirectory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::WorkingDirectory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::WorkingDirectory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::WorkingDirectory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::WorkingDirectory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
      ::jsdlPosix::WorkingDirectory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
      ::jsdlPosix::WorkingDirectory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
      ::jsdlPosix::WorkingDirectory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
        ::jsdlPosix::WorkingDirectory (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WorkingDirectory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::DirectoryName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WorkingDirectory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type >
  WorkingDirectory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "WorkingDirectory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::DirectoryName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::DirectoryName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WorkingDirectory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
      ::jsdlPosix::Environment (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
      ::jsdlPosix::Environment (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
      ::jsdlPosix::Environment (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Environment (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Environment (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::Environment (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Environment (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Environment (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::Environment (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
      ::jsdlPosix::Environment (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
      ::jsdlPosix::Environment (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
      ::jsdlPosix::Environment (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
        ::jsdlPosix::Environment (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Environment" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Environment_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Environment",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Environment_Type >
  Environment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Environment" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Environment_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Environment_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Environment",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::WallTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::WallTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::WallTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::WallTimeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::WallTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::WallTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::WallTimeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::WallTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::WallTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::WallTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::WallTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::WallTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::WallTimeLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WallTimeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WallTimeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  WallTimeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "WallTimeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "WallTimeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::FileSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::FileSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::FileSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::FileSizeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::FileSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::FileSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::FileSizeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::FileSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::FileSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::FileSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::FileSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::FileSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::FileSizeLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileSizeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  FileSizeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "FileSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileSizeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CoreDumpLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CoreDumpLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CoreDumpLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::CoreDumpLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::CoreDumpLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::CoreDumpLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::CoreDumpLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::CoreDumpLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::CoreDumpLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CoreDumpLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CoreDumpLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CoreDumpLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::CoreDumpLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CoreDumpLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CoreDumpLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CoreDumpLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CoreDumpLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CoreDumpLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::DataSegmentLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::DataSegmentLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::DataSegmentLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::DataSegmentLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::DataSegmentLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::DataSegmentLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::DataSegmentLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::DataSegmentLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::DataSegmentLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::DataSegmentLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::DataSegmentLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::DataSegmentLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::DataSegmentLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DataSegmentLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataSegmentLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  DataSegmentLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DataSegmentLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataSegmentLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::LockedMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::LockedMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::LockedMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::LockedMemoryLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::LockedMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::LockedMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::LockedMemoryLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::LockedMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::LockedMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::LockedMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::LockedMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::LockedMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::LockedMemoryLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LockedMemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LockedMemoryLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  LockedMemoryLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "LockedMemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "LockedMemoryLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::MemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::MemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::MemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::MemoryLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::MemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::MemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::MemoryLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::MemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::MemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::MemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::MemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::MemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::MemoryLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MemoryLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  MemoryLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MemoryLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::OpenDescriptorsLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::OpenDescriptorsLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::OpenDescriptorsLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::OpenDescriptorsLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::OpenDescriptorsLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::OpenDescriptorsLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::OpenDescriptorsLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::OpenDescriptorsLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::OpenDescriptorsLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::OpenDescriptorsLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::OpenDescriptorsLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::OpenDescriptorsLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::OpenDescriptorsLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OpenDescriptorsLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OpenDescriptorsLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  OpenDescriptorsLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OpenDescriptorsLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OpenDescriptorsLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::PipeSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::PipeSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::PipeSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::PipeSizeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::PipeSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::PipeSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::PipeSizeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::PipeSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::PipeSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::PipeSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::PipeSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::PipeSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::PipeSizeLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PipeSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PipeSizeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  PipeSizeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PipeSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PipeSizeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::StackSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::StackSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::StackSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::StackSizeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::StackSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::StackSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::StackSizeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::StackSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::StackSizeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::StackSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::StackSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::StackSizeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::StackSizeLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "StackSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StackSizeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  StackSizeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "StackSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "StackSizeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CPUTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CPUTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CPUTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::CPUTimeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::CPUTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::CPUTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::CPUTimeLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::CPUTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::CPUTimeLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CPUTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CPUTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::CPUTimeLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::CPUTimeLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CPUTimeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CPUTimeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  CPUTimeLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CPUTimeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CPUTimeLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ProcessCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ProcessCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ProcessCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::ProcessCountLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::ProcessCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::ProcessCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::ProcessCountLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::ProcessCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::ProcessCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ProcessCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ProcessCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ProcessCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::ProcessCountLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ProcessCountLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ProcessCountLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ProcessCountLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ProcessCountLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ProcessCountLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::VirtualMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::VirtualMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::VirtualMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::VirtualMemoryLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::VirtualMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::VirtualMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::VirtualMemoryLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::VirtualMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::VirtualMemoryLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::VirtualMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::VirtualMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::VirtualMemoryLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::VirtualMemoryLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "VirtualMemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "VirtualMemoryLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  VirtualMemoryLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "VirtualMemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "VirtualMemoryLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ThreadCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ThreadCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ThreadCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::ThreadCountLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::ThreadCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::ThreadCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::ThreadCountLimit (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::ThreadCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::ThreadCountLimit (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ThreadCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ThreadCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
      ::jsdlPosix::ThreadCountLimit (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::jsdlPosix::ThreadCountLimit (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ThreadCountLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ThreadCountLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::Limits_Type >
  ThreadCountLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ThreadCountLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::Limits_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::Limits_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ThreadCountLimit",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
      ::jsdlPosix::UserName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
      ::jsdlPosix::UserName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
      ::jsdlPosix::UserName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::UserName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::UserName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::UserName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::UserName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::UserName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::UserName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
      ::jsdlPosix::UserName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
      ::jsdlPosix::UserName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
      ::jsdlPosix::UserName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
        ::jsdlPosix::UserName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "UserName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::UserName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "UserName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::UserName_Type >
  UserName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "UserName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::UserName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::UserName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "UserName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
      ::jsdlPosix::GroupName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
      ::jsdlPosix::GroupName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
      ::jsdlPosix::GroupName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::GroupName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::GroupName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdlPosix::GroupName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::GroupName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::GroupName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdlPosix::GroupName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
      ::jsdlPosix::GroupName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
      ::jsdlPosix::GroupName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
      ::jsdlPosix::GroupName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
        ::jsdlPosix::GroupName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GroupName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::GroupName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GroupName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }

  ::std::auto_ptr< ::jsdlPosix::GroupName_Type >
  GroupName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "GroupName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      ::std::auto_ptr< ::jsdlPosix::GroupName_Type > r (
        ::xsd::cxx::tree::traits< ::jsdlPosix::GroupName_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "GroupName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace jsdlPosix
{
  void
  operator<< (::xercesc::DOMElement& e, const Environment_Type& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.name ();
    }

    // filesystemName
    //
    if (i.filesystemName ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filesystemName",
          e));

      a << *i.filesystemName ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Argument_Type& i)
  {
    e << static_cast< const ::xml_schema::normalized_string& > (i);

    // filesystemName
    //
    if (i.filesystemName ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filesystemName",
          e));

      a << *i.filesystemName ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const FileName_Type& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);

    // filesystemName
    //
    if (i.filesystemName ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filesystemName",
          e));

      a << *i.filesystemName ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DirectoryName_Type& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);

    // filesystemName
    //
    if (i.filesystemName ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "filesystemName",
          e));

      a << *i.filesystemName ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Limits_Type& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::non_negative_integer, char, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const UserName_Type& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const GroupName_Type& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const POSIXApplication_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Executable
    //
    if (i.Executable ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Executable",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.Executable ();
    }

    // Argument
    //
    for (POSIXApplication_Type::Argument_const_iterator
         b (i.Argument ().begin ()), n (i.Argument ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Argument",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *b;
    }

    // Input
    //
    if (i.Input ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Input",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.Input ();
    }

    // Output
    //
    if (i.Output ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Output",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.Output ();
    }

    // Error
    //
    if (i.Error ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Error",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.Error ();
    }

    // WorkingDirectory
    //
    if (i.WorkingDirectory ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "WorkingDirectory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.WorkingDirectory ();
    }

    // Environment
    //
    for (POSIXApplication_Type::Environment_const_iterator
         b (i.Environment ().begin ()), n (i.Environment ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Environment",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *b;
    }

    // WallTimeLimit
    //
    if (i.WallTimeLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "WallTimeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.WallTimeLimit ();
    }

    // FileSizeLimit
    //
    if (i.FileSizeLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FileSizeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.FileSizeLimit ();
    }

    // CoreDumpLimit
    //
    if (i.CoreDumpLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CoreDumpLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.CoreDumpLimit ();
    }

    // DataSegmentLimit
    //
    if (i.DataSegmentLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DataSegmentLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.DataSegmentLimit ();
    }

    // LockedMemoryLimit
    //
    if (i.LockedMemoryLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "LockedMemoryLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.LockedMemoryLimit ();
    }

    // MemoryLimit
    //
    if (i.MemoryLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MemoryLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.MemoryLimit ();
    }

    // OpenDescriptorsLimit
    //
    if (i.OpenDescriptorsLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OpenDescriptorsLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.OpenDescriptorsLimit ();
    }

    // PipeSizeLimit
    //
    if (i.PipeSizeLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PipeSizeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.PipeSizeLimit ();
    }

    // StackSizeLimit
    //
    if (i.StackSizeLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "StackSizeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.StackSizeLimit ();
    }

    // CPUTimeLimit
    //
    if (i.CPUTimeLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CPUTimeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.CPUTimeLimit ();
    }

    // ProcessCountLimit
    //
    if (i.ProcessCountLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ProcessCountLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.ProcessCountLimit ();
    }

    // VirtualMemoryLimit
    //
    if (i.VirtualMemoryLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "VirtualMemoryLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.VirtualMemoryLimit ();
    }

    // ThreadCountLimit
    //
    if (i.ThreadCountLimit ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ThreadCountLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.ThreadCountLimit ();
    }

    // UserName
    //
    if (i.UserName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UserName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.UserName ();
    }

    // GroupName
    //
    if (i.GroupName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "GroupName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          e));

      s << *i.GroupName ();
    }

    // name
    //
    if (i.name ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << *i.name ();
    }
  }

  void
  POSIXApplication (::std::ostream& o,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::POSIXApplication (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  POSIXApplication (::std::ostream& o,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::POSIXApplication (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  POSIXApplication (::std::ostream& o,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::POSIXApplication (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  POSIXApplication (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::POSIXApplication (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  POSIXApplication (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::POSIXApplication (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  POSIXApplication (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::POSIXApplication (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  POSIXApplication (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::POSIXApplication_Type& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "POSIXApplication" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "POSIXApplication",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  POSIXApplication (const ::jsdlPosix::POSIXApplication_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "POSIXApplication",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::POSIXApplication (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Executable (::std::ostream& o,
              const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Executable (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Executable (::std::ostream& o,
              const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Executable (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Executable (::std::ostream& o,
              const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Executable (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Executable (::xercesc::XMLFormatTarget& t,
              const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Executable (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Executable (::xercesc::XMLFormatTarget& t,
              const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Executable (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Executable (::xercesc::XMLFormatTarget& t,
              const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Executable (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Executable (::xercesc::DOMDocument& d,
              const ::jsdlPosix::FileName_Type& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Executable" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Executable",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Executable (const ::jsdlPosix::FileName_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Executable",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::Executable (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Argument (::std::ostream& o,
            const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Argument (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Argument (::std::ostream& o,
            const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Argument (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Argument (::std::ostream& o,
            const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Argument (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Argument (::xercesc::XMLFormatTarget& t,
            const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Argument (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Argument (::xercesc::XMLFormatTarget& t,
            const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Argument (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Argument (::xercesc::XMLFormatTarget& t,
            const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Argument (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Argument (::xercesc::DOMDocument& d,
            const ::jsdlPosix::Argument_Type& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Argument" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Argument",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Argument (const ::jsdlPosix::Argument_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Argument",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::Argument (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Input (::std::ostream& o,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Input (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Input (::std::ostream& o,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Input (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Input (::std::ostream& o,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Input (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Input (::xercesc::XMLFormatTarget& t,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Input (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Input (::xercesc::XMLFormatTarget& t,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Input (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Input (::xercesc::XMLFormatTarget& t,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Input (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Input (::xercesc::DOMDocument& d,
         const ::jsdlPosix::FileName_Type& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Input" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Input",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Input (const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Input",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::Input (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Output (::std::ostream& o,
          const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Output (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Output (::std::ostream& o,
          const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Output (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Output (::std::ostream& o,
          const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Output (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Output (::xercesc::XMLFormatTarget& t,
          const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Output (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Output (::xercesc::XMLFormatTarget& t,
          const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Output (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Output (::xercesc::XMLFormatTarget& t,
          const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Output (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Output (::xercesc::DOMDocument& d,
          const ::jsdlPosix::FileName_Type& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Output" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Output",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Output (const ::jsdlPosix::FileName_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Output",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::Output (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Error (::std::ostream& o,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Error (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Error (::std::ostream& o,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Error (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Error (::std::ostream& o,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Error (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Error (::xercesc::XMLFormatTarget& t,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Error (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Error (::xercesc::XMLFormatTarget& t,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::error_handler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Error (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Error (::xercesc::XMLFormatTarget& t,
         const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xercesc::DOMErrorHandler& h,
         const ::std::string& e,
         ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Error (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Error (::xercesc::DOMDocument& d,
         const ::jsdlPosix::FileName_Type& s,
         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Error" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Error",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Error (const ::jsdlPosix::FileName_Type& s,
         const ::xml_schema::namespace_infomap& m,
         ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Error",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::Error (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  WorkingDirectory (::std::ostream& o,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WorkingDirectory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  WorkingDirectory (::std::ostream& o,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WorkingDirectory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WorkingDirectory (::std::ostream& o,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WorkingDirectory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WorkingDirectory (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WorkingDirectory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  WorkingDirectory (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WorkingDirectory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WorkingDirectory (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WorkingDirectory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WorkingDirectory (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::DirectoryName_Type& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WorkingDirectory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WorkingDirectory",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  WorkingDirectory (const ::jsdlPosix::DirectoryName_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "WorkingDirectory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::WorkingDirectory (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Environment (::std::ostream& o,
               const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Environment (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Environment (::std::ostream& o,
               const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Environment (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Environment (::std::ostream& o,
               const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Environment (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Environment (::xercesc::XMLFormatTarget& t,
               const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Environment (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Environment (::xercesc::XMLFormatTarget& t,
               const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Environment (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Environment (::xercesc::XMLFormatTarget& t,
               const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::Environment (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Environment (::xercesc::DOMDocument& d,
               const ::jsdlPosix::Environment_Type& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Environment" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Environment",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Environment (const ::jsdlPosix::Environment_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Environment",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::Environment (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  WallTimeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WallTimeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  WallTimeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WallTimeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WallTimeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WallTimeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WallTimeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WallTimeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  WallTimeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WallTimeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WallTimeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::WallTimeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  WallTimeLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "WallTimeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "WallTimeLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  WallTimeLimit (const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "WallTimeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::WallTimeLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  FileSizeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::FileSizeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileSizeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::FileSizeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSizeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::FileSizeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSizeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::FileSizeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileSizeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::FileSizeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSizeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::FileSizeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSizeLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FileSizeLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileSizeLimit (const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "FileSizeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::FileSizeLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  CoreDumpLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CoreDumpLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CoreDumpLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CoreDumpLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CoreDumpLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CoreDumpLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CoreDumpLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CoreDumpLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CoreDumpLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CoreDumpLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CoreDumpLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CoreDumpLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CoreDumpLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CoreDumpLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CoreDumpLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CoreDumpLimit (const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CoreDumpLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::CoreDumpLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  DataSegmentLimit (::std::ostream& o,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::DataSegmentLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DataSegmentLimit (::std::ostream& o,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::DataSegmentLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataSegmentLimit (::std::ostream& o,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::DataSegmentLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataSegmentLimit (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::DataSegmentLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DataSegmentLimit (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::DataSegmentLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataSegmentLimit (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::DataSegmentLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataSegmentLimit (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::Limits_Type& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DataSegmentLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DataSegmentLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DataSegmentLimit (const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DataSegmentLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::DataSegmentLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  LockedMemoryLimit (::std::ostream& o,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::LockedMemoryLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  LockedMemoryLimit (::std::ostream& o,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::LockedMemoryLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  LockedMemoryLimit (::std::ostream& o,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::LockedMemoryLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  LockedMemoryLimit (::xercesc::XMLFormatTarget& t,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::LockedMemoryLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  LockedMemoryLimit (::xercesc::XMLFormatTarget& t,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::LockedMemoryLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  LockedMemoryLimit (::xercesc::XMLFormatTarget& t,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::LockedMemoryLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  LockedMemoryLimit (::xercesc::DOMDocument& d,
                     const ::jsdlPosix::Limits_Type& s,
                     ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "LockedMemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "LockedMemoryLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  LockedMemoryLimit (const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "LockedMemoryLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::LockedMemoryLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  MemoryLimit (::std::ostream& o,
               const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::MemoryLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MemoryLimit (::std::ostream& o,
               const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::MemoryLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MemoryLimit (::std::ostream& o,
               const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::MemoryLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MemoryLimit (::xercesc::XMLFormatTarget& t,
               const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::MemoryLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MemoryLimit (::xercesc::XMLFormatTarget& t,
               const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::MemoryLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MemoryLimit (::xercesc::XMLFormatTarget& t,
               const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::MemoryLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MemoryLimit (::xercesc::DOMDocument& d,
               const ::jsdlPosix::Limits_Type& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MemoryLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  MemoryLimit (const ::jsdlPosix::Limits_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "MemoryLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::MemoryLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  OpenDescriptorsLimit (::std::ostream& o,
                        const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::OpenDescriptorsLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OpenDescriptorsLimit (::std::ostream& o,
                        const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::error_handler& h,
                        const ::std::string& e,
                        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::OpenDescriptorsLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OpenDescriptorsLimit (::std::ostream& o,
                        const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::string& e,
                        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::OpenDescriptorsLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OpenDescriptorsLimit (::xercesc::XMLFormatTarget& t,
                        const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::OpenDescriptorsLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OpenDescriptorsLimit (::xercesc::XMLFormatTarget& t,
                        const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::error_handler& h,
                        const ::std::string& e,
                        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::OpenDescriptorsLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OpenDescriptorsLimit (::xercesc::XMLFormatTarget& t,
                        const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xercesc::DOMErrorHandler& h,
                        const ::std::string& e,
                        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::OpenDescriptorsLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OpenDescriptorsLimit (::xercesc::DOMDocument& d,
                        const ::jsdlPosix::Limits_Type& s,
                        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OpenDescriptorsLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OpenDescriptorsLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OpenDescriptorsLimit (const ::jsdlPosix::Limits_Type& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "OpenDescriptorsLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::OpenDescriptorsLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  PipeSizeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::PipeSizeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PipeSizeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::PipeSizeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PipeSizeLimit (::std::ostream& o,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::PipeSizeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PipeSizeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::PipeSizeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PipeSizeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::PipeSizeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PipeSizeLimit (::xercesc::XMLFormatTarget& t,
                 const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::PipeSizeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PipeSizeLimit (::xercesc::DOMDocument& d,
                 const ::jsdlPosix::Limits_Type& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PipeSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PipeSizeLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  PipeSizeLimit (const ::jsdlPosix::Limits_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "PipeSizeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::PipeSizeLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  StackSizeLimit (::std::ostream& o,
                  const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::StackSizeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  StackSizeLimit (::std::ostream& o,
                  const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::StackSizeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  StackSizeLimit (::std::ostream& o,
                  const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::StackSizeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  StackSizeLimit (::xercesc::XMLFormatTarget& t,
                  const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::StackSizeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  StackSizeLimit (::xercesc::XMLFormatTarget& t,
                  const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::StackSizeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  StackSizeLimit (::xercesc::XMLFormatTarget& t,
                  const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::StackSizeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  StackSizeLimit (::xercesc::DOMDocument& d,
                  const ::jsdlPosix::Limits_Type& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "StackSizeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "StackSizeLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  StackSizeLimit (const ::jsdlPosix::Limits_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "StackSizeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::StackSizeLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  CPUTimeLimit (::std::ostream& o,
                const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CPUTimeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CPUTimeLimit (::std::ostream& o,
                const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CPUTimeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUTimeLimit (::std::ostream& o,
                const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CPUTimeLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUTimeLimit (::xercesc::XMLFormatTarget& t,
                const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CPUTimeLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CPUTimeLimit (::xercesc::XMLFormatTarget& t,
                const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CPUTimeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUTimeLimit (::xercesc::XMLFormatTarget& t,
                const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::CPUTimeLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUTimeLimit (::xercesc::DOMDocument& d,
                const ::jsdlPosix::Limits_Type& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CPUTimeLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CPUTimeLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CPUTimeLimit (const ::jsdlPosix::Limits_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CPUTimeLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::CPUTimeLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  ProcessCountLimit (::std::ostream& o,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ProcessCountLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ProcessCountLimit (::std::ostream& o,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ProcessCountLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ProcessCountLimit (::std::ostream& o,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ProcessCountLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ProcessCountLimit (::xercesc::XMLFormatTarget& t,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ProcessCountLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ProcessCountLimit (::xercesc::XMLFormatTarget& t,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ProcessCountLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ProcessCountLimit (::xercesc::XMLFormatTarget& t,
                     const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ProcessCountLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ProcessCountLimit (::xercesc::DOMDocument& d,
                     const ::jsdlPosix::Limits_Type& s,
                     ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ProcessCountLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ProcessCountLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ProcessCountLimit (const ::jsdlPosix::Limits_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ProcessCountLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::ProcessCountLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  VirtualMemoryLimit (::std::ostream& o,
                      const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::VirtualMemoryLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  VirtualMemoryLimit (::std::ostream& o,
                      const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::VirtualMemoryLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  VirtualMemoryLimit (::std::ostream& o,
                      const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::VirtualMemoryLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  VirtualMemoryLimit (::xercesc::XMLFormatTarget& t,
                      const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::VirtualMemoryLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  VirtualMemoryLimit (::xercesc::XMLFormatTarget& t,
                      const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::VirtualMemoryLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  VirtualMemoryLimit (::xercesc::XMLFormatTarget& t,
                      const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::VirtualMemoryLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  VirtualMemoryLimit (::xercesc::DOMDocument& d,
                      const ::jsdlPosix::Limits_Type& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "VirtualMemoryLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "VirtualMemoryLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  VirtualMemoryLimit (const ::jsdlPosix::Limits_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "VirtualMemoryLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::VirtualMemoryLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  ThreadCountLimit (::std::ostream& o,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ThreadCountLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ThreadCountLimit (::std::ostream& o,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ThreadCountLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ThreadCountLimit (::std::ostream& o,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ThreadCountLimit (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ThreadCountLimit (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ThreadCountLimit (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ThreadCountLimit (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::error_handler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ThreadCountLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ThreadCountLimit (::xercesc::XMLFormatTarget& t,
                    const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xercesc::DOMErrorHandler& h,
                    const ::std::string& e,
                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::ThreadCountLimit (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ThreadCountLimit (::xercesc::DOMDocument& d,
                    const ::jsdlPosix::Limits_Type& s,
                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ThreadCountLimit" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ThreadCountLimit",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ThreadCountLimit (const ::jsdlPosix::Limits_Type& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ThreadCountLimit",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::ThreadCountLimit (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  UserName (::std::ostream& o,
            const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::UserName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  UserName (::std::ostream& o,
            const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::UserName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  UserName (::std::ostream& o,
            const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::UserName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  UserName (::xercesc::XMLFormatTarget& t,
            const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::UserName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  UserName (::xercesc::XMLFormatTarget& t,
            const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::UserName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  UserName (::xercesc::XMLFormatTarget& t,
            const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::UserName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  UserName (::xercesc::DOMDocument& d,
            const ::jsdlPosix::UserName_Type& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "UserName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "UserName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  UserName (const ::jsdlPosix::UserName_Type& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "UserName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::UserName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  GroupName (::std::ostream& o,
             const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::GroupName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GroupName (::std::ostream& o,
             const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::GroupName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GroupName (::std::ostream& o,
             const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::GroupName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GroupName (::xercesc::XMLFormatTarget& t,
             const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::GroupName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  GroupName (::xercesc::XMLFormatTarget& t,
             const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::GroupName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GroupName (::xercesc::XMLFormatTarget& t,
             const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdlPosix::GroupName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  GroupName (::xercesc::DOMDocument& d,
             const ::jsdlPosix::GroupName_Type& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "GroupName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "GroupName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  GroupName (const ::jsdlPosix::GroupName_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "GroupName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix",
          m, f));

      ::jsdlPosix::GroupName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

