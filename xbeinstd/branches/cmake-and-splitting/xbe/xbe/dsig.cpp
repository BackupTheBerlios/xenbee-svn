// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "dsig.hpp"

namespace dsig
{
  // CryptoBinary
  // 


  // SignatureType
  // 

  const SignatureType::SignedInfo_type& SignatureType::
  SignedInfo () const
  {
    return this->SignedInfo_.get ();
  }

  SignatureType::SignedInfo_type& SignatureType::
  SignedInfo ()
  {
    return this->SignedInfo_.get ();
  }

  void SignatureType::
  SignedInfo (const SignedInfo_type& x)
  {
    this->SignedInfo_.set (x);
  }

  void SignatureType::
  SignedInfo (::std::auto_ptr< SignedInfo_type > x)
  {
    this->SignedInfo_.set (x);
  }

  const SignatureType::SignatureValue_type& SignatureType::
  SignatureValue () const
  {
    return this->SignatureValue_.get ();
  }

  SignatureType::SignatureValue_type& SignatureType::
  SignatureValue ()
  {
    return this->SignatureValue_.get ();
  }

  void SignatureType::
  SignatureValue (const SignatureValue_type& x)
  {
    this->SignatureValue_.set (x);
  }

  void SignatureType::
  SignatureValue (::std::auto_ptr< SignatureValue_type > x)
  {
    this->SignatureValue_.set (x);
  }

  const SignatureType::KeyInfo_optional& SignatureType::
  KeyInfo () const
  {
    return this->KeyInfo_;
  }

  SignatureType::KeyInfo_optional& SignatureType::
  KeyInfo ()
  {
    return this->KeyInfo_;
  }

  void SignatureType::
  KeyInfo (const KeyInfo_type& x)
  {
    this->KeyInfo_.set (x);
  }

  void SignatureType::
  KeyInfo (const KeyInfo_optional& x)
  {
    this->KeyInfo_ = x;
  }

  void SignatureType::
  KeyInfo (::std::auto_ptr< KeyInfo_type > x)
  {
    this->KeyInfo_.set (x);
  }

  const SignatureType::Object_sequence& SignatureType::
  Object () const
  {
    return this->Object_;
  }

  SignatureType::Object_sequence& SignatureType::
  Object ()
  {
    return this->Object_;
  }

  void SignatureType::
  Object (const Object_sequence& s)
  {
    this->Object_ = s;
  }

  const SignatureType::Id_optional& SignatureType::
  Id () const
  {
    return this->Id_;
  }

  SignatureType::Id_optional& SignatureType::
  Id ()
  {
    return this->Id_;
  }

  void SignatureType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void SignatureType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void SignatureType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // SignatureValueType
  // 

  const SignatureValueType::Id_optional& SignatureValueType::
  Id () const
  {
    return this->Id_;
  }

  SignatureValueType::Id_optional& SignatureValueType::
  Id ()
  {
    return this->Id_;
  }

  void SignatureValueType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void SignatureValueType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void SignatureValueType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // SignedInfoType
  // 

  const SignedInfoType::CanonicalizationMethod_type& SignedInfoType::
  CanonicalizationMethod () const
  {
    return this->CanonicalizationMethod_.get ();
  }

  SignedInfoType::CanonicalizationMethod_type& SignedInfoType::
  CanonicalizationMethod ()
  {
    return this->CanonicalizationMethod_.get ();
  }

  void SignedInfoType::
  CanonicalizationMethod (const CanonicalizationMethod_type& x)
  {
    this->CanonicalizationMethod_.set (x);
  }

  void SignedInfoType::
  CanonicalizationMethod (::std::auto_ptr< CanonicalizationMethod_type > x)
  {
    this->CanonicalizationMethod_.set (x);
  }

  const SignedInfoType::SignatureMethod_type& SignedInfoType::
  SignatureMethod () const
  {
    return this->SignatureMethod_.get ();
  }

  SignedInfoType::SignatureMethod_type& SignedInfoType::
  SignatureMethod ()
  {
    return this->SignatureMethod_.get ();
  }

  void SignedInfoType::
  SignatureMethod (const SignatureMethod_type& x)
  {
    this->SignatureMethod_.set (x);
  }

  void SignedInfoType::
  SignatureMethod (::std::auto_ptr< SignatureMethod_type > x)
  {
    this->SignatureMethod_.set (x);
  }

  const SignedInfoType::Reference_sequence& SignedInfoType::
  Reference () const
  {
    return this->Reference_;
  }

  SignedInfoType::Reference_sequence& SignedInfoType::
  Reference ()
  {
    return this->Reference_;
  }

  void SignedInfoType::
  Reference (const Reference_sequence& s)
  {
    this->Reference_ = s;
  }

  const SignedInfoType::Id_optional& SignedInfoType::
  Id () const
  {
    return this->Id_;
  }

  SignedInfoType::Id_optional& SignedInfoType::
  Id ()
  {
    return this->Id_;
  }

  void SignedInfoType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void SignedInfoType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void SignedInfoType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // CanonicalizationMethodType
  // 

  const CanonicalizationMethodType::Algorithm_type& CanonicalizationMethodType::
  Algorithm () const
  {
    return this->Algorithm_.get ();
  }

  CanonicalizationMethodType::Algorithm_type& CanonicalizationMethodType::
  Algorithm ()
  {
    return this->Algorithm_.get ();
  }

  void CanonicalizationMethodType::
  Algorithm (const Algorithm_type& x)
  {
    this->Algorithm_.set (x);
  }

  void CanonicalizationMethodType::
  Algorithm (::std::auto_ptr< Algorithm_type > x)
  {
    this->Algorithm_.set (x);
  }


  // SignatureMethodType
  // 

  const SignatureMethodType::HMACOutputLength_optional& SignatureMethodType::
  HMACOutputLength () const
  {
    return this->HMACOutputLength_;
  }

  SignatureMethodType::HMACOutputLength_optional& SignatureMethodType::
  HMACOutputLength ()
  {
    return this->HMACOutputLength_;
  }

  void SignatureMethodType::
  HMACOutputLength (const HMACOutputLength_type& x)
  {
    this->HMACOutputLength_.set (x);
  }

  void SignatureMethodType::
  HMACOutputLength (const HMACOutputLength_optional& x)
  {
    this->HMACOutputLength_ = x;
  }

  void SignatureMethodType::
  HMACOutputLength (::std::auto_ptr< HMACOutputLength_type > x)
  {
    this->HMACOutputLength_.set (x);
  }

  const SignatureMethodType::Algorithm_type& SignatureMethodType::
  Algorithm () const
  {
    return this->Algorithm_.get ();
  }

  SignatureMethodType::Algorithm_type& SignatureMethodType::
  Algorithm ()
  {
    return this->Algorithm_.get ();
  }

  void SignatureMethodType::
  Algorithm (const Algorithm_type& x)
  {
    this->Algorithm_.set (x);
  }

  void SignatureMethodType::
  Algorithm (::std::auto_ptr< Algorithm_type > x)
  {
    this->Algorithm_.set (x);
  }


  // ReferenceType
  // 

  const ReferenceType::Transforms_optional& ReferenceType::
  Transforms () const
  {
    return this->Transforms_;
  }

  ReferenceType::Transforms_optional& ReferenceType::
  Transforms ()
  {
    return this->Transforms_;
  }

  void ReferenceType::
  Transforms (const Transforms_type& x)
  {
    this->Transforms_.set (x);
  }

  void ReferenceType::
  Transforms (const Transforms_optional& x)
  {
    this->Transforms_ = x;
  }

  void ReferenceType::
  Transforms (::std::auto_ptr< Transforms_type > x)
  {
    this->Transforms_.set (x);
  }

  const ReferenceType::DigestMethod_type& ReferenceType::
  DigestMethod () const
  {
    return this->DigestMethod_.get ();
  }

  ReferenceType::DigestMethod_type& ReferenceType::
  DigestMethod ()
  {
    return this->DigestMethod_.get ();
  }

  void ReferenceType::
  DigestMethod (const DigestMethod_type& x)
  {
    this->DigestMethod_.set (x);
  }

  void ReferenceType::
  DigestMethod (::std::auto_ptr< DigestMethod_type > x)
  {
    this->DigestMethod_.set (x);
  }

  const ReferenceType::DigestValue_type& ReferenceType::
  DigestValue () const
  {
    return this->DigestValue_.get ();
  }

  ReferenceType::DigestValue_type& ReferenceType::
  DigestValue ()
  {
    return this->DigestValue_.get ();
  }

  void ReferenceType::
  DigestValue (const DigestValue_type& x)
  {
    this->DigestValue_.set (x);
  }

  void ReferenceType::
  DigestValue (::std::auto_ptr< DigestValue_type > x)
  {
    this->DigestValue_.set (x);
  }

  const ReferenceType::Id_optional& ReferenceType::
  Id () const
  {
    return this->Id_;
  }

  ReferenceType::Id_optional& ReferenceType::
  Id ()
  {
    return this->Id_;
  }

  void ReferenceType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void ReferenceType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void ReferenceType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }

  const ReferenceType::URI_optional& ReferenceType::
  URI () const
  {
    return this->URI_;
  }

  ReferenceType::URI_optional& ReferenceType::
  URI ()
  {
    return this->URI_;
  }

  void ReferenceType::
  URI (const URI_type& x)
  {
    this->URI_.set (x);
  }

  void ReferenceType::
  URI (const URI_optional& x)
  {
    this->URI_ = x;
  }

  void ReferenceType::
  URI (::std::auto_ptr< URI_type > x)
  {
    this->URI_.set (x);
  }

  const ReferenceType::Type_optional& ReferenceType::
  Type () const
  {
    return this->Type_;
  }

  ReferenceType::Type_optional& ReferenceType::
  Type ()
  {
    return this->Type_;
  }

  void ReferenceType::
  Type (const Type_type& x)
  {
    this->Type_.set (x);
  }

  void ReferenceType::
  Type (const Type_optional& x)
  {
    this->Type_ = x;
  }

  void ReferenceType::
  Type (::std::auto_ptr< Type_type > x)
  {
    this->Type_.set (x);
  }


  // TransformsType
  // 

  const TransformsType::Transform_sequence& TransformsType::
  Transform () const
  {
    return this->Transform_;
  }

  TransformsType::Transform_sequence& TransformsType::
  Transform ()
  {
    return this->Transform_;
  }

  void TransformsType::
  Transform (const Transform_sequence& s)
  {
    this->Transform_ = s;
  }


  // TransformType
  // 

  const TransformType::XPath_sequence& TransformType::
  XPath () const
  {
    return this->XPath_;
  }

  TransformType::XPath_sequence& TransformType::
  XPath ()
  {
    return this->XPath_;
  }

  void TransformType::
  XPath (const XPath_sequence& s)
  {
    this->XPath_ = s;
  }

  const TransformType::Algorithm_type& TransformType::
  Algorithm () const
  {
    return this->Algorithm_.get ();
  }

  TransformType::Algorithm_type& TransformType::
  Algorithm ()
  {
    return this->Algorithm_.get ();
  }

  void TransformType::
  Algorithm (const Algorithm_type& x)
  {
    this->Algorithm_.set (x);
  }

  void TransformType::
  Algorithm (::std::auto_ptr< Algorithm_type > x)
  {
    this->Algorithm_.set (x);
  }


  // DigestMethodType
  // 

  const DigestMethodType::Algorithm_type& DigestMethodType::
  Algorithm () const
  {
    return this->Algorithm_.get ();
  }

  DigestMethodType::Algorithm_type& DigestMethodType::
  Algorithm ()
  {
    return this->Algorithm_.get ();
  }

  void DigestMethodType::
  Algorithm (const Algorithm_type& x)
  {
    this->Algorithm_.set (x);
  }

  void DigestMethodType::
  Algorithm (::std::auto_ptr< Algorithm_type > x)
  {
    this->Algorithm_.set (x);
  }


  // DigestValueType
  // 


  // KeyInfoType
  // 

  const KeyInfoType::KeyName_sequence& KeyInfoType::
  KeyName () const
  {
    return this->KeyName_;
  }

  KeyInfoType::KeyName_sequence& KeyInfoType::
  KeyName ()
  {
    return this->KeyName_;
  }

  void KeyInfoType::
  KeyName (const KeyName_sequence& s)
  {
    this->KeyName_ = s;
  }

  const KeyInfoType::KeyValue_sequence& KeyInfoType::
  KeyValue () const
  {
    return this->KeyValue_;
  }

  KeyInfoType::KeyValue_sequence& KeyInfoType::
  KeyValue ()
  {
    return this->KeyValue_;
  }

  void KeyInfoType::
  KeyValue (const KeyValue_sequence& s)
  {
    this->KeyValue_ = s;
  }

  const KeyInfoType::RetrievalMethod_sequence& KeyInfoType::
  RetrievalMethod () const
  {
    return this->RetrievalMethod_;
  }

  KeyInfoType::RetrievalMethod_sequence& KeyInfoType::
  RetrievalMethod ()
  {
    return this->RetrievalMethod_;
  }

  void KeyInfoType::
  RetrievalMethod (const RetrievalMethod_sequence& s)
  {
    this->RetrievalMethod_ = s;
  }

  const KeyInfoType::X509Data_sequence& KeyInfoType::
  X509Data () const
  {
    return this->X509Data_;
  }

  KeyInfoType::X509Data_sequence& KeyInfoType::
  X509Data ()
  {
    return this->X509Data_;
  }

  void KeyInfoType::
  X509Data (const X509Data_sequence& s)
  {
    this->X509Data_ = s;
  }

  const KeyInfoType::PGPData_sequence& KeyInfoType::
  PGPData () const
  {
    return this->PGPData_;
  }

  KeyInfoType::PGPData_sequence& KeyInfoType::
  PGPData ()
  {
    return this->PGPData_;
  }

  void KeyInfoType::
  PGPData (const PGPData_sequence& s)
  {
    this->PGPData_ = s;
  }

  const KeyInfoType::SPKIData_sequence& KeyInfoType::
  SPKIData () const
  {
    return this->SPKIData_;
  }

  KeyInfoType::SPKIData_sequence& KeyInfoType::
  SPKIData ()
  {
    return this->SPKIData_;
  }

  void KeyInfoType::
  SPKIData (const SPKIData_sequence& s)
  {
    this->SPKIData_ = s;
  }

  const KeyInfoType::MgmtData_sequence& KeyInfoType::
  MgmtData () const
  {
    return this->MgmtData_;
  }

  KeyInfoType::MgmtData_sequence& KeyInfoType::
  MgmtData ()
  {
    return this->MgmtData_;
  }

  void KeyInfoType::
  MgmtData (const MgmtData_sequence& s)
  {
    this->MgmtData_ = s;
  }

  const KeyInfoType::Id_optional& KeyInfoType::
  Id () const
  {
    return this->Id_;
  }

  KeyInfoType::Id_optional& KeyInfoType::
  Id ()
  {
    return this->Id_;
  }

  void KeyInfoType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void KeyInfoType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void KeyInfoType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // KeyValueType
  // 

  const KeyValueType::DSAKeyValue_optional& KeyValueType::
  DSAKeyValue () const
  {
    return this->DSAKeyValue_;
  }

  KeyValueType::DSAKeyValue_optional& KeyValueType::
  DSAKeyValue ()
  {
    return this->DSAKeyValue_;
  }

  void KeyValueType::
  DSAKeyValue (const DSAKeyValue_type& x)
  {
    this->DSAKeyValue_.set (x);
  }

  void KeyValueType::
  DSAKeyValue (const DSAKeyValue_optional& x)
  {
    this->DSAKeyValue_ = x;
  }

  void KeyValueType::
  DSAKeyValue (::std::auto_ptr< DSAKeyValue_type > x)
  {
    this->DSAKeyValue_.set (x);
  }

  const KeyValueType::RSAKeyValue_optional& KeyValueType::
  RSAKeyValue () const
  {
    return this->RSAKeyValue_;
  }

  KeyValueType::RSAKeyValue_optional& KeyValueType::
  RSAKeyValue ()
  {
    return this->RSAKeyValue_;
  }

  void KeyValueType::
  RSAKeyValue (const RSAKeyValue_type& x)
  {
    this->RSAKeyValue_.set (x);
  }

  void KeyValueType::
  RSAKeyValue (const RSAKeyValue_optional& x)
  {
    this->RSAKeyValue_ = x;
  }

  void KeyValueType::
  RSAKeyValue (::std::auto_ptr< RSAKeyValue_type > x)
  {
    this->RSAKeyValue_.set (x);
  }


  // RetrievalMethodType
  // 

  const RetrievalMethodType::Transforms_optional& RetrievalMethodType::
  Transforms () const
  {
    return this->Transforms_;
  }

  RetrievalMethodType::Transforms_optional& RetrievalMethodType::
  Transforms ()
  {
    return this->Transforms_;
  }

  void RetrievalMethodType::
  Transforms (const Transforms_type& x)
  {
    this->Transforms_.set (x);
  }

  void RetrievalMethodType::
  Transforms (const Transforms_optional& x)
  {
    this->Transforms_ = x;
  }

  void RetrievalMethodType::
  Transforms (::std::auto_ptr< Transforms_type > x)
  {
    this->Transforms_.set (x);
  }

  const RetrievalMethodType::URI_optional& RetrievalMethodType::
  URI () const
  {
    return this->URI_;
  }

  RetrievalMethodType::URI_optional& RetrievalMethodType::
  URI ()
  {
    return this->URI_;
  }

  void RetrievalMethodType::
  URI (const URI_type& x)
  {
    this->URI_.set (x);
  }

  void RetrievalMethodType::
  URI (const URI_optional& x)
  {
    this->URI_ = x;
  }

  void RetrievalMethodType::
  URI (::std::auto_ptr< URI_type > x)
  {
    this->URI_.set (x);
  }

  const RetrievalMethodType::Type_optional& RetrievalMethodType::
  Type () const
  {
    return this->Type_;
  }

  RetrievalMethodType::Type_optional& RetrievalMethodType::
  Type ()
  {
    return this->Type_;
  }

  void RetrievalMethodType::
  Type (const Type_type& x)
  {
    this->Type_.set (x);
  }

  void RetrievalMethodType::
  Type (const Type_optional& x)
  {
    this->Type_ = x;
  }

  void RetrievalMethodType::
  Type (::std::auto_ptr< Type_type > x)
  {
    this->Type_.set (x);
  }


  // X509DataType
  // 

  const X509DataType::X509IssuerSerial_sequence& X509DataType::
  X509IssuerSerial () const
  {
    return this->X509IssuerSerial_;
  }

  X509DataType::X509IssuerSerial_sequence& X509DataType::
  X509IssuerSerial ()
  {
    return this->X509IssuerSerial_;
  }

  void X509DataType::
  X509IssuerSerial (const X509IssuerSerial_sequence& s)
  {
    this->X509IssuerSerial_ = s;
  }

  const X509DataType::X509SKI_sequence& X509DataType::
  X509SKI () const
  {
    return this->X509SKI_;
  }

  X509DataType::X509SKI_sequence& X509DataType::
  X509SKI ()
  {
    return this->X509SKI_;
  }

  void X509DataType::
  X509SKI (const X509SKI_sequence& s)
  {
    this->X509SKI_ = s;
  }

  const X509DataType::X509SubjectName_sequence& X509DataType::
  X509SubjectName () const
  {
    return this->X509SubjectName_;
  }

  X509DataType::X509SubjectName_sequence& X509DataType::
  X509SubjectName ()
  {
    return this->X509SubjectName_;
  }

  void X509DataType::
  X509SubjectName (const X509SubjectName_sequence& s)
  {
    this->X509SubjectName_ = s;
  }

  const X509DataType::X509Certificate_sequence& X509DataType::
  X509Certificate () const
  {
    return this->X509Certificate_;
  }

  X509DataType::X509Certificate_sequence& X509DataType::
  X509Certificate ()
  {
    return this->X509Certificate_;
  }

  void X509DataType::
  X509Certificate (const X509Certificate_sequence& s)
  {
    this->X509Certificate_ = s;
  }

  const X509DataType::X509CRL_sequence& X509DataType::
  X509CRL () const
  {
    return this->X509CRL_;
  }

  X509DataType::X509CRL_sequence& X509DataType::
  X509CRL ()
  {
    return this->X509CRL_;
  }

  void X509DataType::
  X509CRL (const X509CRL_sequence& s)
  {
    this->X509CRL_ = s;
  }


  // X509IssuerSerialType
  // 

  const X509IssuerSerialType::X509IssuerName_type& X509IssuerSerialType::
  X509IssuerName () const
  {
    return this->X509IssuerName_.get ();
  }

  X509IssuerSerialType::X509IssuerName_type& X509IssuerSerialType::
  X509IssuerName ()
  {
    return this->X509IssuerName_.get ();
  }

  void X509IssuerSerialType::
  X509IssuerName (const X509IssuerName_type& x)
  {
    this->X509IssuerName_.set (x);
  }

  void X509IssuerSerialType::
  X509IssuerName (::std::auto_ptr< X509IssuerName_type > x)
  {
    this->X509IssuerName_.set (x);
  }

  const X509IssuerSerialType::X509SerialNumber_type& X509IssuerSerialType::
  X509SerialNumber () const
  {
    return this->X509SerialNumber_.get ();
  }

  X509IssuerSerialType::X509SerialNumber_type& X509IssuerSerialType::
  X509SerialNumber ()
  {
    return this->X509SerialNumber_.get ();
  }

  void X509IssuerSerialType::
  X509SerialNumber (const X509SerialNumber_type& x)
  {
    this->X509SerialNumber_.set (x);
  }


  // PGPDataType
  // 

  const PGPDataType::PGPKeyID_optional& PGPDataType::
  PGPKeyID () const
  {
    return this->PGPKeyID_;
  }

  PGPDataType::PGPKeyID_optional& PGPDataType::
  PGPKeyID ()
  {
    return this->PGPKeyID_;
  }

  void PGPDataType::
  PGPKeyID (const PGPKeyID_type& x)
  {
    this->PGPKeyID_.set (x);
  }

  void PGPDataType::
  PGPKeyID (const PGPKeyID_optional& x)
  {
    this->PGPKeyID_ = x;
  }

  void PGPDataType::
  PGPKeyID (::std::auto_ptr< PGPKeyID_type > x)
  {
    this->PGPKeyID_.set (x);
  }

  const PGPDataType::PGPKeyPacket_optional& PGPDataType::
  PGPKeyPacket () const
  {
    return this->PGPKeyPacket_;
  }

  PGPDataType::PGPKeyPacket_optional& PGPDataType::
  PGPKeyPacket ()
  {
    return this->PGPKeyPacket_;
  }

  void PGPDataType::
  PGPKeyPacket (const PGPKeyPacket_type& x)
  {
    this->PGPKeyPacket_.set (x);
  }

  void PGPDataType::
  PGPKeyPacket (const PGPKeyPacket_optional& x)
  {
    this->PGPKeyPacket_ = x;
  }

  void PGPDataType::
  PGPKeyPacket (::std::auto_ptr< PGPKeyPacket_type > x)
  {
    this->PGPKeyPacket_.set (x);
  }


  // SPKIDataType
  // 

  const SPKIDataType::SPKISexp_sequence& SPKIDataType::
  SPKISexp () const
  {
    return this->SPKISexp_;
  }

  SPKIDataType::SPKISexp_sequence& SPKIDataType::
  SPKISexp ()
  {
    return this->SPKISexp_;
  }

  void SPKIDataType::
  SPKISexp (const SPKISexp_sequence& s)
  {
    this->SPKISexp_ = s;
  }


  // ObjectType
  // 

  const ObjectType::Id_optional& ObjectType::
  Id () const
  {
    return this->Id_;
  }

  ObjectType::Id_optional& ObjectType::
  Id ()
  {
    return this->Id_;
  }

  void ObjectType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void ObjectType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void ObjectType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }

  const ObjectType::MimeType_optional& ObjectType::
  MimeType () const
  {
    return this->MimeType_;
  }

  ObjectType::MimeType_optional& ObjectType::
  MimeType ()
  {
    return this->MimeType_;
  }

  void ObjectType::
  MimeType (const MimeType_type& x)
  {
    this->MimeType_.set (x);
  }

  void ObjectType::
  MimeType (const MimeType_optional& x)
  {
    this->MimeType_ = x;
  }

  void ObjectType::
  MimeType (::std::auto_ptr< MimeType_type > x)
  {
    this->MimeType_.set (x);
  }

  const ObjectType::Encoding_optional& ObjectType::
  Encoding () const
  {
    return this->Encoding_;
  }

  ObjectType::Encoding_optional& ObjectType::
  Encoding ()
  {
    return this->Encoding_;
  }

  void ObjectType::
  Encoding (const Encoding_type& x)
  {
    this->Encoding_.set (x);
  }

  void ObjectType::
  Encoding (const Encoding_optional& x)
  {
    this->Encoding_ = x;
  }

  void ObjectType::
  Encoding (::std::auto_ptr< Encoding_type > x)
  {
    this->Encoding_.set (x);
  }


  // ManifestType
  // 

  const ManifestType::Reference_sequence& ManifestType::
  Reference () const
  {
    return this->Reference_;
  }

  ManifestType::Reference_sequence& ManifestType::
  Reference ()
  {
    return this->Reference_;
  }

  void ManifestType::
  Reference (const Reference_sequence& s)
  {
    this->Reference_ = s;
  }

  const ManifestType::Id_optional& ManifestType::
  Id () const
  {
    return this->Id_;
  }

  ManifestType::Id_optional& ManifestType::
  Id ()
  {
    return this->Id_;
  }

  void ManifestType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void ManifestType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void ManifestType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // SignaturePropertiesType
  // 

  const SignaturePropertiesType::SignatureProperty_sequence& SignaturePropertiesType::
  SignatureProperty () const
  {
    return this->SignatureProperty_;
  }

  SignaturePropertiesType::SignatureProperty_sequence& SignaturePropertiesType::
  SignatureProperty ()
  {
    return this->SignatureProperty_;
  }

  void SignaturePropertiesType::
  SignatureProperty (const SignatureProperty_sequence& s)
  {
    this->SignatureProperty_ = s;
  }

  const SignaturePropertiesType::Id_optional& SignaturePropertiesType::
  Id () const
  {
    return this->Id_;
  }

  SignaturePropertiesType::Id_optional& SignaturePropertiesType::
  Id ()
  {
    return this->Id_;
  }

  void SignaturePropertiesType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void SignaturePropertiesType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void SignaturePropertiesType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // SignaturePropertyType
  // 

  const SignaturePropertyType::Target_type& SignaturePropertyType::
  Target () const
  {
    return this->Target_.get ();
  }

  SignaturePropertyType::Target_type& SignaturePropertyType::
  Target ()
  {
    return this->Target_.get ();
  }

  void SignaturePropertyType::
  Target (const Target_type& x)
  {
    this->Target_.set (x);
  }

  void SignaturePropertyType::
  Target (::std::auto_ptr< Target_type > x)
  {
    this->Target_.set (x);
  }

  const SignaturePropertyType::Id_optional& SignaturePropertyType::
  Id () const
  {
    return this->Id_;
  }

  SignaturePropertyType::Id_optional& SignaturePropertyType::
  Id ()
  {
    return this->Id_;
  }

  void SignaturePropertyType::
  Id (const Id_type& x)
  {
    this->Id_.set (x);
  }

  void SignaturePropertyType::
  Id (const Id_optional& x)
  {
    this->Id_ = x;
  }

  void SignaturePropertyType::
  Id (::std::auto_ptr< Id_type > x)
  {
    this->Id_.set (x);
  }


  // HMACOutputLengthType
  // 


  // DSAKeyValueType
  // 

  const DSAKeyValueType::P_optional& DSAKeyValueType::
  P () const
  {
    return this->P_;
  }

  DSAKeyValueType::P_optional& DSAKeyValueType::
  P ()
  {
    return this->P_;
  }

  void DSAKeyValueType::
  P (const P_type& x)
  {
    this->P_.set (x);
  }

  void DSAKeyValueType::
  P (const P_optional& x)
  {
    this->P_ = x;
  }

  void DSAKeyValueType::
  P (::std::auto_ptr< P_type > x)
  {
    this->P_.set (x);
  }

  const DSAKeyValueType::Q_optional& DSAKeyValueType::
  Q () const
  {
    return this->Q_;
  }

  DSAKeyValueType::Q_optional& DSAKeyValueType::
  Q ()
  {
    return this->Q_;
  }

  void DSAKeyValueType::
  Q (const Q_type& x)
  {
    this->Q_.set (x);
  }

  void DSAKeyValueType::
  Q (const Q_optional& x)
  {
    this->Q_ = x;
  }

  void DSAKeyValueType::
  Q (::std::auto_ptr< Q_type > x)
  {
    this->Q_.set (x);
  }

  const DSAKeyValueType::G_optional& DSAKeyValueType::
  G () const
  {
    return this->G_;
  }

  DSAKeyValueType::G_optional& DSAKeyValueType::
  G ()
  {
    return this->G_;
  }

  void DSAKeyValueType::
  G (const G_type& x)
  {
    this->G_.set (x);
  }

  void DSAKeyValueType::
  G (const G_optional& x)
  {
    this->G_ = x;
  }

  void DSAKeyValueType::
  G (::std::auto_ptr< G_type > x)
  {
    this->G_.set (x);
  }

  const DSAKeyValueType::Y_type& DSAKeyValueType::
  Y () const
  {
    return this->Y_.get ();
  }

  DSAKeyValueType::Y_type& DSAKeyValueType::
  Y ()
  {
    return this->Y_.get ();
  }

  void DSAKeyValueType::
  Y (const Y_type& x)
  {
    this->Y_.set (x);
  }

  void DSAKeyValueType::
  Y (::std::auto_ptr< Y_type > x)
  {
    this->Y_.set (x);
  }

  const DSAKeyValueType::J_optional& DSAKeyValueType::
  J () const
  {
    return this->J_;
  }

  DSAKeyValueType::J_optional& DSAKeyValueType::
  J ()
  {
    return this->J_;
  }

  void DSAKeyValueType::
  J (const J_type& x)
  {
    this->J_.set (x);
  }

  void DSAKeyValueType::
  J (const J_optional& x)
  {
    this->J_ = x;
  }

  void DSAKeyValueType::
  J (::std::auto_ptr< J_type > x)
  {
    this->J_.set (x);
  }

  const DSAKeyValueType::Seed_optional& DSAKeyValueType::
  Seed () const
  {
    return this->Seed_;
  }

  DSAKeyValueType::Seed_optional& DSAKeyValueType::
  Seed ()
  {
    return this->Seed_;
  }

  void DSAKeyValueType::
  Seed (const Seed_type& x)
  {
    this->Seed_.set (x);
  }

  void DSAKeyValueType::
  Seed (const Seed_optional& x)
  {
    this->Seed_ = x;
  }

  void DSAKeyValueType::
  Seed (::std::auto_ptr< Seed_type > x)
  {
    this->Seed_.set (x);
  }

  const DSAKeyValueType::PgenCounter_optional& DSAKeyValueType::
  PgenCounter () const
  {
    return this->PgenCounter_;
  }

  DSAKeyValueType::PgenCounter_optional& DSAKeyValueType::
  PgenCounter ()
  {
    return this->PgenCounter_;
  }

  void DSAKeyValueType::
  PgenCounter (const PgenCounter_type& x)
  {
    this->PgenCounter_.set (x);
  }

  void DSAKeyValueType::
  PgenCounter (const PgenCounter_optional& x)
  {
    this->PgenCounter_ = x;
  }

  void DSAKeyValueType::
  PgenCounter (::std::auto_ptr< PgenCounter_type > x)
  {
    this->PgenCounter_.set (x);
  }


  // RSAKeyValueType
  // 

  const RSAKeyValueType::Modulus_type& RSAKeyValueType::
  Modulus () const
  {
    return this->Modulus_.get ();
  }

  RSAKeyValueType::Modulus_type& RSAKeyValueType::
  Modulus ()
  {
    return this->Modulus_.get ();
  }

  void RSAKeyValueType::
  Modulus (const Modulus_type& x)
  {
    this->Modulus_.set (x);
  }

  void RSAKeyValueType::
  Modulus (::std::auto_ptr< Modulus_type > x)
  {
    this->Modulus_.set (x);
  }

  const RSAKeyValueType::Exponent_type& RSAKeyValueType::
  Exponent () const
  {
    return this->Exponent_.get ();
  }

  RSAKeyValueType::Exponent_type& RSAKeyValueType::
  Exponent ()
  {
    return this->Exponent_.get ();
  }

  void RSAKeyValueType::
  Exponent (const Exponent_type& x)
  {
    this->Exponent_.set (x);
  }

  void RSAKeyValueType::
  Exponent (::std::auto_ptr< Exponent_type > x)
  {
    this->Exponent_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace dsig
{
  // CryptoBinary
  //

  CryptoBinary::
  CryptoBinary ()
  : ::xml_schema::base64_binary ()
  {
  }

  CryptoBinary::
  CryptoBinary (const ::xml_schema::base64_binary& base64_binary)
  : ::xml_schema::base64_binary (base64_binary)
  {
  }

  CryptoBinary::
  CryptoBinary (const CryptoBinary& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::base64_binary (x, f, c)
  {
  }

  CryptoBinary::
  CryptoBinary (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::base64_binary (e, f, c)
  {
  }

  CryptoBinary::
  CryptoBinary (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::base64_binary (a, f, c)
  {
  }

  CryptoBinary::
  CryptoBinary (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::base64_binary (s, e, f, c)
  {
  }

  CryptoBinary* CryptoBinary::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new CryptoBinary (*this, f, c);
  }

  CryptoBinary::
  ~CryptoBinary ()
  {
  }

  // SignatureType
  //

  SignatureType::
  SignatureType (const SignedInfo_type& SignedInfo,
                 const SignatureValue_type& SignatureValue)
  : ::xml_schema::type (),
    SignedInfo_ (SignedInfo, ::xml_schema::flags (), this),
    SignatureValue_ (SignatureValue, ::xml_schema::flags (), this),
    KeyInfo_ (::xml_schema::flags (), this),
    Object_ (::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this)
  {
  }

  SignatureType::
  SignatureType (const SignatureType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    SignedInfo_ (x.SignedInfo_, f, this),
    SignatureValue_ (x.SignatureValue_, f, this),
    KeyInfo_ (x.KeyInfo_, f, this),
    Object_ (x.Object_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignatureType::
  SignatureType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    SignedInfo_ (f, this),
    SignatureValue_ (f, this),
    KeyInfo_ (f, this),
    Object_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SignatureType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SignedInfo
      //
      if (n.name () == "SignedInfo" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SignedInfo_type > r (
          SignedInfo_traits::create (i, f, this));

        if (!SignedInfo_.present ())
        {
          this->SignedInfo (r);
          continue;
        }
      }

      // SignatureValue
      //
      if (n.name () == "SignatureValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SignatureValue_type > r (
          SignatureValue_traits::create (i, f, this));

        if (!SignatureValue_.present ())
        {
          this->SignatureValue (r);
          continue;
        }
      }

      // KeyInfo
      //
      if (n.name () == "KeyInfo" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< KeyInfo_type > r (
          KeyInfo_traits::create (i, f, this));

        if (!this->KeyInfo ())
        {
          this->KeyInfo (r);
          continue;
        }
      }

      // Object
      //
      if (n.name () == "Object" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Object_type > r (
          Object_traits::create (i, f, this));

        this->Object ().push_back (r);
        continue;
      }

      break;
    }

    if (!SignedInfo_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SignedInfo",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!SignatureValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SignatureValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }
  }

  SignatureType* SignatureType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SignatureType (*this, f, c);
  }

  SignatureType::
  ~SignatureType ()
  {
  }

  // SignatureValueType
  //

  SignatureValueType::
  SignatureValueType ()
  : ::xml_schema::base64_binary (),
    Id_ (::xml_schema::flags (), this)
  {
  }

  SignatureValueType::
  SignatureValueType (const ::xml_schema::base64_binary& base64_binary)
  : ::xml_schema::base64_binary (base64_binary),
    Id_ (::xml_schema::flags (), this)
  {
  }

  SignatureValueType::
  SignatureValueType (const SignatureValueType& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::base64_binary (x, f, c),
    Id_ (x.Id_, f, this)
  {
  }

  SignatureValueType::
  SignatureValueType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::base64_binary (e, f | ::xml_schema::flags::base, c),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SignatureValueType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }
  }

  SignatureValueType* SignatureValueType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SignatureValueType (*this, f, c);
  }

  SignatureValueType::
  ~SignatureValueType ()
  {
  }

  // SignedInfoType
  //

  SignedInfoType::
  SignedInfoType (const CanonicalizationMethod_type& CanonicalizationMethod,
                  const SignatureMethod_type& SignatureMethod)
  : ::xml_schema::type (),
    CanonicalizationMethod_ (CanonicalizationMethod, ::xml_schema::flags (), this),
    SignatureMethod_ (SignatureMethod, ::xml_schema::flags (), this),
    Reference_ (::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this)
  {
  }

  SignedInfoType::
  SignedInfoType (const SignedInfoType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    CanonicalizationMethod_ (x.CanonicalizationMethod_, f, this),
    SignatureMethod_ (x.SignatureMethod_, f, this),
    Reference_ (x.Reference_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignedInfoType::
  SignedInfoType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    CanonicalizationMethod_ (f, this),
    SignatureMethod_ (f, this),
    Reference_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SignedInfoType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CanonicalizationMethod
      //
      if (n.name () == "CanonicalizationMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< CanonicalizationMethod_type > r (
          CanonicalizationMethod_traits::create (i, f, this));

        if (!CanonicalizationMethod_.present ())
        {
          this->CanonicalizationMethod (r);
          continue;
        }
      }

      // SignatureMethod
      //
      if (n.name () == "SignatureMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SignatureMethod_type > r (
          SignatureMethod_traits::create (i, f, this));

        if (!SignatureMethod_.present ())
        {
          this->SignatureMethod (r);
          continue;
        }
      }

      // Reference
      //
      if (n.name () == "Reference" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Reference_type > r (
          Reference_traits::create (i, f, this));

        this->Reference ().push_back (r);
        continue;
      }

      break;
    }

    if (!CanonicalizationMethod_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CanonicalizationMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!SignatureMethod_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "SignatureMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }
  }

  SignedInfoType* SignedInfoType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SignedInfoType (*this, f, c);
  }

  SignedInfoType::
  ~SignedInfoType ()
  {
  }

  // CanonicalizationMethodType
  //

  CanonicalizationMethodType::
  CanonicalizationMethodType (const Algorithm_type& Algorithm)
  : ::xml_schema::type (),
    Algorithm_ (Algorithm, ::xml_schema::flags (), this)
  {
  }

  CanonicalizationMethodType::
  CanonicalizationMethodType (const CanonicalizationMethodType& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Algorithm_ (x.Algorithm_, f, this)
  {
  }

  CanonicalizationMethodType::
  CanonicalizationMethodType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Algorithm_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void CanonicalizationMethodType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Algorithm" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Algorithm_type > r (
          Algorithm_traits::create (i, f, this));

        this->Algorithm (r);
        continue;
      }
    }

    if (!Algorithm_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Algorithm",
        "");
    }
  }

  CanonicalizationMethodType* CanonicalizationMethodType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new CanonicalizationMethodType (*this, f, c);
  }

  CanonicalizationMethodType::
  ~CanonicalizationMethodType ()
  {
  }

  // SignatureMethodType
  //

  SignatureMethodType::
  SignatureMethodType (const Algorithm_type& Algorithm)
  : ::xml_schema::type (),
    HMACOutputLength_ (::xml_schema::flags (), this),
    Algorithm_ (Algorithm, ::xml_schema::flags (), this)
  {
  }

  SignatureMethodType::
  SignatureMethodType (const SignatureMethodType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    HMACOutputLength_ (x.HMACOutputLength_, f, this),
    Algorithm_ (x.Algorithm_, f, this)
  {
  }

  SignatureMethodType::
  SignatureMethodType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    HMACOutputLength_ (f, this),
    Algorithm_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SignatureMethodType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HMACOutputLength
      //
      if (n.name () == "HMACOutputLength" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< HMACOutputLength_type > r (
          HMACOutputLength_traits::create (i, f, this));

        if (!this->HMACOutputLength ())
        {
          this->HMACOutputLength (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Algorithm" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Algorithm_type > r (
          Algorithm_traits::create (i, f, this));

        this->Algorithm (r);
        continue;
      }
    }

    if (!Algorithm_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Algorithm",
        "");
    }
  }

  SignatureMethodType* SignatureMethodType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SignatureMethodType (*this, f, c);
  }

  SignatureMethodType::
  ~SignatureMethodType ()
  {
  }

  // ReferenceType
  //

  ReferenceType::
  ReferenceType (const DigestMethod_type& DigestMethod,
                 const DigestValue_type& DigestValue)
  : ::xml_schema::type (),
    Transforms_ (::xml_schema::flags (), this),
    DigestMethod_ (DigestMethod, ::xml_schema::flags (), this),
    DigestValue_ (DigestValue, ::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this),
    URI_ (::xml_schema::flags (), this),
    Type_ (::xml_schema::flags (), this)
  {
  }

  ReferenceType::
  ReferenceType (const ReferenceType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Transforms_ (x.Transforms_, f, this),
    DigestMethod_ (x.DigestMethod_, f, this),
    DigestValue_ (x.DigestValue_, f, this),
    Id_ (x.Id_, f, this),
    URI_ (x.URI_, f, this),
    Type_ (x.Type_, f, this)
  {
  }

  ReferenceType::
  ReferenceType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Transforms_ (f, this),
    DigestMethod_ (f, this),
    DigestValue_ (f, this),
    Id_ (f, this),
    URI_ (f, this),
    Type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void ReferenceType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Transforms
      //
      if (n.name () == "Transforms" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Transforms_type > r (
          Transforms_traits::create (i, f, this));

        if (!this->Transforms ())
        {
          this->Transforms (r);
          continue;
        }
      }

      // DigestMethod
      //
      if (n.name () == "DigestMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DigestMethod_type > r (
          DigestMethod_traits::create (i, f, this));

        if (!DigestMethod_.present ())
        {
          this->DigestMethod (r);
          continue;
        }
      }

      // DigestValue
      //
      if (n.name () == "DigestValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DigestValue_type > r (
          DigestValue_traits::create (i, f, this));

        if (!DigestValue_.present ())
        {
          this->DigestValue (r);
          continue;
        }
      }

      break;
    }

    if (!DigestMethod_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!DigestValue_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "DigestValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URI_type > r (
          URI_traits::create (i, f, this));

        this->URI (r);
        continue;
      }

      if (n.name () == "Type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Type_type > r (
          Type_traits::create (i, f, this));

        this->Type (r);
        continue;
      }
    }
  }

  ReferenceType* ReferenceType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new ReferenceType (*this, f, c);
  }

  ReferenceType::
  ~ReferenceType ()
  {
  }

  // TransformsType
  //

  TransformsType::
  TransformsType ()
  : ::xml_schema::type (),
    Transform_ (::xml_schema::flags (), this)
  {
  }

  TransformsType::
  TransformsType (const TransformsType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Transform_ (x.Transform_, f, this)
  {
  }

  TransformsType::
  TransformsType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Transform_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void TransformsType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Transform
      //
      if (n.name () == "Transform" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Transform_type > r (
          Transform_traits::create (i, f, this));

        this->Transform ().push_back (r);
        continue;
      }

      break;
    }
  }

  TransformsType* TransformsType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new TransformsType (*this, f, c);
  }

  TransformsType::
  ~TransformsType ()
  {
  }

  // TransformType
  //

  TransformType::
  TransformType (const Algorithm_type& Algorithm)
  : ::xml_schema::type (),
    XPath_ (::xml_schema::flags (), this),
    Algorithm_ (Algorithm, ::xml_schema::flags (), this)
  {
  }

  TransformType::
  TransformType (const TransformType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    XPath_ (x.XPath_, f, this),
    Algorithm_ (x.Algorithm_, f, this)
  {
  }

  TransformType::
  TransformType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    XPath_ (f, this),
    Algorithm_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void TransformType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // XPath
      //
      if (n.name () == "XPath" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< XPath_type > r (
          XPath_traits::create (i, f, this));

        this->XPath ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Algorithm" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Algorithm_type > r (
          Algorithm_traits::create (i, f, this));

        this->Algorithm (r);
        continue;
      }
    }

    if (!Algorithm_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Algorithm",
        "");
    }
  }

  TransformType* TransformType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new TransformType (*this, f, c);
  }

  TransformType::
  ~TransformType ()
  {
  }

  // DigestMethodType
  //

  DigestMethodType::
  DigestMethodType (const Algorithm_type& Algorithm)
  : ::xml_schema::type (),
    Algorithm_ (Algorithm, ::xml_schema::flags (), this)
  {
  }

  DigestMethodType::
  DigestMethodType (const DigestMethodType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Algorithm_ (x.Algorithm_, f, this)
  {
  }

  DigestMethodType::
  DigestMethodType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Algorithm_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void DigestMethodType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Algorithm" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Algorithm_type > r (
          Algorithm_traits::create (i, f, this));

        this->Algorithm (r);
        continue;
      }
    }

    if (!Algorithm_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Algorithm",
        "");
    }
  }

  DigestMethodType* DigestMethodType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new DigestMethodType (*this, f, c);
  }

  DigestMethodType::
  ~DigestMethodType ()
  {
  }

  // DigestValueType
  //

  DigestValueType::
  DigestValueType ()
  : ::xml_schema::base64_binary ()
  {
  }

  DigestValueType::
  DigestValueType (const ::xml_schema::base64_binary& base64_binary)
  : ::xml_schema::base64_binary (base64_binary)
  {
  }

  DigestValueType::
  DigestValueType (const DigestValueType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::base64_binary (x, f, c)
  {
  }

  DigestValueType::
  DigestValueType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::base64_binary (e, f, c)
  {
  }

  DigestValueType::
  DigestValueType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::base64_binary (a, f, c)
  {
  }

  DigestValueType::
  DigestValueType (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::base64_binary (s, e, f, c)
  {
  }

  DigestValueType* DigestValueType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new DigestValueType (*this, f, c);
  }

  DigestValueType::
  ~DigestValueType ()
  {
  }

  // KeyInfoType
  //

  KeyInfoType::
  KeyInfoType ()
  : ::xml_schema::type (),
    KeyName_ (::xml_schema::flags (), this),
    KeyValue_ (::xml_schema::flags (), this),
    RetrievalMethod_ (::xml_schema::flags (), this),
    X509Data_ (::xml_schema::flags (), this),
    PGPData_ (::xml_schema::flags (), this),
    SPKIData_ (::xml_schema::flags (), this),
    MgmtData_ (::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this)
  {
  }

  KeyInfoType::
  KeyInfoType (const KeyInfoType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    KeyName_ (x.KeyName_, f, this),
    KeyValue_ (x.KeyValue_, f, this),
    RetrievalMethod_ (x.RetrievalMethod_, f, this),
    X509Data_ (x.X509Data_, f, this),
    PGPData_ (x.PGPData_, f, this),
    SPKIData_ (x.SPKIData_, f, this),
    MgmtData_ (x.MgmtData_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  KeyInfoType::
  KeyInfoType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    KeyName_ (f, this),
    KeyValue_ (f, this),
    RetrievalMethod_ (f, this),
    X509Data_ (f, this),
    PGPData_ (f, this),
    SPKIData_ (f, this),
    MgmtData_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void KeyInfoType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // KeyName
      //
      if (n.name () == "KeyName" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< KeyName_type > r (
          KeyName_traits::create (i, f, this));

        this->KeyName ().push_back (r);
        continue;
      }

      // KeyValue
      //
      if (n.name () == "KeyValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< KeyValue_type > r (
          KeyValue_traits::create (i, f, this));

        this->KeyValue ().push_back (r);
        continue;
      }

      // RetrievalMethod
      //
      if (n.name () == "RetrievalMethod" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< RetrievalMethod_type > r (
          RetrievalMethod_traits::create (i, f, this));

        this->RetrievalMethod ().push_back (r);
        continue;
      }

      // X509Data
      //
      if (n.name () == "X509Data" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509Data_type > r (
          X509Data_traits::create (i, f, this));

        this->X509Data ().push_back (r);
        continue;
      }

      // PGPData
      //
      if (n.name () == "PGPData" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< PGPData_type > r (
          PGPData_traits::create (i, f, this));

        this->PGPData ().push_back (r);
        continue;
      }

      // SPKIData
      //
      if (n.name () == "SPKIData" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SPKIData_type > r (
          SPKIData_traits::create (i, f, this));

        this->SPKIData ().push_back (r);
        continue;
      }

      // MgmtData
      //
      if (n.name () == "MgmtData" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< MgmtData_type > r (
          MgmtData_traits::create (i, f, this));

        this->MgmtData ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }
  }

  KeyInfoType* KeyInfoType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new KeyInfoType (*this, f, c);
  }

  KeyInfoType::
  ~KeyInfoType ()
  {
  }

  // KeyValueType
  //

  KeyValueType::
  KeyValueType ()
  : ::xml_schema::type (),
    DSAKeyValue_ (::xml_schema::flags (), this),
    RSAKeyValue_ (::xml_schema::flags (), this)
  {
  }

  KeyValueType::
  KeyValueType (const KeyValueType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    DSAKeyValue_ (x.DSAKeyValue_, f, this),
    RSAKeyValue_ (x.RSAKeyValue_, f, this)
  {
  }

  KeyValueType::
  KeyValueType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    DSAKeyValue_ (f, this),
    RSAKeyValue_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void KeyValueType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // DSAKeyValue
      //
      if (n.name () == "DSAKeyValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< DSAKeyValue_type > r (
          DSAKeyValue_traits::create (i, f, this));

        if (!this->DSAKeyValue ())
        {
          this->DSAKeyValue (r);
          continue;
        }
      }

      // RSAKeyValue
      //
      if (n.name () == "RSAKeyValue" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< RSAKeyValue_type > r (
          RSAKeyValue_traits::create (i, f, this));

        if (!this->RSAKeyValue ())
        {
          this->RSAKeyValue (r);
          continue;
        }
      }

      break;
    }
  }

  KeyValueType* KeyValueType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new KeyValueType (*this, f, c);
  }

  KeyValueType::
  ~KeyValueType ()
  {
  }

  // RetrievalMethodType
  //

  RetrievalMethodType::
  RetrievalMethodType ()
  : ::xml_schema::type (),
    Transforms_ (::xml_schema::flags (), this),
    URI_ (::xml_schema::flags (), this),
    Type_ (::xml_schema::flags (), this)
  {
  }

  RetrievalMethodType::
  RetrievalMethodType (const RetrievalMethodType& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Transforms_ (x.Transforms_, f, this),
    URI_ (x.URI_, f, this),
    Type_ (x.Type_, f, this)
  {
  }

  RetrievalMethodType::
  RetrievalMethodType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Transforms_ (f, this),
    URI_ (f, this),
    Type_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void RetrievalMethodType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Transforms
      //
      if (n.name () == "Transforms" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Transforms_type > r (
          Transforms_traits::create (i, f, this));

        if (!this->Transforms ())
        {
          this->Transforms (r);
          continue;
        }
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "URI" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< URI_type > r (
          URI_traits::create (i, f, this));

        this->URI (r);
        continue;
      }

      if (n.name () == "Type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Type_type > r (
          Type_traits::create (i, f, this));

        this->Type (r);
        continue;
      }
    }
  }

  RetrievalMethodType* RetrievalMethodType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new RetrievalMethodType (*this, f, c);
  }

  RetrievalMethodType::
  ~RetrievalMethodType ()
  {
  }

  // X509DataType
  //

  X509DataType::
  X509DataType ()
  : ::xml_schema::type (),
    X509IssuerSerial_ (::xml_schema::flags (), this),
    X509SKI_ (::xml_schema::flags (), this),
    X509SubjectName_ (::xml_schema::flags (), this),
    X509Certificate_ (::xml_schema::flags (), this),
    X509CRL_ (::xml_schema::flags (), this)
  {
  }

  X509DataType::
  X509DataType (const X509DataType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    X509IssuerSerial_ (x.X509IssuerSerial_, f, this),
    X509SKI_ (x.X509SKI_, f, this),
    X509SubjectName_ (x.X509SubjectName_, f, this),
    X509Certificate_ (x.X509Certificate_, f, this),
    X509CRL_ (x.X509CRL_, f, this)
  {
  }

  X509DataType::
  X509DataType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    X509IssuerSerial_ (f, this),
    X509SKI_ (f, this),
    X509SubjectName_ (f, this),
    X509Certificate_ (f, this),
    X509CRL_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void X509DataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // X509IssuerSerial
      //
      if (n.name () == "X509IssuerSerial" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509IssuerSerial_type > r (
          X509IssuerSerial_traits::create (i, f, this));

        this->X509IssuerSerial ().push_back (r);
        continue;
      }

      // X509SKI
      //
      if (n.name () == "X509SKI" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509SKI_type > r (
          X509SKI_traits::create (i, f, this));

        this->X509SKI ().push_back (r);
        continue;
      }

      // X509SubjectName
      //
      if (n.name () == "X509SubjectName" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509SubjectName_type > r (
          X509SubjectName_traits::create (i, f, this));

        this->X509SubjectName ().push_back (r);
        continue;
      }

      // X509Certificate
      //
      if (n.name () == "X509Certificate" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509Certificate_type > r (
          X509Certificate_traits::create (i, f, this));

        this->X509Certificate ().push_back (r);
        continue;
      }

      // X509CRL
      //
      if (n.name () == "X509CRL" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509CRL_type > r (
          X509CRL_traits::create (i, f, this));

        this->X509CRL ().push_back (r);
        continue;
      }

      break;
    }
  }

  X509DataType* X509DataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new X509DataType (*this, f, c);
  }

  X509DataType::
  ~X509DataType ()
  {
  }

  // X509IssuerSerialType
  //

  X509IssuerSerialType::
  X509IssuerSerialType (const X509IssuerName_type& X509IssuerName,
                        const X509SerialNumber_type& X509SerialNumber)
  : ::xml_schema::type (),
    X509IssuerName_ (X509IssuerName, ::xml_schema::flags (), this),
    X509SerialNumber_ (X509SerialNumber, ::xml_schema::flags (), this)
  {
  }

  X509IssuerSerialType::
  X509IssuerSerialType (const X509IssuerSerialType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    X509IssuerName_ (x.X509IssuerName_, f, this),
    X509SerialNumber_ (x.X509SerialNumber_, f, this)
  {
  }

  X509IssuerSerialType::
  X509IssuerSerialType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    X509IssuerName_ (f, this),
    X509SerialNumber_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void X509IssuerSerialType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // X509IssuerName
      //
      if (n.name () == "X509IssuerName" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< X509IssuerName_type > r (
          X509IssuerName_traits::create (i, f, this));

        if (!X509IssuerName_.present ())
        {
          this->X509IssuerName (r);
          continue;
        }
      }

      // X509SerialNumber
      //
      if (n.name () == "X509SerialNumber" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        if (!X509SerialNumber_.present ())
        {
          this->X509SerialNumber (X509SerialNumber_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!X509IssuerName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "X509IssuerName",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!X509SerialNumber_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "X509SerialNumber",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  X509IssuerSerialType* X509IssuerSerialType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new X509IssuerSerialType (*this, f, c);
  }

  X509IssuerSerialType::
  ~X509IssuerSerialType ()
  {
  }

  // PGPDataType
  //

  PGPDataType::
  PGPDataType ()
  : ::xml_schema::type (),
    PGPKeyID_ (::xml_schema::flags (), this),
    PGPKeyPacket_ (::xml_schema::flags (), this)
  {
  }

  PGPDataType::
  PGPDataType (const PGPDataType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    PGPKeyID_ (x.PGPKeyID_, f, this),
    PGPKeyPacket_ (x.PGPKeyPacket_, f, this)
  {
  }

  PGPDataType::
  PGPDataType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    PGPKeyID_ (f, this),
    PGPKeyPacket_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void PGPDataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // PGPKeyID
      //
      if (n.name () == "PGPKeyID" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< PGPKeyID_type > r (
          PGPKeyID_traits::create (i, f, this));

        if (!this->PGPKeyID ())
        {
          this->PGPKeyID (r);
          continue;
        }
      }

      // PGPKeyPacket
      //
      if (n.name () == "PGPKeyPacket" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< PGPKeyPacket_type > r (
          PGPKeyPacket_traits::create (i, f, this));

        if (!this->PGPKeyPacket ())
        {
          this->PGPKeyPacket (r);
          continue;
        }
      }

      break;
    }
  }

  PGPDataType* PGPDataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new PGPDataType (*this, f, c);
  }

  PGPDataType::
  ~PGPDataType ()
  {
  }

  // SPKIDataType
  //

  SPKIDataType::
  SPKIDataType ()
  : ::xml_schema::type (),
    SPKISexp_ (::xml_schema::flags (), this)
  {
  }

  SPKIDataType::
  SPKIDataType (const SPKIDataType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    SPKISexp_ (x.SPKISexp_, f, this)
  {
  }

  SPKIDataType::
  SPKIDataType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    SPKISexp_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SPKIDataType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SPKISexp
      //
      if (n.name () == "SPKISexp" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SPKISexp_type > r (
          SPKISexp_traits::create (i, f, this));

        this->SPKISexp ().push_back (r);
        continue;
      }

      break;
    }
  }

  SPKIDataType* SPKIDataType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SPKIDataType (*this, f, c);
  }

  SPKIDataType::
  ~SPKIDataType ()
  {
  }

  // ObjectType
  //

  ObjectType::
  ObjectType ()
  : ::xml_schema::type (),
    Id_ (::xml_schema::flags (), this),
    MimeType_ (::xml_schema::flags (), this),
    Encoding_ (::xml_schema::flags (), this)
  {
  }

  ObjectType::
  ObjectType (const ObjectType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Id_ (x.Id_, f, this),
    MimeType_ (x.MimeType_, f, this),
    Encoding_ (x.Encoding_, f, this)
  {
  }

  ObjectType::
  ObjectType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Id_ (f, this),
    MimeType_ (f, this),
    Encoding_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void ObjectType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }

      if (n.name () == "MimeType" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< MimeType_type > r (
          MimeType_traits::create (i, f, this));

        this->MimeType (r);
        continue;
      }

      if (n.name () == "Encoding" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Encoding_type > r (
          Encoding_traits::create (i, f, this));

        this->Encoding (r);
        continue;
      }
    }
  }

  ObjectType* ObjectType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new ObjectType (*this, f, c);
  }

  ObjectType::
  ~ObjectType ()
  {
  }

  // ManifestType
  //

  ManifestType::
  ManifestType ()
  : ::xml_schema::type (),
    Reference_ (::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this)
  {
  }

  ManifestType::
  ManifestType (const ManifestType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Reference_ (x.Reference_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  ManifestType::
  ManifestType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Reference_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void ManifestType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Reference
      //
      if (n.name () == "Reference" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Reference_type > r (
          Reference_traits::create (i, f, this));

        this->Reference ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }
  }

  ManifestType* ManifestType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new ManifestType (*this, f, c);
  }

  ManifestType::
  ~ManifestType ()
  {
  }

  // SignaturePropertiesType
  //

  SignaturePropertiesType::
  SignaturePropertiesType ()
  : ::xml_schema::type (),
    SignatureProperty_ (::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this)
  {
  }

  SignaturePropertiesType::
  SignaturePropertiesType (const SignaturePropertiesType& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    SignatureProperty_ (x.SignatureProperty_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignaturePropertiesType::
  SignaturePropertiesType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    SignatureProperty_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SignaturePropertiesType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // SignatureProperty
      //
      if (n.name () == "SignatureProperty" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< SignatureProperty_type > r (
          SignatureProperty_traits::create (i, f, this));

        this->SignatureProperty ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }
  }

  SignaturePropertiesType* SignaturePropertiesType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SignaturePropertiesType (*this, f, c);
  }

  SignaturePropertiesType::
  ~SignaturePropertiesType ()
  {
  }

  // SignaturePropertyType
  //

  SignaturePropertyType::
  SignaturePropertyType (const Target_type& Target)
  : ::xml_schema::type (),
    Target_ (Target, ::xml_schema::flags (), this),
    Id_ (::xml_schema::flags (), this)
  {
  }

  SignaturePropertyType::
  SignaturePropertyType (const SignaturePropertyType& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Target_ (x.Target_, f, this),
    Id_ (x.Id_, f, this)
  {
  }

  SignaturePropertyType::
  SignaturePropertyType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Target_ (f, this),
    Id_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SignaturePropertyType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "Target" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Target_type > r (
          Target_traits::create (i, f, this));

        this->Target (r);
        continue;
      }

      if (n.name () == "Id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< Id_type > r (
          Id_traits::create (i, f, this));

        this->Id (r);
        continue;
      }
    }

    if (!Target_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "Target",
        "");
    }
  }

  SignaturePropertyType* SignaturePropertyType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SignaturePropertyType (*this, f, c);
  }

  SignaturePropertyType::
  ~SignaturePropertyType ()
  {
  }

  // HMACOutputLengthType
  //

  HMACOutputLengthType::
  HMACOutputLengthType (const ::xml_schema::integer& integer)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (integer)
  {
  }

  HMACOutputLengthType::
  HMACOutputLengthType (const HMACOutputLengthType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
  {
  }

  HMACOutputLengthType::
  HMACOutputLengthType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
  {
  }

  HMACOutputLengthType::
  HMACOutputLengthType (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
  {
  }

  HMACOutputLengthType::
  HMACOutputLengthType (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  HMACOutputLengthType* HMACOutputLengthType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new HMACOutputLengthType (*this, f, c);
  }

  HMACOutputLengthType::
  ~HMACOutputLengthType ()
  {
  }

  // DSAKeyValueType
  //

  DSAKeyValueType::
  DSAKeyValueType (const Y_type& Y)
  : ::xml_schema::type (),
    P_ (::xml_schema::flags (), this),
    Q_ (::xml_schema::flags (), this),
    G_ (::xml_schema::flags (), this),
    Y_ (Y, ::xml_schema::flags (), this),
    J_ (::xml_schema::flags (), this),
    Seed_ (::xml_schema::flags (), this),
    PgenCounter_ (::xml_schema::flags (), this)
  {
  }

  DSAKeyValueType::
  DSAKeyValueType (const DSAKeyValueType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    P_ (x.P_, f, this),
    Q_ (x.Q_, f, this),
    G_ (x.G_, f, this),
    Y_ (x.Y_, f, this),
    J_ (x.J_, f, this),
    Seed_ (x.Seed_, f, this),
    PgenCounter_ (x.PgenCounter_, f, this)
  {
  }

  DSAKeyValueType::
  DSAKeyValueType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    P_ (f, this),
    Q_ (f, this),
    G_ (f, this),
    Y_ (f, this),
    J_ (f, this),
    Seed_ (f, this),
    PgenCounter_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void DSAKeyValueType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // P
      //
      if (n.name () == "P" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< P_type > r (
          P_traits::create (i, f, this));

        if (!this->P ())
        {
          this->P (r);
          continue;
        }
      }

      // Q
      //
      if (n.name () == "Q" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Q_type > r (
          Q_traits::create (i, f, this));

        if (!this->Q ())
        {
          this->Q (r);
          continue;
        }
      }

      // G
      //
      if (n.name () == "G" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< G_type > r (
          G_traits::create (i, f, this));

        if (!this->G ())
        {
          this->G (r);
          continue;
        }
      }

      // Y
      //
      if (n.name () == "Y" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Y_type > r (
          Y_traits::create (i, f, this));

        if (!Y_.present ())
        {
          this->Y (r);
          continue;
        }
      }

      // J
      //
      if (n.name () == "J" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< J_type > r (
          J_traits::create (i, f, this));

        if (!this->J ())
        {
          this->J (r);
          continue;
        }
      }

      // Seed
      //
      if (n.name () == "Seed" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Seed_type > r (
          Seed_traits::create (i, f, this));

        if (!this->Seed ())
        {
          this->Seed (r);
          continue;
        }
      }

      // PgenCounter
      //
      if (n.name () == "PgenCounter" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< PgenCounter_type > r (
          PgenCounter_traits::create (i, f, this));

        if (!this->PgenCounter ())
        {
          this->PgenCounter (r);
          continue;
        }
      }

      break;
    }

    if (!Y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Y",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  DSAKeyValueType* DSAKeyValueType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new DSAKeyValueType (*this, f, c);
  }

  DSAKeyValueType::
  ~DSAKeyValueType ()
  {
  }

  // RSAKeyValueType
  //

  RSAKeyValueType::
  RSAKeyValueType (const Modulus_type& Modulus,
                   const Exponent_type& Exponent)
  : ::xml_schema::type (),
    Modulus_ (Modulus, ::xml_schema::flags (), this),
    Exponent_ (Exponent, ::xml_schema::flags (), this)
  {
  }

  RSAKeyValueType::
  RSAKeyValueType (const RSAKeyValueType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    Modulus_ (x.Modulus_, f, this),
    Exponent_ (x.Exponent_, f, this)
  {
  }

  RSAKeyValueType::
  RSAKeyValueType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    Modulus_ (f, this),
    Exponent_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void RSAKeyValueType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // Modulus
      //
      if (n.name () == "Modulus" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Modulus_type > r (
          Modulus_traits::create (i, f, this));

        if (!Modulus_.present ())
        {
          this->Modulus (r);
          continue;
        }
      }

      // Exponent
      //
      if (n.name () == "Exponent" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Exponent_type > r (
          Exponent_traits::create (i, f, this));

        if (!Exponent_.present ())
        {
          this->Exponent (r);
          continue;
        }
      }

      break;
    }

    if (!Modulus_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Modulus",
        "http://www.w3.org/2000/09/xmldsig#");
    }

    if (!Exponent_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "Exponent",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  RSAKeyValueType* RSAKeyValueType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new RSAKeyValueType (*this, f, c);
  }

  RSAKeyValueType::
  ~RSAKeyValueType ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace dsig
{
  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignatureType > r (
      ::dsig::Signature (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureType > r (
      ::dsig::Signature (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureType > r (
      ::dsig::Signature (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Signature (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Signature (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Signature (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Signature (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Signature (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Signature (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignatureType > r (
      ::dsig::Signature (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureType > r (
      ::dsig::Signature (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureType > r (
      ::dsig::Signature (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SignatureType > r (
        ::dsig::Signature (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Signature" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignatureType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignatureType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Signature",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignatureType >
  Signature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Signature" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignatureType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignatureType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Signature",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignatureValueType > r (
      ::dsig::SignatureValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureValueType > r (
      ::dsig::SignatureValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureValueType > r (
      ::dsig::SignatureValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignatureValueType > r (
      ::dsig::SignatureValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureValueType > r (
      ::dsig::SignatureValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureValueType > r (
      ::dsig::SignatureValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SignatureValueType > r (
        ::dsig::SignatureValue (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignatureValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignatureValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignatureValueType >
  SignatureValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SignatureValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignatureValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignatureValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignedInfoType > r (
      ::dsig::SignedInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignedInfoType > r (
      ::dsig::SignedInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignedInfoType > r (
      ::dsig::SignedInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignedInfo (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignedInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignedInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignedInfo (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignedInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignedInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignedInfoType > r (
      ::dsig::SignedInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignedInfoType > r (
      ::dsig::SignedInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignedInfoType > r (
      ::dsig::SignedInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SignedInfoType > r (
        ::dsig::SignedInfo (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignedInfo" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignedInfoType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignedInfoType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignedInfo",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignedInfoType >
  SignedInfo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SignedInfo" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignedInfoType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignedInfoType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignedInfo",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
      ::dsig::CanonicalizationMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
      ::dsig::CanonicalizationMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
      ::dsig::CanonicalizationMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::CanonicalizationMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::CanonicalizationMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::CanonicalizationMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::CanonicalizationMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::CanonicalizationMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::CanonicalizationMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
      ::dsig::CanonicalizationMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
      ::dsig::CanonicalizationMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
      ::dsig::CanonicalizationMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
        ::dsig::CanonicalizationMethod (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CanonicalizationMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::CanonicalizationMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CanonicalizationMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::CanonicalizationMethodType >
  CanonicalizationMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CanonicalizationMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::CanonicalizationMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::CanonicalizationMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CanonicalizationMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignatureMethodType > r (
      ::dsig::SignatureMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureMethodType > r (
      ::dsig::SignatureMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureMethodType > r (
      ::dsig::SignatureMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignatureMethodType > r (
      ::dsig::SignatureMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureMethodType > r (
      ::dsig::SignatureMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignatureMethodType > r (
      ::dsig::SignatureMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SignatureMethodType > r (
        ::dsig::SignatureMethod (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignatureMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignatureMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignatureMethodType >
  SignatureMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SignatureMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignatureMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignatureMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::ReferenceType > r (
      ::dsig::Reference (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ReferenceType > r (
      ::dsig::Reference (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ReferenceType > r (
      ::dsig::Reference (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Reference (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Reference (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Reference (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Reference (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Reference (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Reference (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::ReferenceType > r (
      ::dsig::Reference (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ReferenceType > r (
      ::dsig::Reference (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ReferenceType > r (
      ::dsig::Reference (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::ReferenceType > r (
        ::dsig::Reference (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Reference" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::ReferenceType > r (
        ::xsd::cxx::tree::traits< ::dsig::ReferenceType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Reference",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::ReferenceType >
  Reference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Reference" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::ReferenceType > r (
        ::xsd::cxx::tree::traits< ::dsig::ReferenceType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Reference",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::TransformsType > r (
      ::dsig::Transforms (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformsType > r (
      ::dsig::Transforms (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformsType > r (
      ::dsig::Transforms (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Transforms (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Transforms (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Transforms (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Transforms (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Transforms (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Transforms (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::TransformsType > r (
      ::dsig::Transforms (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformsType > r (
      ::dsig::Transforms (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformsType > r (
      ::dsig::Transforms (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::TransformsType > r (
        ::dsig::Transforms (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Transforms" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::TransformsType > r (
        ::xsd::cxx::tree::traits< ::dsig::TransformsType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Transforms",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::TransformsType >
  Transforms (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Transforms" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::TransformsType > r (
        ::xsd::cxx::tree::traits< ::dsig::TransformsType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Transforms",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::TransformType > r (
      ::dsig::Transform (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformType > r (
      ::dsig::Transform (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformType > r (
      ::dsig::Transform (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Transform (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Transform (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Transform (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Transform (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Transform (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Transform (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::TransformType > r (
      ::dsig::Transform (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformType > r (
      ::dsig::Transform (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::TransformType > r (
      ::dsig::Transform (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::TransformType > r (
        ::dsig::Transform (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Transform" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::TransformType > r (
        ::xsd::cxx::tree::traits< ::dsig::TransformType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Transform",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::TransformType >
  Transform (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Transform" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::TransformType > r (
        ::xsd::cxx::tree::traits< ::dsig::TransformType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Transform",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::DigestMethodType > r (
      ::dsig::DigestMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestMethodType > r (
      ::dsig::DigestMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestMethodType > r (
      ::dsig::DigestMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DigestMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DigestMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DigestMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DigestMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DigestMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DigestMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::DigestMethodType > r (
      ::dsig::DigestMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestMethodType > r (
      ::dsig::DigestMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestMethodType > r (
      ::dsig::DigestMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::DigestMethodType > r (
        ::dsig::DigestMethod (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DigestMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::DigestMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::DigestMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DigestMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::DigestMethodType >
  DigestMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DigestMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::DigestMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::DigestMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DigestMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::DigestValueType > r (
      ::dsig::DigestValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestValueType > r (
      ::dsig::DigestValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestValueType > r (
      ::dsig::DigestValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DigestValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DigestValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DigestValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DigestValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DigestValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DigestValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::DigestValueType > r (
      ::dsig::DigestValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestValueType > r (
      ::dsig::DigestValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DigestValueType > r (
      ::dsig::DigestValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::DigestValueType > r (
        ::dsig::DigestValue (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DigestValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::DigestValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::DigestValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DigestValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::DigestValueType >
  DigestValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DigestValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::DigestValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::DigestValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DigestValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::KeyInfoType > r (
      ::dsig::KeyInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyInfoType > r (
      ::dsig::KeyInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyInfoType > r (
      ::dsig::KeyInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyInfo (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyInfo (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyInfo (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::KeyInfoType > r (
      ::dsig::KeyInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyInfoType > r (
      ::dsig::KeyInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyInfoType > r (
      ::dsig::KeyInfo (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::KeyInfoType > r (
        ::dsig::KeyInfo (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeyInfo" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::KeyInfoType > r (
        ::xsd::cxx::tree::traits< ::dsig::KeyInfoType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeyInfo",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::KeyInfoType >
  KeyInfo (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "KeyInfo" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::KeyInfoType > r (
        ::xsd::cxx::tree::traits< ::dsig::KeyInfoType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeyInfo",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::KeyName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::KeyName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::KeyName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::KeyName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::KeyName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::KeyName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::dsig::KeyName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeyName" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeyName",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::xml_schema::string >
  KeyName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "KeyName" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeyName",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::MgmtData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::MgmtData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::MgmtData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::MgmtData (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::MgmtData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::MgmtData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::MgmtData (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::MgmtData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::MgmtData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::MgmtData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::MgmtData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::dsig::MgmtData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::dsig::MgmtData (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MgmtData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MgmtData",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::xml_schema::string >
  MgmtData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MgmtData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MgmtData",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::KeyValueType > r (
      ::dsig::KeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyValueType > r (
      ::dsig::KeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyValueType > r (
      ::dsig::KeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::KeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::KeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::KeyValueType > r (
      ::dsig::KeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyValueType > r (
      ::dsig::KeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::KeyValueType > r (
      ::dsig::KeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::KeyValueType > r (
        ::dsig::KeyValue (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::KeyValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::KeyValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeyValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::KeyValueType >
  KeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "KeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::KeyValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::KeyValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "KeyValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
      ::dsig::RetrievalMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
      ::dsig::RetrievalMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
      ::dsig::RetrievalMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::RetrievalMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::RetrievalMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::RetrievalMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::RetrievalMethod (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::RetrievalMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::RetrievalMethod (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
      ::dsig::RetrievalMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
      ::dsig::RetrievalMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
      ::dsig::RetrievalMethod (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
        ::dsig::RetrievalMethod (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "RetrievalMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::RetrievalMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "RetrievalMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::RetrievalMethodType >
  RetrievalMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "RetrievalMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::RetrievalMethodType > r (
        ::xsd::cxx::tree::traits< ::dsig::RetrievalMethodType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "RetrievalMethod",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::X509DataType > r (
      ::dsig::X509Data (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::X509DataType > r (
      ::dsig::X509Data (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::X509DataType > r (
      ::dsig::X509Data (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::X509Data (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::X509Data (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::X509Data (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::X509Data (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::X509Data (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::X509Data (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::X509DataType > r (
      ::dsig::X509Data (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::X509DataType > r (
      ::dsig::X509Data (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::X509DataType > r (
      ::dsig::X509Data (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::X509DataType > r (
        ::dsig::X509Data (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "X509Data" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::X509DataType > r (
        ::xsd::cxx::tree::traits< ::dsig::X509DataType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "X509Data",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::X509DataType >
  X509Data (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "X509Data" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::X509DataType > r (
        ::xsd::cxx::tree::traits< ::dsig::X509DataType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "X509Data",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::PGPDataType > r (
      ::dsig::PGPData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::PGPDataType > r (
      ::dsig::PGPData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::PGPDataType > r (
      ::dsig::PGPData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::PGPData (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::PGPData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::PGPData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::PGPData (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::PGPData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::PGPData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::PGPDataType > r (
      ::dsig::PGPData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::PGPDataType > r (
      ::dsig::PGPData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::PGPDataType > r (
      ::dsig::PGPData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::PGPDataType > r (
        ::dsig::PGPData (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PGPData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::PGPDataType > r (
        ::xsd::cxx::tree::traits< ::dsig::PGPDataType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PGPData",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::PGPDataType >
  PGPData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PGPData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::PGPDataType > r (
        ::xsd::cxx::tree::traits< ::dsig::PGPDataType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PGPData",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SPKIDataType > r (
      ::dsig::SPKIData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SPKIDataType > r (
      ::dsig::SPKIData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SPKIDataType > r (
      ::dsig::SPKIData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SPKIData (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SPKIData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SPKIData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SPKIData (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SPKIData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SPKIData (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SPKIDataType > r (
      ::dsig::SPKIData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SPKIDataType > r (
      ::dsig::SPKIData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SPKIDataType > r (
      ::dsig::SPKIData (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SPKIDataType > r (
        ::dsig::SPKIData (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SPKIData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SPKIDataType > r (
        ::xsd::cxx::tree::traits< ::dsig::SPKIDataType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SPKIData",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SPKIDataType >
  SPKIData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SPKIData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SPKIDataType > r (
        ::xsd::cxx::tree::traits< ::dsig::SPKIDataType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SPKIData",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::ObjectType > r (
      ::dsig::Object (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ObjectType > r (
      ::dsig::Object (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ObjectType > r (
      ::dsig::Object (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Object (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Object (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Object (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Object (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Object (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Object (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::ObjectType > r (
      ::dsig::Object (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ObjectType > r (
      ::dsig::Object (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ObjectType > r (
      ::dsig::Object (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::ObjectType > r (
        ::dsig::Object (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Object" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::ObjectType > r (
        ::xsd::cxx::tree::traits< ::dsig::ObjectType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Object",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::ObjectType >
  Object (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Object" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::ObjectType > r (
        ::xsd::cxx::tree::traits< ::dsig::ObjectType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Object",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::ManifestType > r (
      ::dsig::Manifest (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ManifestType > r (
      ::dsig::Manifest (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ManifestType > r (
      ::dsig::Manifest (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Manifest (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Manifest (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::Manifest (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Manifest (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Manifest (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::Manifest (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::ManifestType > r (
      ::dsig::Manifest (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ManifestType > r (
      ::dsig::Manifest (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::ManifestType > r (
      ::dsig::Manifest (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::ManifestType > r (
        ::dsig::Manifest (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Manifest" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::ManifestType > r (
        ::xsd::cxx::tree::traits< ::dsig::ManifestType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Manifest",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::ManifestType >
  Manifest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Manifest" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::ManifestType > r (
        ::xsd::cxx::tree::traits< ::dsig::ManifestType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Manifest",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
      ::dsig::SignatureProperties (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
      ::dsig::SignatureProperties (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
      ::dsig::SignatureProperties (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureProperties (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureProperties (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureProperties (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureProperties (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureProperties (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureProperties (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
      ::dsig::SignatureProperties (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
      ::dsig::SignatureProperties (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
      ::dsig::SignatureProperties (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
        ::dsig::SignatureProperties (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureProperties" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignaturePropertiesType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureProperties",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignaturePropertiesType >
  SignatureProperties (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SignatureProperties" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignaturePropertiesType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignaturePropertiesType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureProperties",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
      ::dsig::SignatureProperty (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
      ::dsig::SignatureProperty (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
      ::dsig::SignatureProperty (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureProperty (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureProperty (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::SignatureProperty (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureProperty (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureProperty (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::SignatureProperty (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
      ::dsig::SignatureProperty (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
      ::dsig::SignatureProperty (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
      ::dsig::SignatureProperty (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
        ::dsig::SignatureProperty (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureProperty" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignaturePropertyType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureProperty",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::SignaturePropertyType >
  SignatureProperty (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "SignatureProperty" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::SignaturePropertyType > r (
        ::xsd::cxx::tree::traits< ::dsig::SignaturePropertyType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "SignatureProperty",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
      ::dsig::DSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
      ::dsig::DSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
      ::dsig::DSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DSAKeyValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::DSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DSAKeyValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::DSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
      ::dsig::DSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
      ::dsig::DSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
      ::dsig::DSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
        ::dsig::DSAKeyValue (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DSAKeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::DSAKeyValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DSAKeyValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::DSAKeyValueType >
  DSAKeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DSAKeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::DSAKeyValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::DSAKeyValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DSAKeyValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
      ::dsig::RSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
      ::dsig::RSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
      ::dsig::RSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::RSAKeyValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::RSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::dsig::RSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::RSAKeyValue (isrc, f, p);
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::RSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::dsig::RSAKeyValue (isrc, h, f, p);
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
      ::dsig::RSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
      ::dsig::RSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
      ::dsig::RSAKeyValue (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
        ::dsig::RSAKeyValue (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "RSAKeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::RSAKeyValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "RSAKeyValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }

  ::std::auto_ptr< ::dsig::RSAKeyValueType >
  RSAKeyValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "RSAKeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      ::std::auto_ptr< ::dsig::RSAKeyValueType > r (
        ::xsd::cxx::tree::traits< ::dsig::RSAKeyValueType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "RSAKeyValue",
      "http://www.w3.org/2000/09/xmldsig#");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace dsig
{
  void
  operator<< (::xercesc::DOMElement& e, const CryptoBinary& i)
  {
    e << static_cast< const ::xml_schema::base64_binary& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a,const CryptoBinary& i)
  {
    a << static_cast< const ::xml_schema::base64_binary& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CryptoBinary& i)
  {
    l << static_cast< const ::xml_schema::base64_binary& > (i);
  }

  void
  Signature (::std::ostream& o,
             const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Signature (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Signature (::std::ostream& o,
             const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Signature (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Signature (::std::ostream& o,
             const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Signature (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Signature (::xercesc::XMLFormatTarget& t,
             const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Signature (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Signature (::xercesc::XMLFormatTarget& t,
             const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Signature (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Signature (::xercesc::XMLFormatTarget& t,
             const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Signature (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Signature (::xercesc::DOMDocument& d,
             const ::dsig::SignatureType& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Signature" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Signature",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Signature (const ::dsig::SignatureType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Signature",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::Signature (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignatureType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // SignedInfo
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignedInfo",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.SignedInfo ();
    }

    // SignatureValue
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignatureValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.SignatureValue ();
    }

    // KeyInfo
    //
    if (i.KeyInfo ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "KeyInfo",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.KeyInfo ();
    }

    // Object
    //
    for (SignatureType::Object_const_iterator
         b (i.Object ().begin ()), n (i.Object ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Object",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  SignatureValue (::std::ostream& o,
                  const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureValue (::std::ostream& o,
                  const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureValue (::std::ostream& o,
                  const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureValue (::xercesc::XMLFormatTarget& t,
                  const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureValue (::xercesc::XMLFormatTarget& t,
                  const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureValue (::xercesc::XMLFormatTarget& t,
                  const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureValue (::xercesc::DOMDocument& d,
                  const ::dsig::SignatureValueType& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SignatureValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureValue (const ::dsig::SignatureValueType& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SignatureValue",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::SignatureValue (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignatureValueType& i)
  {
    e << static_cast< const ::xml_schema::base64_binary& > (i);

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  SignedInfo (::std::ostream& o,
              const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignedInfo (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignedInfo (::std::ostream& o,
              const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignedInfo (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignedInfo (::std::ostream& o,
              const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignedInfo (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignedInfo (::xercesc::XMLFormatTarget& t,
              const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignedInfo (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignedInfo (::xercesc::XMLFormatTarget& t,
              const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignedInfo (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignedInfo (::xercesc::XMLFormatTarget& t,
              const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignedInfo (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignedInfo (::xercesc::DOMDocument& d,
              const ::dsig::SignedInfoType& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignedInfo" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SignedInfo",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignedInfo (const ::dsig::SignedInfoType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SignedInfo",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::SignedInfo (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignedInfoType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // CanonicalizationMethod
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CanonicalizationMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.CanonicalizationMethod ();
    }

    // SignatureMethod
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignatureMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.SignatureMethod ();
    }

    // Reference
    //
    for (SignedInfoType::Reference_const_iterator
         b (i.Reference ().begin ()), n (i.Reference ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Reference",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  CanonicalizationMethod (::std::ostream& o,
                          const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::CanonicalizationMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CanonicalizationMethod (::std::ostream& o,
                          const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::CanonicalizationMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CanonicalizationMethod (::std::ostream& o,
                          const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::CanonicalizationMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                          const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::CanonicalizationMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                          const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::CanonicalizationMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CanonicalizationMethod (::xercesc::XMLFormatTarget& t,
                          const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::CanonicalizationMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CanonicalizationMethod (::xercesc::DOMDocument& d,
                          const ::dsig::CanonicalizationMethodType& s,
                          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CanonicalizationMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CanonicalizationMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CanonicalizationMethod (const ::dsig::CanonicalizationMethodType& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CanonicalizationMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::CanonicalizationMethod (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CanonicalizationMethodType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Algorithm
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Algorithm",
          e));

      a << i.Algorithm ();
    }
  }

  void
  SignatureMethod (::std::ostream& o,
                   const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureMethod (::std::ostream& o,
                   const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureMethod (::std::ostream& o,
                   const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureMethod (::xercesc::XMLFormatTarget& t,
                   const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureMethod (::xercesc::XMLFormatTarget& t,
                   const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureMethod (::xercesc::XMLFormatTarget& t,
                   const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureMethod (::xercesc::DOMDocument& d,
                   const ::dsig::SignatureMethodType& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SignatureMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureMethod (const ::dsig::SignatureMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SignatureMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::SignatureMethod (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignatureMethodType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // HMACOutputLength
    //
    if (i.HMACOutputLength ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "HMACOutputLength",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.HMACOutputLength ();
    }

    // Algorithm
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Algorithm",
          e));

      a << i.Algorithm ();
    }
  }

  void
  Reference (::std::ostream& o,
             const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Reference (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Reference (::std::ostream& o,
             const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Reference (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Reference (::std::ostream& o,
             const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Reference (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Reference (::xercesc::XMLFormatTarget& t,
             const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Reference (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Reference (::xercesc::XMLFormatTarget& t,
             const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Reference (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Reference (::xercesc::XMLFormatTarget& t,
             const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Reference (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Reference (::xercesc::DOMDocument& d,
             const ::dsig::ReferenceType& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Reference" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Reference",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Reference (const ::dsig::ReferenceType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Reference",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::Reference (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ReferenceType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Transforms
    //
    if (i.Transforms ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Transforms",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.Transforms ();
    }

    // DigestMethod
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.DigestMethod ();
    }

    // DigestValue
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DigestValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.DigestValue ();
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }

    // URI
    //
    if (i.URI ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << *i.URI ();
    }

    // Type
    //
    if (i.Type ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Type",
          e));

      a << *i.Type ();
    }
  }

  void
  Transforms (::std::ostream& o,
              const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transforms (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Transforms (::std::ostream& o,
              const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transforms (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transforms (::std::ostream& o,
              const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transforms (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transforms (::xercesc::XMLFormatTarget& t,
              const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transforms (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Transforms (::xercesc::XMLFormatTarget& t,
              const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transforms (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transforms (::xercesc::XMLFormatTarget& t,
              const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transforms (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transforms (::xercesc::DOMDocument& d,
              const ::dsig::TransformsType& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Transforms" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Transforms",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Transforms (const ::dsig::TransformsType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Transforms",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::Transforms (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const TransformsType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Transform
    //
    for (TransformsType::Transform_const_iterator
         b (i.Transform ().begin ()), n (i.Transform ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Transform",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }
  }

  void
  Transform (::std::ostream& o,
             const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transform (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Transform (::std::ostream& o,
             const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transform (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transform (::std::ostream& o,
             const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transform (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transform (::xercesc::XMLFormatTarget& t,
             const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transform (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Transform (::xercesc::XMLFormatTarget& t,
             const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transform (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transform (::xercesc::XMLFormatTarget& t,
             const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Transform (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Transform (::xercesc::DOMDocument& d,
             const ::dsig::TransformType& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Transform" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Transform",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Transform (const ::dsig::TransformType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Transform",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::Transform (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const TransformType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // XPath
    //
    for (TransformType::XPath_const_iterator
         b (i.XPath ().begin ()), n (i.XPath ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "XPath",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // Algorithm
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Algorithm",
          e));

      a << i.Algorithm ();
    }
  }

  void
  DigestMethod (::std::ostream& o,
                const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DigestMethod (::std::ostream& o,
                const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestMethod (::std::ostream& o,
                const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestMethod (::xercesc::XMLFormatTarget& t,
                const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DigestMethod (::xercesc::XMLFormatTarget& t,
                const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestMethod (::xercesc::XMLFormatTarget& t,
                const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestMethod (::xercesc::DOMDocument& d,
                const ::dsig::DigestMethodType& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DigestMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DigestMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DigestMethod (const ::dsig::DigestMethodType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DigestMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::DigestMethod (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DigestMethodType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Algorithm
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Algorithm",
          e));

      a << i.Algorithm ();
    }
  }

  void
  DigestValue (::std::ostream& o,
               const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DigestValue (::std::ostream& o,
               const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestValue (::std::ostream& o,
               const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DigestValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DigestValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DigestValue (::xercesc::DOMDocument& d,
               const ::dsig::DigestValueType& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DigestValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DigestValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DigestValue (const ::dsig::DigestValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DigestValue",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::DigestValue (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DigestValueType& i)
  {
    e << static_cast< const ::xml_schema::base64_binary& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a,const DigestValueType& i)
  {
    a << static_cast< const ::xml_schema::base64_binary& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const DigestValueType& i)
  {
    l << static_cast< const ::xml_schema::base64_binary& > (i);
  }

  void
  KeyInfo (::std::ostream& o,
           const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyInfo (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  KeyInfo (::std::ostream& o,
           const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyInfo (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyInfo (::std::ostream& o,
           const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyInfo (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyInfo (::xercesc::XMLFormatTarget& t,
           const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyInfo (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  KeyInfo (::xercesc::XMLFormatTarget& t,
           const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyInfo (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyInfo (::xercesc::XMLFormatTarget& t,
           const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyInfo (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyInfo (::xercesc::DOMDocument& d,
           const ::dsig::KeyInfoType& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeyInfo" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "KeyInfo",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  KeyInfo (const ::dsig::KeyInfoType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "KeyInfo",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::KeyInfo (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const KeyInfoType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // KeyName
    //
    for (KeyInfoType::KeyName_const_iterator
         b (i.KeyName ().begin ()), n (i.KeyName ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "KeyName",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // KeyValue
    //
    for (KeyInfoType::KeyValue_const_iterator
         b (i.KeyValue ().begin ()), n (i.KeyValue ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "KeyValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // RetrievalMethod
    //
    for (KeyInfoType::RetrievalMethod_const_iterator
         b (i.RetrievalMethod ().begin ()), n (i.RetrievalMethod ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RetrievalMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // X509Data
    //
    for (KeyInfoType::X509Data_const_iterator
         b (i.X509Data ().begin ()), n (i.X509Data ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509Data",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // PGPData
    //
    for (KeyInfoType::PGPData_const_iterator
         b (i.PGPData ().begin ()), n (i.PGPData ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PGPData",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // SPKIData
    //
    for (KeyInfoType::SPKIData_const_iterator
         b (i.SPKIData ().begin ()), n (i.SPKIData ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SPKIData",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // MgmtData
    //
    for (KeyInfoType::MgmtData_const_iterator
         b (i.MgmtData ().begin ()), n (i.MgmtData ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MgmtData",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  KeyName (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  KeyName (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyName (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyName (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  KeyName (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyName (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyName (::xercesc::DOMDocument& d,
           const ::xml_schema::string& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeyName" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "KeyName",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  KeyName (const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "KeyName",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::KeyName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  MgmtData (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::MgmtData (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MgmtData (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::MgmtData (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MgmtData (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::MgmtData (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MgmtData (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::MgmtData (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MgmtData (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::MgmtData (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MgmtData (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::MgmtData (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MgmtData (::xercesc::DOMDocument& d,
            const ::xml_schema::string& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MgmtData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MgmtData",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  MgmtData (const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "MgmtData",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::MgmtData (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  KeyValue (::std::ostream& o,
            const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  KeyValue (::std::ostream& o,
            const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyValue (::std::ostream& o,
            const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyValue (::xercesc::XMLFormatTarget& t,
            const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  KeyValue (::xercesc::XMLFormatTarget& t,
            const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyValue (::xercesc::XMLFormatTarget& t,
            const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::KeyValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  KeyValue (::xercesc::DOMDocument& d,
            const ::dsig::KeyValueType& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "KeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "KeyValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  KeyValue (const ::dsig::KeyValueType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "KeyValue",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::KeyValue (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const KeyValueType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // DSAKeyValue
    //
    if (i.DSAKeyValue ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DSAKeyValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.DSAKeyValue ();
    }

    // RSAKeyValue
    //
    if (i.RSAKeyValue ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "RSAKeyValue",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.RSAKeyValue ();
    }
  }

  void
  RetrievalMethod (::std::ostream& o,
                   const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RetrievalMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  RetrievalMethod (::std::ostream& o,
                   const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RetrievalMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RetrievalMethod (::std::ostream& o,
                   const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RetrievalMethod (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RetrievalMethod (::xercesc::XMLFormatTarget& t,
                   const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RetrievalMethod (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  RetrievalMethod (::xercesc::XMLFormatTarget& t,
                   const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RetrievalMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RetrievalMethod (::xercesc::XMLFormatTarget& t,
                   const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RetrievalMethod (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RetrievalMethod (::xercesc::DOMDocument& d,
                   const ::dsig::RetrievalMethodType& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "RetrievalMethod" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RetrievalMethod",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  RetrievalMethod (const ::dsig::RetrievalMethodType& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "RetrievalMethod",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::RetrievalMethod (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const RetrievalMethodType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Transforms
    //
    if (i.Transforms ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Transforms",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.Transforms ();
    }

    // URI
    //
    if (i.URI ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "URI",
          e));

      a << *i.URI ();
    }

    // Type
    //
    if (i.Type ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Type",
          e));

      a << *i.Type ();
    }
  }

  void
  X509Data (::std::ostream& o,
            const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::X509Data (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  X509Data (::std::ostream& o,
            const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::X509Data (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  X509Data (::std::ostream& o,
            const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::X509Data (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  X509Data (::xercesc::XMLFormatTarget& t,
            const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::X509Data (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  X509Data (::xercesc::XMLFormatTarget& t,
            const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::X509Data (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  X509Data (::xercesc::XMLFormatTarget& t,
            const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::X509Data (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  X509Data (::xercesc::DOMDocument& d,
            const ::dsig::X509DataType& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "X509Data" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "X509Data",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  X509Data (const ::dsig::X509DataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "X509Data",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::X509Data (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const X509DataType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // X509IssuerSerial
    //
    for (X509DataType::X509IssuerSerial_const_iterator
         b (i.X509IssuerSerial ().begin ()), n (i.X509IssuerSerial ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509IssuerSerial",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // X509SKI
    //
    for (X509DataType::X509SKI_const_iterator
         b (i.X509SKI ().begin ()), n (i.X509SKI ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509SKI",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // X509SubjectName
    //
    for (X509DataType::X509SubjectName_const_iterator
         b (i.X509SubjectName ().begin ()), n (i.X509SubjectName ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509SubjectName",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // X509Certificate
    //
    for (X509DataType::X509Certificate_const_iterator
         b (i.X509Certificate ().begin ()), n (i.X509Certificate ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509Certificate",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // X509CRL
    //
    for (X509DataType::X509CRL_const_iterator
         b (i.X509CRL ().begin ()), n (i.X509CRL ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509CRL",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const X509IssuerSerialType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // X509IssuerName
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509IssuerName",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.X509IssuerName ();
    }

    // X509SerialNumber
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "X509SerialNumber",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.X509SerialNumber ();
    }
  }

  void
  PGPData (::std::ostream& o,
           const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::PGPData (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PGPData (::std::ostream& o,
           const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::PGPData (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PGPData (::std::ostream& o,
           const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::PGPData (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PGPData (::xercesc::XMLFormatTarget& t,
           const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::PGPData (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PGPData (::xercesc::XMLFormatTarget& t,
           const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::PGPData (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PGPData (::xercesc::XMLFormatTarget& t,
           const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::PGPData (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PGPData (::xercesc::DOMDocument& d,
           const ::dsig::PGPDataType& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PGPData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PGPData",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  PGPData (const ::dsig::PGPDataType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "PGPData",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::PGPData (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const PGPDataType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // PGPKeyID
    //
    if (i.PGPKeyID ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PGPKeyID",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.PGPKeyID ();
    }

    // PGPKeyPacket
    //
    if (i.PGPKeyPacket ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PGPKeyPacket",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.PGPKeyPacket ();
    }
  }

  void
  SPKIData (::std::ostream& o,
            const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SPKIData (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SPKIData (::std::ostream& o,
            const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SPKIData (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SPKIData (::std::ostream& o,
            const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SPKIData (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SPKIData (::xercesc::XMLFormatTarget& t,
            const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SPKIData (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SPKIData (::xercesc::XMLFormatTarget& t,
            const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SPKIData (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SPKIData (::xercesc::XMLFormatTarget& t,
            const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SPKIData (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SPKIData (::xercesc::DOMDocument& d,
            const ::dsig::SPKIDataType& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SPKIData" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SPKIData",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SPKIData (const ::dsig::SPKIDataType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SPKIData",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::SPKIData (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SPKIDataType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // SPKISexp
    //
    for (SPKIDataType::SPKISexp_const_iterator
         b (i.SPKISexp ().begin ()), n (i.SPKISexp ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SPKISexp",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }
  }

  void
  Object (::std::ostream& o,
          const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Object (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Object (::std::ostream& o,
          const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Object (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Object (::std::ostream& o,
          const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Object (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Object (::xercesc::XMLFormatTarget& t,
          const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Object (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Object (::xercesc::XMLFormatTarget& t,
          const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Object (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Object (::xercesc::XMLFormatTarget& t,
          const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Object (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Object (::xercesc::DOMDocument& d,
          const ::dsig::ObjectType& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Object" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Object",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Object (const ::dsig::ObjectType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Object",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::Object (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ObjectType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }

    // MimeType
    //
    if (i.MimeType ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "MimeType",
          e));

      a << *i.MimeType ();
    }

    // Encoding
    //
    if (i.Encoding ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Encoding",
          e));

      a << *i.Encoding ();
    }
  }

  void
  Manifest (::std::ostream& o,
            const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Manifest (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Manifest (::std::ostream& o,
            const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Manifest (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Manifest (::std::ostream& o,
            const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Manifest (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Manifest (::xercesc::XMLFormatTarget& t,
            const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Manifest (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Manifest (::xercesc::XMLFormatTarget& t,
            const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Manifest (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Manifest (::xercesc::XMLFormatTarget& t,
            const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::Manifest (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Manifest (::xercesc::DOMDocument& d,
            const ::dsig::ManifestType& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Manifest" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Manifest",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Manifest (const ::dsig::ManifestType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Manifest",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::Manifest (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ManifestType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Reference
    //
    for (ManifestType::Reference_const_iterator
         b (i.Reference ().begin ()), n (i.Reference ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Reference",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  SignatureProperties (::std::ostream& o,
                       const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperties (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureProperties (::std::ostream& o,
                       const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperties (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperties (::std::ostream& o,
                       const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperties (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperties (::xercesc::XMLFormatTarget& t,
                       const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperties (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureProperties (::xercesc::XMLFormatTarget& t,
                       const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperties (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperties (::xercesc::XMLFormatTarget& t,
                       const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperties (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperties (::xercesc::DOMDocument& d,
                       const ::dsig::SignaturePropertiesType& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureProperties" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SignatureProperties",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureProperties (const ::dsig::SignaturePropertiesType& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SignatureProperties",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::SignatureProperties (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignaturePropertiesType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // SignatureProperty
    //
    for (SignaturePropertiesType::SignatureProperty_const_iterator
         b (i.SignatureProperty ().begin ()), n (i.SignatureProperty ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "SignatureProperty",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *b;
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  SignatureProperty (::std::ostream& o,
                     const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperty (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureProperty (::std::ostream& o,
                     const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperty (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperty (::std::ostream& o,
                     const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperty (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperty (::xercesc::XMLFormatTarget& t,
                     const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperty (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  SignatureProperty (::xercesc::XMLFormatTarget& t,
                     const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperty (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperty (::xercesc::XMLFormatTarget& t,
                     const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::SignatureProperty (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  SignatureProperty (::xercesc::DOMDocument& d,
                     const ::dsig::SignaturePropertyType& s,
                     ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "SignatureProperty" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "SignatureProperty",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  SignatureProperty (const ::dsig::SignaturePropertyType& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "SignatureProperty",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::SignatureProperty (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SignaturePropertyType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Target
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Target",
          e));

      a << i.Target ();
    }

    // Id
    //
    if (i.Id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "Id",
          e));

      a << *i.Id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const HMACOutputLengthType& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a,const HMACOutputLengthType& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const HMACOutputLengthType& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
  }

  void
  DSAKeyValue (::std::ostream& o,
               const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DSAKeyValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DSAKeyValue (::std::ostream& o,
               const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DSAKeyValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DSAKeyValue (::std::ostream& o,
               const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DSAKeyValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DSAKeyValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DSAKeyValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DSAKeyValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DSAKeyValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DSAKeyValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::DSAKeyValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DSAKeyValue (::xercesc::DOMDocument& d,
               const ::dsig::DSAKeyValueType& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DSAKeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DSAKeyValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DSAKeyValue (const ::dsig::DSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DSAKeyValue",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::DSAKeyValue (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DSAKeyValueType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // P
    //
    if (i.P ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "P",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.P ();
    }

    // Q
    //
    if (i.Q ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Q",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.Q ();
    }

    // G
    //
    if (i.G ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "G",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.G ();
    }

    // Y
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Y",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.Y ();
    }

    // J
    //
    if (i.J ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "J",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.J ();
    }

    // Seed
    //
    if (i.Seed ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Seed",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.Seed ();
    }

    // PgenCounter
    //
    if (i.PgenCounter ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "PgenCounter",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.PgenCounter ();
    }
  }

  void
  RSAKeyValue (::std::ostream& o,
               const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RSAKeyValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  RSAKeyValue (::std::ostream& o,
               const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RSAKeyValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RSAKeyValue (::std::ostream& o,
               const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RSAKeyValue (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RSAKeyValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RSAKeyValue (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  RSAKeyValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RSAKeyValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RSAKeyValue (::xercesc::XMLFormatTarget& t,
               const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::dsig::RSAKeyValue (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  RSAKeyValue (::xercesc::DOMDocument& d,
               const ::dsig::RSAKeyValueType& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "RSAKeyValue" &&
        n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "RSAKeyValue",
        "http://www.w3.org/2000/09/xmldsig#");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  RSAKeyValue (const ::dsig::RSAKeyValueType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "RSAKeyValue",
          "http://www.w3.org/2000/09/xmldsig#",
          m, f));

      ::dsig::RSAKeyValue (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const RSAKeyValueType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // Modulus
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Modulus",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.Modulus ();
    }

    // Exponent
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Exponent",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << i.Exponent ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

