// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "jsdl.hpp"

namespace jsdl
{
  // ProcessorArchitectureEnumeration
  // 

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (value v)
  : ::xml_schema::string (_xsd_ProcessorArchitectureEnumeration_literals_[v])
  {
  }

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const char* v)
  : ::xml_schema::string (v)
  {
  }

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const ProcessorArchitectureEnumeration& v,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  ProcessorArchitectureEnumeration& ProcessorArchitectureEnumeration::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_ProcessorArchitectureEnumeration_literals_[v]);

    return *this;
  }


  // OperatingSystemTypeEnumeration
  // 

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (value v)
  : ::xml_schema::string (_xsd_OperatingSystemTypeEnumeration_literals_[v])
  {
  }

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const char* v)
  : ::xml_schema::string (v)
  {
  }

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const OperatingSystemTypeEnumeration& v,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  OperatingSystemTypeEnumeration& OperatingSystemTypeEnumeration::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_OperatingSystemTypeEnumeration_literals_[v]);

    return *this;
  }


  // FileSystemTypeEnumeration
  // 

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (value v)
  : ::xml_schema::string (_xsd_FileSystemTypeEnumeration_literals_[v])
  {
  }

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const char* v)
  : ::xml_schema::string (v)
  {
  }

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const FileSystemTypeEnumeration& v,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  FileSystemTypeEnumeration& FileSystemTypeEnumeration::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_FileSystemTypeEnumeration_literals_[v]);

    return *this;
  }


  // CreationFlagEnumeration
  // 

  CreationFlagEnumeration::
  CreationFlagEnumeration (value v)
  : ::xml_schema::string (_xsd_CreationFlagEnumeration_literals_[v])
  {
  }

  CreationFlagEnumeration::
  CreationFlagEnumeration (const char* v)
  : ::xml_schema::string (v)
  {
  }

  CreationFlagEnumeration::
  CreationFlagEnumeration (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  CreationFlagEnumeration::
  CreationFlagEnumeration (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  CreationFlagEnumeration::
  CreationFlagEnumeration (const CreationFlagEnumeration& v,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  CreationFlagEnumeration& CreationFlagEnumeration::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_CreationFlagEnumeration_literals_[v]);

    return *this;
  }


  // Description_Type
  // 


  // Boundary_Type
  // 

  const Boundary_Type::exclusiveBound_optional& Boundary_Type::
  exclusiveBound () const
  {
    return this->exclusiveBound_;
  }

  Boundary_Type::exclusiveBound_optional& Boundary_Type::
  exclusiveBound ()
  {
    return this->exclusiveBound_;
  }

  void Boundary_Type::
  exclusiveBound (const exclusiveBound_type& x)
  {
    this->exclusiveBound_.set (x);
  }

  void Boundary_Type::
  exclusiveBound (const exclusiveBound_optional& x)
  {
    this->exclusiveBound_ = x;
  }

  const Boundary_Type::any_attribute_set& Boundary_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  Boundary_Type::any_attribute_set& Boundary_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void Boundary_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& Boundary_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& Boundary_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // Exact_Type
  // 

  const Exact_Type::epsilon_optional& Exact_Type::
  epsilon () const
  {
    return this->epsilon_;
  }

  Exact_Type::epsilon_optional& Exact_Type::
  epsilon ()
  {
    return this->epsilon_;
  }

  void Exact_Type::
  epsilon (const epsilon_type& x)
  {
    this->epsilon_.set (x);
  }

  void Exact_Type::
  epsilon (const epsilon_optional& x)
  {
    this->epsilon_ = x;
  }

  const Exact_Type::any_attribute_set& Exact_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  Exact_Type::any_attribute_set& Exact_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void Exact_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& Exact_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& Exact_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // Range_Type
  // 

  const Range_Type::LowerBound_type& Range_Type::
  LowerBound () const
  {
    return this->LowerBound_.get ();
  }

  Range_Type::LowerBound_type& Range_Type::
  LowerBound ()
  {
    return this->LowerBound_.get ();
  }

  void Range_Type::
  LowerBound (const LowerBound_type& x)
  {
    this->LowerBound_.set (x);
  }

  void Range_Type::
  LowerBound (::std::auto_ptr< LowerBound_type > x)
  {
    this->LowerBound_.set (x);
  }

  const Range_Type::UpperBound_type& Range_Type::
  UpperBound () const
  {
    return this->UpperBound_.get ();
  }

  Range_Type::UpperBound_type& Range_Type::
  UpperBound ()
  {
    return this->UpperBound_.get ();
  }

  void Range_Type::
  UpperBound (const UpperBound_type& x)
  {
    this->UpperBound_.set (x);
  }

  void Range_Type::
  UpperBound (::std::auto_ptr< UpperBound_type > x)
  {
    this->UpperBound_.set (x);
  }

  const Range_Type::any_attribute_set& Range_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  Range_Type::any_attribute_set& Range_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void Range_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& Range_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& Range_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // RangeValue_Type
  // 

  const RangeValue_Type::UpperBoundedRange_optional& RangeValue_Type::
  UpperBoundedRange () const
  {
    return this->UpperBoundedRange_;
  }

  RangeValue_Type::UpperBoundedRange_optional& RangeValue_Type::
  UpperBoundedRange ()
  {
    return this->UpperBoundedRange_;
  }

  void RangeValue_Type::
  UpperBoundedRange (const UpperBoundedRange_type& x)
  {
    this->UpperBoundedRange_.set (x);
  }

  void RangeValue_Type::
  UpperBoundedRange (const UpperBoundedRange_optional& x)
  {
    this->UpperBoundedRange_ = x;
  }

  void RangeValue_Type::
  UpperBoundedRange (::std::auto_ptr< UpperBoundedRange_type > x)
  {
    this->UpperBoundedRange_.set (x);
  }

  const RangeValue_Type::LowerBoundedRange_optional& RangeValue_Type::
  LowerBoundedRange () const
  {
    return this->LowerBoundedRange_;
  }

  RangeValue_Type::LowerBoundedRange_optional& RangeValue_Type::
  LowerBoundedRange ()
  {
    return this->LowerBoundedRange_;
  }

  void RangeValue_Type::
  LowerBoundedRange (const LowerBoundedRange_type& x)
  {
    this->LowerBoundedRange_.set (x);
  }

  void RangeValue_Type::
  LowerBoundedRange (const LowerBoundedRange_optional& x)
  {
    this->LowerBoundedRange_ = x;
  }

  void RangeValue_Type::
  LowerBoundedRange (::std::auto_ptr< LowerBoundedRange_type > x)
  {
    this->LowerBoundedRange_.set (x);
  }

  const RangeValue_Type::Exact_sequence& RangeValue_Type::
  Exact () const
  {
    return this->Exact_;
  }

  RangeValue_Type::Exact_sequence& RangeValue_Type::
  Exact ()
  {
    return this->Exact_;
  }

  void RangeValue_Type::
  Exact (const Exact_sequence& s)
  {
    this->Exact_ = s;
  }

  const RangeValue_Type::Range_sequence& RangeValue_Type::
  Range () const
  {
    return this->Range_;
  }

  RangeValue_Type::Range_sequence& RangeValue_Type::
  Range ()
  {
    return this->Range_;
  }

  void RangeValue_Type::
  Range (const Range_sequence& s)
  {
    this->Range_ = s;
  }

  const RangeValue_Type::any_attribute_set& RangeValue_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  RangeValue_Type::any_attribute_set& RangeValue_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void RangeValue_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& RangeValue_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& RangeValue_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // JobDefinition_Type
  // 

  const JobDefinition_Type::JobDescription_type& JobDefinition_Type::
  JobDescription () const
  {
    return this->JobDescription_.get ();
  }

  JobDefinition_Type::JobDescription_type& JobDefinition_Type::
  JobDescription ()
  {
    return this->JobDescription_.get ();
  }

  void JobDefinition_Type::
  JobDescription (const JobDescription_type& x)
  {
    this->JobDescription_.set (x);
  }

  void JobDefinition_Type::
  JobDescription (::std::auto_ptr< JobDescription_type > x)
  {
    this->JobDescription_.set (x);
  }

  const JobDefinition_Type::any_sequence& JobDefinition_Type::
  any () const
  {
    return this->any_;
  }

  JobDefinition_Type::any_sequence& JobDefinition_Type::
  any ()
  {
    return this->any_;
  }

  void JobDefinition_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const JobDefinition_Type::id_optional& JobDefinition_Type::
  id () const
  {
    return this->id_;
  }

  JobDefinition_Type::id_optional& JobDefinition_Type::
  id ()
  {
    return this->id_;
  }

  void JobDefinition_Type::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void JobDefinition_Type::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void JobDefinition_Type::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const JobDefinition_Type::any_attribute_set& JobDefinition_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  JobDefinition_Type::any_attribute_set& JobDefinition_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void JobDefinition_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& JobDefinition_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& JobDefinition_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // JobDescription_Type
  // 

  const JobDescription_Type::JobIdentification_optional& JobDescription_Type::
  JobIdentification () const
  {
    return this->JobIdentification_;
  }

  JobDescription_Type::JobIdentification_optional& JobDescription_Type::
  JobIdentification ()
  {
    return this->JobIdentification_;
  }

  void JobDescription_Type::
  JobIdentification (const JobIdentification_type& x)
  {
    this->JobIdentification_.set (x);
  }

  void JobDescription_Type::
  JobIdentification (const JobIdentification_optional& x)
  {
    this->JobIdentification_ = x;
  }

  void JobDescription_Type::
  JobIdentification (::std::auto_ptr< JobIdentification_type > x)
  {
    this->JobIdentification_.set (x);
  }

  const JobDescription_Type::Application_optional& JobDescription_Type::
  Application () const
  {
    return this->Application_;
  }

  JobDescription_Type::Application_optional& JobDescription_Type::
  Application ()
  {
    return this->Application_;
  }

  void JobDescription_Type::
  Application (const Application_type& x)
  {
    this->Application_.set (x);
  }

  void JobDescription_Type::
  Application (const Application_optional& x)
  {
    this->Application_ = x;
  }

  void JobDescription_Type::
  Application (::std::auto_ptr< Application_type > x)
  {
    this->Application_.set (x);
  }

  const JobDescription_Type::Resources_optional& JobDescription_Type::
  Resources () const
  {
    return this->Resources_;
  }

  JobDescription_Type::Resources_optional& JobDescription_Type::
  Resources ()
  {
    return this->Resources_;
  }

  void JobDescription_Type::
  Resources (const Resources_type& x)
  {
    this->Resources_.set (x);
  }

  void JobDescription_Type::
  Resources (const Resources_optional& x)
  {
    this->Resources_ = x;
  }

  void JobDescription_Type::
  Resources (::std::auto_ptr< Resources_type > x)
  {
    this->Resources_.set (x);
  }

  const JobDescription_Type::DataStaging_sequence& JobDescription_Type::
  DataStaging () const
  {
    return this->DataStaging_;
  }

  JobDescription_Type::DataStaging_sequence& JobDescription_Type::
  DataStaging ()
  {
    return this->DataStaging_;
  }

  void JobDescription_Type::
  DataStaging (const DataStaging_sequence& s)
  {
    this->DataStaging_ = s;
  }

  const JobDescription_Type::any_sequence& JobDescription_Type::
  any () const
  {
    return this->any_;
  }

  JobDescription_Type::any_sequence& JobDescription_Type::
  any ()
  {
    return this->any_;
  }

  void JobDescription_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const JobDescription_Type::any_attribute_set& JobDescription_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  JobDescription_Type::any_attribute_set& JobDescription_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void JobDescription_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& JobDescription_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& JobDescription_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // JobIdentification_Type
  // 

  const JobIdentification_Type::JobName_optional& JobIdentification_Type::
  JobName () const
  {
    return this->JobName_;
  }

  JobIdentification_Type::JobName_optional& JobIdentification_Type::
  JobName ()
  {
    return this->JobName_;
  }

  void JobIdentification_Type::
  JobName (const JobName_type& x)
  {
    this->JobName_.set (x);
  }

  void JobIdentification_Type::
  JobName (const JobName_optional& x)
  {
    this->JobName_ = x;
  }

  void JobIdentification_Type::
  JobName (::std::auto_ptr< JobName_type > x)
  {
    this->JobName_.set (x);
  }

  const JobIdentification_Type::Description_optional& JobIdentification_Type::
  Description () const
  {
    return this->Description_;
  }

  JobIdentification_Type::Description_optional& JobIdentification_Type::
  Description ()
  {
    return this->Description_;
  }

  void JobIdentification_Type::
  Description (const Description_type& x)
  {
    this->Description_.set (x);
  }

  void JobIdentification_Type::
  Description (const Description_optional& x)
  {
    this->Description_ = x;
  }

  void JobIdentification_Type::
  Description (::std::auto_ptr< Description_type > x)
  {
    this->Description_.set (x);
  }

  const JobIdentification_Type::JobAnnotation_sequence& JobIdentification_Type::
  JobAnnotation () const
  {
    return this->JobAnnotation_;
  }

  JobIdentification_Type::JobAnnotation_sequence& JobIdentification_Type::
  JobAnnotation ()
  {
    return this->JobAnnotation_;
  }

  void JobIdentification_Type::
  JobAnnotation (const JobAnnotation_sequence& s)
  {
    this->JobAnnotation_ = s;
  }

  const JobIdentification_Type::JobProject_sequence& JobIdentification_Type::
  JobProject () const
  {
    return this->JobProject_;
  }

  JobIdentification_Type::JobProject_sequence& JobIdentification_Type::
  JobProject ()
  {
    return this->JobProject_;
  }

  void JobIdentification_Type::
  JobProject (const JobProject_sequence& s)
  {
    this->JobProject_ = s;
  }

  const JobIdentification_Type::any_sequence& JobIdentification_Type::
  any () const
  {
    return this->any_;
  }

  JobIdentification_Type::any_sequence& JobIdentification_Type::
  any ()
  {
    return this->any_;
  }

  void JobIdentification_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const JobIdentification_Type::any_attribute_set& JobIdentification_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  JobIdentification_Type::any_attribute_set& JobIdentification_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void JobIdentification_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& JobIdentification_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& JobIdentification_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // Application_Type
  // 

  const Application_Type::ApplicationName_optional& Application_Type::
  ApplicationName () const
  {
    return this->ApplicationName_;
  }

  Application_Type::ApplicationName_optional& Application_Type::
  ApplicationName ()
  {
    return this->ApplicationName_;
  }

  void Application_Type::
  ApplicationName (const ApplicationName_type& x)
  {
    this->ApplicationName_.set (x);
  }

  void Application_Type::
  ApplicationName (const ApplicationName_optional& x)
  {
    this->ApplicationName_ = x;
  }

  void Application_Type::
  ApplicationName (::std::auto_ptr< ApplicationName_type > x)
  {
    this->ApplicationName_.set (x);
  }

  const Application_Type::ApplicationVersion_optional& Application_Type::
  ApplicationVersion () const
  {
    return this->ApplicationVersion_;
  }

  Application_Type::ApplicationVersion_optional& Application_Type::
  ApplicationVersion ()
  {
    return this->ApplicationVersion_;
  }

  void Application_Type::
  ApplicationVersion (const ApplicationVersion_type& x)
  {
    this->ApplicationVersion_.set (x);
  }

  void Application_Type::
  ApplicationVersion (const ApplicationVersion_optional& x)
  {
    this->ApplicationVersion_ = x;
  }

  void Application_Type::
  ApplicationVersion (::std::auto_ptr< ApplicationVersion_type > x)
  {
    this->ApplicationVersion_.set (x);
  }

  const Application_Type::Description_optional& Application_Type::
  Description () const
  {
    return this->Description_;
  }

  Application_Type::Description_optional& Application_Type::
  Description ()
  {
    return this->Description_;
  }

  void Application_Type::
  Description (const Description_type& x)
  {
    this->Description_.set (x);
  }

  void Application_Type::
  Description (const Description_optional& x)
  {
    this->Description_ = x;
  }

  void Application_Type::
  Description (::std::auto_ptr< Description_type > x)
  {
    this->Description_.set (x);
  }

  const Application_Type::any_sequence& Application_Type::
  any () const
  {
    return this->any_;
  }

  Application_Type::any_sequence& Application_Type::
  any ()
  {
    return this->any_;
  }

  void Application_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const Application_Type::any_attribute_set& Application_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  Application_Type::any_attribute_set& Application_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void Application_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& Application_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& Application_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // Resources_Type
  // 

  const Resources_Type::CandidateHosts_optional& Resources_Type::
  CandidateHosts () const
  {
    return this->CandidateHosts_;
  }

  Resources_Type::CandidateHosts_optional& Resources_Type::
  CandidateHosts ()
  {
    return this->CandidateHosts_;
  }

  void Resources_Type::
  CandidateHosts (const CandidateHosts_type& x)
  {
    this->CandidateHosts_.set (x);
  }

  void Resources_Type::
  CandidateHosts (const CandidateHosts_optional& x)
  {
    this->CandidateHosts_ = x;
  }

  void Resources_Type::
  CandidateHosts (::std::auto_ptr< CandidateHosts_type > x)
  {
    this->CandidateHosts_.set (x);
  }

  const Resources_Type::FileSystem_sequence& Resources_Type::
  FileSystem () const
  {
    return this->FileSystem_;
  }

  Resources_Type::FileSystem_sequence& Resources_Type::
  FileSystem ()
  {
    return this->FileSystem_;
  }

  void Resources_Type::
  FileSystem (const FileSystem_sequence& s)
  {
    this->FileSystem_ = s;
  }

  const Resources_Type::ExclusiveExecution_optional& Resources_Type::
  ExclusiveExecution () const
  {
    return this->ExclusiveExecution_;
  }

  Resources_Type::ExclusiveExecution_optional& Resources_Type::
  ExclusiveExecution ()
  {
    return this->ExclusiveExecution_;
  }

  void Resources_Type::
  ExclusiveExecution (const ExclusiveExecution_type& x)
  {
    this->ExclusiveExecution_.set (x);
  }

  void Resources_Type::
  ExclusiveExecution (const ExclusiveExecution_optional& x)
  {
    this->ExclusiveExecution_ = x;
  }

  const Resources_Type::OperatingSystem_optional& Resources_Type::
  OperatingSystem () const
  {
    return this->OperatingSystem_;
  }

  Resources_Type::OperatingSystem_optional& Resources_Type::
  OperatingSystem ()
  {
    return this->OperatingSystem_;
  }

  void Resources_Type::
  OperatingSystem (const OperatingSystem_type& x)
  {
    this->OperatingSystem_.set (x);
  }

  void Resources_Type::
  OperatingSystem (const OperatingSystem_optional& x)
  {
    this->OperatingSystem_ = x;
  }

  void Resources_Type::
  OperatingSystem (::std::auto_ptr< OperatingSystem_type > x)
  {
    this->OperatingSystem_.set (x);
  }

  const Resources_Type::CPUArchitecture_optional& Resources_Type::
  CPUArchitecture () const
  {
    return this->CPUArchitecture_;
  }

  Resources_Type::CPUArchitecture_optional& Resources_Type::
  CPUArchitecture ()
  {
    return this->CPUArchitecture_;
  }

  void Resources_Type::
  CPUArchitecture (const CPUArchitecture_type& x)
  {
    this->CPUArchitecture_.set (x);
  }

  void Resources_Type::
  CPUArchitecture (const CPUArchitecture_optional& x)
  {
    this->CPUArchitecture_ = x;
  }

  void Resources_Type::
  CPUArchitecture (::std::auto_ptr< CPUArchitecture_type > x)
  {
    this->CPUArchitecture_.set (x);
  }

  const Resources_Type::IndividualCPUSpeed_optional& Resources_Type::
  IndividualCPUSpeed () const
  {
    return this->IndividualCPUSpeed_;
  }

  Resources_Type::IndividualCPUSpeed_optional& Resources_Type::
  IndividualCPUSpeed ()
  {
    return this->IndividualCPUSpeed_;
  }

  void Resources_Type::
  IndividualCPUSpeed (const IndividualCPUSpeed_type& x)
  {
    this->IndividualCPUSpeed_.set (x);
  }

  void Resources_Type::
  IndividualCPUSpeed (const IndividualCPUSpeed_optional& x)
  {
    this->IndividualCPUSpeed_ = x;
  }

  void Resources_Type::
  IndividualCPUSpeed (::std::auto_ptr< IndividualCPUSpeed_type > x)
  {
    this->IndividualCPUSpeed_.set (x);
  }

  const Resources_Type::IndividualCPUTime_optional& Resources_Type::
  IndividualCPUTime () const
  {
    return this->IndividualCPUTime_;
  }

  Resources_Type::IndividualCPUTime_optional& Resources_Type::
  IndividualCPUTime ()
  {
    return this->IndividualCPUTime_;
  }

  void Resources_Type::
  IndividualCPUTime (const IndividualCPUTime_type& x)
  {
    this->IndividualCPUTime_.set (x);
  }

  void Resources_Type::
  IndividualCPUTime (const IndividualCPUTime_optional& x)
  {
    this->IndividualCPUTime_ = x;
  }

  void Resources_Type::
  IndividualCPUTime (::std::auto_ptr< IndividualCPUTime_type > x)
  {
    this->IndividualCPUTime_.set (x);
  }

  const Resources_Type::IndividualCPUCount_optional& Resources_Type::
  IndividualCPUCount () const
  {
    return this->IndividualCPUCount_;
  }

  Resources_Type::IndividualCPUCount_optional& Resources_Type::
  IndividualCPUCount ()
  {
    return this->IndividualCPUCount_;
  }

  void Resources_Type::
  IndividualCPUCount (const IndividualCPUCount_type& x)
  {
    this->IndividualCPUCount_.set (x);
  }

  void Resources_Type::
  IndividualCPUCount (const IndividualCPUCount_optional& x)
  {
    this->IndividualCPUCount_ = x;
  }

  void Resources_Type::
  IndividualCPUCount (::std::auto_ptr< IndividualCPUCount_type > x)
  {
    this->IndividualCPUCount_.set (x);
  }

  const Resources_Type::IndividualNetworkBandwidth_optional& Resources_Type::
  IndividualNetworkBandwidth () const
  {
    return this->IndividualNetworkBandwidth_;
  }

  Resources_Type::IndividualNetworkBandwidth_optional& Resources_Type::
  IndividualNetworkBandwidth ()
  {
    return this->IndividualNetworkBandwidth_;
  }

  void Resources_Type::
  IndividualNetworkBandwidth (const IndividualNetworkBandwidth_type& x)
  {
    this->IndividualNetworkBandwidth_.set (x);
  }

  void Resources_Type::
  IndividualNetworkBandwidth (const IndividualNetworkBandwidth_optional& x)
  {
    this->IndividualNetworkBandwidth_ = x;
  }

  void Resources_Type::
  IndividualNetworkBandwidth (::std::auto_ptr< IndividualNetworkBandwidth_type > x)
  {
    this->IndividualNetworkBandwidth_.set (x);
  }

  const Resources_Type::IndividualPhysicalMemory_optional& Resources_Type::
  IndividualPhysicalMemory () const
  {
    return this->IndividualPhysicalMemory_;
  }

  Resources_Type::IndividualPhysicalMemory_optional& Resources_Type::
  IndividualPhysicalMemory ()
  {
    return this->IndividualPhysicalMemory_;
  }

  void Resources_Type::
  IndividualPhysicalMemory (const IndividualPhysicalMemory_type& x)
  {
    this->IndividualPhysicalMemory_.set (x);
  }

  void Resources_Type::
  IndividualPhysicalMemory (const IndividualPhysicalMemory_optional& x)
  {
    this->IndividualPhysicalMemory_ = x;
  }

  void Resources_Type::
  IndividualPhysicalMemory (::std::auto_ptr< IndividualPhysicalMemory_type > x)
  {
    this->IndividualPhysicalMemory_.set (x);
  }

  const Resources_Type::IndividualVirtualMemory_optional& Resources_Type::
  IndividualVirtualMemory () const
  {
    return this->IndividualVirtualMemory_;
  }

  Resources_Type::IndividualVirtualMemory_optional& Resources_Type::
  IndividualVirtualMemory ()
  {
    return this->IndividualVirtualMemory_;
  }

  void Resources_Type::
  IndividualVirtualMemory (const IndividualVirtualMemory_type& x)
  {
    this->IndividualVirtualMemory_.set (x);
  }

  void Resources_Type::
  IndividualVirtualMemory (const IndividualVirtualMemory_optional& x)
  {
    this->IndividualVirtualMemory_ = x;
  }

  void Resources_Type::
  IndividualVirtualMemory (::std::auto_ptr< IndividualVirtualMemory_type > x)
  {
    this->IndividualVirtualMemory_.set (x);
  }

  const Resources_Type::IndividualDiskSpace_optional& Resources_Type::
  IndividualDiskSpace () const
  {
    return this->IndividualDiskSpace_;
  }

  Resources_Type::IndividualDiskSpace_optional& Resources_Type::
  IndividualDiskSpace ()
  {
    return this->IndividualDiskSpace_;
  }

  void Resources_Type::
  IndividualDiskSpace (const IndividualDiskSpace_type& x)
  {
    this->IndividualDiskSpace_.set (x);
  }

  void Resources_Type::
  IndividualDiskSpace (const IndividualDiskSpace_optional& x)
  {
    this->IndividualDiskSpace_ = x;
  }

  void Resources_Type::
  IndividualDiskSpace (::std::auto_ptr< IndividualDiskSpace_type > x)
  {
    this->IndividualDiskSpace_.set (x);
  }

  const Resources_Type::TotalCPUTime_optional& Resources_Type::
  TotalCPUTime () const
  {
    return this->TotalCPUTime_;
  }

  Resources_Type::TotalCPUTime_optional& Resources_Type::
  TotalCPUTime ()
  {
    return this->TotalCPUTime_;
  }

  void Resources_Type::
  TotalCPUTime (const TotalCPUTime_type& x)
  {
    this->TotalCPUTime_.set (x);
  }

  void Resources_Type::
  TotalCPUTime (const TotalCPUTime_optional& x)
  {
    this->TotalCPUTime_ = x;
  }

  void Resources_Type::
  TotalCPUTime (::std::auto_ptr< TotalCPUTime_type > x)
  {
    this->TotalCPUTime_.set (x);
  }

  const Resources_Type::TotalCPUCount_optional& Resources_Type::
  TotalCPUCount () const
  {
    return this->TotalCPUCount_;
  }

  Resources_Type::TotalCPUCount_optional& Resources_Type::
  TotalCPUCount ()
  {
    return this->TotalCPUCount_;
  }

  void Resources_Type::
  TotalCPUCount (const TotalCPUCount_type& x)
  {
    this->TotalCPUCount_.set (x);
  }

  void Resources_Type::
  TotalCPUCount (const TotalCPUCount_optional& x)
  {
    this->TotalCPUCount_ = x;
  }

  void Resources_Type::
  TotalCPUCount (::std::auto_ptr< TotalCPUCount_type > x)
  {
    this->TotalCPUCount_.set (x);
  }

  const Resources_Type::TotalPhysicalMemory_optional& Resources_Type::
  TotalPhysicalMemory () const
  {
    return this->TotalPhysicalMemory_;
  }

  Resources_Type::TotalPhysicalMemory_optional& Resources_Type::
  TotalPhysicalMemory ()
  {
    return this->TotalPhysicalMemory_;
  }

  void Resources_Type::
  TotalPhysicalMemory (const TotalPhysicalMemory_type& x)
  {
    this->TotalPhysicalMemory_.set (x);
  }

  void Resources_Type::
  TotalPhysicalMemory (const TotalPhysicalMemory_optional& x)
  {
    this->TotalPhysicalMemory_ = x;
  }

  void Resources_Type::
  TotalPhysicalMemory (::std::auto_ptr< TotalPhysicalMemory_type > x)
  {
    this->TotalPhysicalMemory_.set (x);
  }

  const Resources_Type::TotalVirtualMemory_optional& Resources_Type::
  TotalVirtualMemory () const
  {
    return this->TotalVirtualMemory_;
  }

  Resources_Type::TotalVirtualMemory_optional& Resources_Type::
  TotalVirtualMemory ()
  {
    return this->TotalVirtualMemory_;
  }

  void Resources_Type::
  TotalVirtualMemory (const TotalVirtualMemory_type& x)
  {
    this->TotalVirtualMemory_.set (x);
  }

  void Resources_Type::
  TotalVirtualMemory (const TotalVirtualMemory_optional& x)
  {
    this->TotalVirtualMemory_ = x;
  }

  void Resources_Type::
  TotalVirtualMemory (::std::auto_ptr< TotalVirtualMemory_type > x)
  {
    this->TotalVirtualMemory_.set (x);
  }

  const Resources_Type::TotalDiskSpace_optional& Resources_Type::
  TotalDiskSpace () const
  {
    return this->TotalDiskSpace_;
  }

  Resources_Type::TotalDiskSpace_optional& Resources_Type::
  TotalDiskSpace ()
  {
    return this->TotalDiskSpace_;
  }

  void Resources_Type::
  TotalDiskSpace (const TotalDiskSpace_type& x)
  {
    this->TotalDiskSpace_.set (x);
  }

  void Resources_Type::
  TotalDiskSpace (const TotalDiskSpace_optional& x)
  {
    this->TotalDiskSpace_ = x;
  }

  void Resources_Type::
  TotalDiskSpace (::std::auto_ptr< TotalDiskSpace_type > x)
  {
    this->TotalDiskSpace_.set (x);
  }

  const Resources_Type::TotalResourceCount_optional& Resources_Type::
  TotalResourceCount () const
  {
    return this->TotalResourceCount_;
  }

  Resources_Type::TotalResourceCount_optional& Resources_Type::
  TotalResourceCount ()
  {
    return this->TotalResourceCount_;
  }

  void Resources_Type::
  TotalResourceCount (const TotalResourceCount_type& x)
  {
    this->TotalResourceCount_.set (x);
  }

  void Resources_Type::
  TotalResourceCount (const TotalResourceCount_optional& x)
  {
    this->TotalResourceCount_ = x;
  }

  void Resources_Type::
  TotalResourceCount (::std::auto_ptr< TotalResourceCount_type > x)
  {
    this->TotalResourceCount_.set (x);
  }

  const Resources_Type::any_sequence& Resources_Type::
  any () const
  {
    return this->any_;
  }

  Resources_Type::any_sequence& Resources_Type::
  any ()
  {
    return this->any_;
  }

  void Resources_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const Resources_Type::any_attribute_set& Resources_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  Resources_Type::any_attribute_set& Resources_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void Resources_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& Resources_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& Resources_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // CandidateHosts_Type
  // 

  const CandidateHosts_Type::HostName_sequence& CandidateHosts_Type::
  HostName () const
  {
    return this->HostName_;
  }

  CandidateHosts_Type::HostName_sequence& CandidateHosts_Type::
  HostName ()
  {
    return this->HostName_;
  }

  void CandidateHosts_Type::
  HostName (const HostName_sequence& s)
  {
    this->HostName_ = s;
  }


  // CPUArchitecture_Type
  // 

  const CPUArchitecture_Type::CPUArchitectureName_type& CPUArchitecture_Type::
  CPUArchitectureName () const
  {
    return this->CPUArchitectureName_.get ();
  }

  CPUArchitecture_Type::CPUArchitectureName_type& CPUArchitecture_Type::
  CPUArchitectureName ()
  {
    return this->CPUArchitectureName_.get ();
  }

  void CPUArchitecture_Type::
  CPUArchitectureName (const CPUArchitectureName_type& x)
  {
    this->CPUArchitectureName_.set (x);
  }

  void CPUArchitecture_Type::
  CPUArchitectureName (::std::auto_ptr< CPUArchitectureName_type > x)
  {
    this->CPUArchitectureName_.set (x);
  }

  const CPUArchitecture_Type::any_sequence& CPUArchitecture_Type::
  any () const
  {
    return this->any_;
  }

  CPUArchitecture_Type::any_sequence& CPUArchitecture_Type::
  any ()
  {
    return this->any_;
  }

  void CPUArchitecture_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const CPUArchitecture_Type::any_attribute_set& CPUArchitecture_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  CPUArchitecture_Type::any_attribute_set& CPUArchitecture_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void CPUArchitecture_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& CPUArchitecture_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& CPUArchitecture_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // FileSystem_Type
  // 

  const FileSystem_Type::FileSystemType_optional& FileSystem_Type::
  FileSystemType () const
  {
    return this->FileSystemType_;
  }

  FileSystem_Type::FileSystemType_optional& FileSystem_Type::
  FileSystemType ()
  {
    return this->FileSystemType_;
  }

  void FileSystem_Type::
  FileSystemType (const FileSystemType_type& x)
  {
    this->FileSystemType_.set (x);
  }

  void FileSystem_Type::
  FileSystemType (const FileSystemType_optional& x)
  {
    this->FileSystemType_ = x;
  }

  void FileSystem_Type::
  FileSystemType (::std::auto_ptr< FileSystemType_type > x)
  {
    this->FileSystemType_.set (x);
  }

  const FileSystem_Type::Description_optional& FileSystem_Type::
  Description () const
  {
    return this->Description_;
  }

  FileSystem_Type::Description_optional& FileSystem_Type::
  Description ()
  {
    return this->Description_;
  }

  void FileSystem_Type::
  Description (const Description_type& x)
  {
    this->Description_.set (x);
  }

  void FileSystem_Type::
  Description (const Description_optional& x)
  {
    this->Description_ = x;
  }

  void FileSystem_Type::
  Description (::std::auto_ptr< Description_type > x)
  {
    this->Description_.set (x);
  }

  const FileSystem_Type::MountPoint_optional& FileSystem_Type::
  MountPoint () const
  {
    return this->MountPoint_;
  }

  FileSystem_Type::MountPoint_optional& FileSystem_Type::
  MountPoint ()
  {
    return this->MountPoint_;
  }

  void FileSystem_Type::
  MountPoint (const MountPoint_type& x)
  {
    this->MountPoint_.set (x);
  }

  void FileSystem_Type::
  MountPoint (const MountPoint_optional& x)
  {
    this->MountPoint_ = x;
  }

  void FileSystem_Type::
  MountPoint (::std::auto_ptr< MountPoint_type > x)
  {
    this->MountPoint_.set (x);
  }

  const FileSystem_Type::DiskSpace_optional& FileSystem_Type::
  DiskSpace () const
  {
    return this->DiskSpace_;
  }

  FileSystem_Type::DiskSpace_optional& FileSystem_Type::
  DiskSpace ()
  {
    return this->DiskSpace_;
  }

  void FileSystem_Type::
  DiskSpace (const DiskSpace_type& x)
  {
    this->DiskSpace_.set (x);
  }

  void FileSystem_Type::
  DiskSpace (const DiskSpace_optional& x)
  {
    this->DiskSpace_ = x;
  }

  void FileSystem_Type::
  DiskSpace (::std::auto_ptr< DiskSpace_type > x)
  {
    this->DiskSpace_.set (x);
  }

  const FileSystem_Type::any_sequence& FileSystem_Type::
  any () const
  {
    return this->any_;
  }

  FileSystem_Type::any_sequence& FileSystem_Type::
  any ()
  {
    return this->any_;
  }

  void FileSystem_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const FileSystem_Type::name_type& FileSystem_Type::
  name () const
  {
    return this->name_.get ();
  }

  FileSystem_Type::name_type& FileSystem_Type::
  name ()
  {
    return this->name_.get ();
  }

  void FileSystem_Type::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void FileSystem_Type::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const FileSystem_Type::any_attribute_set& FileSystem_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  FileSystem_Type::any_attribute_set& FileSystem_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void FileSystem_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& FileSystem_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& FileSystem_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // OperatingSystem_Type
  // 

  const OperatingSystem_Type::OperatingSystemType_optional& OperatingSystem_Type::
  OperatingSystemType () const
  {
    return this->OperatingSystemType_;
  }

  OperatingSystem_Type::OperatingSystemType_optional& OperatingSystem_Type::
  OperatingSystemType ()
  {
    return this->OperatingSystemType_;
  }

  void OperatingSystem_Type::
  OperatingSystemType (const OperatingSystemType_type& x)
  {
    this->OperatingSystemType_.set (x);
  }

  void OperatingSystem_Type::
  OperatingSystemType (const OperatingSystemType_optional& x)
  {
    this->OperatingSystemType_ = x;
  }

  void OperatingSystem_Type::
  OperatingSystemType (::std::auto_ptr< OperatingSystemType_type > x)
  {
    this->OperatingSystemType_.set (x);
  }

  const OperatingSystem_Type::OperatingSystemVersion_optional& OperatingSystem_Type::
  OperatingSystemVersion () const
  {
    return this->OperatingSystemVersion_;
  }

  OperatingSystem_Type::OperatingSystemVersion_optional& OperatingSystem_Type::
  OperatingSystemVersion ()
  {
    return this->OperatingSystemVersion_;
  }

  void OperatingSystem_Type::
  OperatingSystemVersion (const OperatingSystemVersion_type& x)
  {
    this->OperatingSystemVersion_.set (x);
  }

  void OperatingSystem_Type::
  OperatingSystemVersion (const OperatingSystemVersion_optional& x)
  {
    this->OperatingSystemVersion_ = x;
  }

  void OperatingSystem_Type::
  OperatingSystemVersion (::std::auto_ptr< OperatingSystemVersion_type > x)
  {
    this->OperatingSystemVersion_.set (x);
  }

  const OperatingSystem_Type::Description_optional& OperatingSystem_Type::
  Description () const
  {
    return this->Description_;
  }

  OperatingSystem_Type::Description_optional& OperatingSystem_Type::
  Description ()
  {
    return this->Description_;
  }

  void OperatingSystem_Type::
  Description (const Description_type& x)
  {
    this->Description_.set (x);
  }

  void OperatingSystem_Type::
  Description (const Description_optional& x)
  {
    this->Description_ = x;
  }

  void OperatingSystem_Type::
  Description (::std::auto_ptr< Description_type > x)
  {
    this->Description_.set (x);
  }

  const OperatingSystem_Type::any_sequence& OperatingSystem_Type::
  any () const
  {
    return this->any_;
  }

  OperatingSystem_Type::any_sequence& OperatingSystem_Type::
  any ()
  {
    return this->any_;
  }

  void OperatingSystem_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const OperatingSystem_Type::any_attribute_set& OperatingSystem_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  OperatingSystem_Type::any_attribute_set& OperatingSystem_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void OperatingSystem_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& OperatingSystem_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& OperatingSystem_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // OperatingSystemType_Type
  // 

  const OperatingSystemType_Type::OperatingSystemName_type& OperatingSystemType_Type::
  OperatingSystemName () const
  {
    return this->OperatingSystemName_.get ();
  }

  OperatingSystemType_Type::OperatingSystemName_type& OperatingSystemType_Type::
  OperatingSystemName ()
  {
    return this->OperatingSystemName_.get ();
  }

  void OperatingSystemType_Type::
  OperatingSystemName (const OperatingSystemName_type& x)
  {
    this->OperatingSystemName_.set (x);
  }

  void OperatingSystemType_Type::
  OperatingSystemName (::std::auto_ptr< OperatingSystemName_type > x)
  {
    this->OperatingSystemName_.set (x);
  }

  const OperatingSystemType_Type::any_sequence& OperatingSystemType_Type::
  any () const
  {
    return this->any_;
  }

  OperatingSystemType_Type::any_sequence& OperatingSystemType_Type::
  any ()
  {
    return this->any_;
  }

  void OperatingSystemType_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const OperatingSystemType_Type::any_attribute_set& OperatingSystemType_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  OperatingSystemType_Type::any_attribute_set& OperatingSystemType_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void OperatingSystemType_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& OperatingSystemType_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& OperatingSystemType_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // DataStaging_Type
  // 

  const DataStaging_Type::FileName_type& DataStaging_Type::
  FileName () const
  {
    return this->FileName_.get ();
  }

  DataStaging_Type::FileName_type& DataStaging_Type::
  FileName ()
  {
    return this->FileName_.get ();
  }

  void DataStaging_Type::
  FileName (const FileName_type& x)
  {
    this->FileName_.set (x);
  }

  void DataStaging_Type::
  FileName (::std::auto_ptr< FileName_type > x)
  {
    this->FileName_.set (x);
  }

  const DataStaging_Type::FilesystemName_optional& DataStaging_Type::
  FilesystemName () const
  {
    return this->FilesystemName_;
  }

  DataStaging_Type::FilesystemName_optional& DataStaging_Type::
  FilesystemName ()
  {
    return this->FilesystemName_;
  }

  void DataStaging_Type::
  FilesystemName (const FilesystemName_type& x)
  {
    this->FilesystemName_.set (x);
  }

  void DataStaging_Type::
  FilesystemName (const FilesystemName_optional& x)
  {
    this->FilesystemName_ = x;
  }

  void DataStaging_Type::
  FilesystemName (::std::auto_ptr< FilesystemName_type > x)
  {
    this->FilesystemName_.set (x);
  }

  const DataStaging_Type::CreationFlag_type& DataStaging_Type::
  CreationFlag () const
  {
    return this->CreationFlag_.get ();
  }

  DataStaging_Type::CreationFlag_type& DataStaging_Type::
  CreationFlag ()
  {
    return this->CreationFlag_.get ();
  }

  void DataStaging_Type::
  CreationFlag (const CreationFlag_type& x)
  {
    this->CreationFlag_.set (x);
  }

  void DataStaging_Type::
  CreationFlag (::std::auto_ptr< CreationFlag_type > x)
  {
    this->CreationFlag_.set (x);
  }

  const DataStaging_Type::DeleteOnTermination_optional& DataStaging_Type::
  DeleteOnTermination () const
  {
    return this->DeleteOnTermination_;
  }

  DataStaging_Type::DeleteOnTermination_optional& DataStaging_Type::
  DeleteOnTermination ()
  {
    return this->DeleteOnTermination_;
  }

  void DataStaging_Type::
  DeleteOnTermination (const DeleteOnTermination_type& x)
  {
    this->DeleteOnTermination_.set (x);
  }

  void DataStaging_Type::
  DeleteOnTermination (const DeleteOnTermination_optional& x)
  {
    this->DeleteOnTermination_ = x;
  }

  const DataStaging_Type::Source_optional& DataStaging_Type::
  Source () const
  {
    return this->Source_;
  }

  DataStaging_Type::Source_optional& DataStaging_Type::
  Source ()
  {
    return this->Source_;
  }

  void DataStaging_Type::
  Source (const Source_type& x)
  {
    this->Source_.set (x);
  }

  void DataStaging_Type::
  Source (const Source_optional& x)
  {
    this->Source_ = x;
  }

  void DataStaging_Type::
  Source (::std::auto_ptr< Source_type > x)
  {
    this->Source_.set (x);
  }

  const DataStaging_Type::Target_optional& DataStaging_Type::
  Target () const
  {
    return this->Target_;
  }

  DataStaging_Type::Target_optional& DataStaging_Type::
  Target ()
  {
    return this->Target_;
  }

  void DataStaging_Type::
  Target (const Target_type& x)
  {
    this->Target_.set (x);
  }

  void DataStaging_Type::
  Target (const Target_optional& x)
  {
    this->Target_ = x;
  }

  void DataStaging_Type::
  Target (::std::auto_ptr< Target_type > x)
  {
    this->Target_.set (x);
  }

  const DataStaging_Type::any_sequence& DataStaging_Type::
  any () const
  {
    return this->any_;
  }

  DataStaging_Type::any_sequence& DataStaging_Type::
  any ()
  {
    return this->any_;
  }

  void DataStaging_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const DataStaging_Type::name_optional& DataStaging_Type::
  name () const
  {
    return this->name_;
  }

  DataStaging_Type::name_optional& DataStaging_Type::
  name ()
  {
    return this->name_;
  }

  void DataStaging_Type::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void DataStaging_Type::
  name (const name_optional& x)
  {
    this->name_ = x;
  }

  void DataStaging_Type::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const DataStaging_Type::any_attribute_set& DataStaging_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  DataStaging_Type::any_attribute_set& DataStaging_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void DataStaging_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& DataStaging_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& DataStaging_Type::
  dom_document ()
  {
    return *dom_document_;
  }


  // SourceTarget_Type
  // 

  const SourceTarget_Type::URI_optional& SourceTarget_Type::
  URI () const
  {
    return this->URI_;
  }

  SourceTarget_Type::URI_optional& SourceTarget_Type::
  URI ()
  {
    return this->URI_;
  }

  void SourceTarget_Type::
  URI (const URI_type& x)
  {
    this->URI_.set (x);
  }

  void SourceTarget_Type::
  URI (const URI_optional& x)
  {
    this->URI_ = x;
  }

  void SourceTarget_Type::
  URI (::std::auto_ptr< URI_type > x)
  {
    this->URI_.set (x);
  }

  const SourceTarget_Type::any_sequence& SourceTarget_Type::
  any () const
  {
    return this->any_;
  }

  SourceTarget_Type::any_sequence& SourceTarget_Type::
  any ()
  {
    return this->any_;
  }

  void SourceTarget_Type::
  any (const any_sequence& s)
  {
    this->any_ = s;
  }

  const SourceTarget_Type::any_attribute_set& SourceTarget_Type::
  any_attribute () const
  {
    return this->any_attribute_;
  }

  SourceTarget_Type::any_attribute_set& SourceTarget_Type::
  any_attribute ()
  {
    return this->any_attribute_;
  }

  void SourceTarget_Type::
  any_attribute (const any_attribute_set& s)
  {
    this->any_attribute_ = s;
  }

  const ::xercesc::DOMDocument& SourceTarget_Type::
  dom_document () const
  {
    return *dom_document_;
  }

  ::xercesc::DOMDocument& SourceTarget_Type::
  dom_document ()
  {
    return *dom_document_;
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace jsdl
{
  // ProcessorArchitectureEnumeration
  //

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_ProcessorArchitectureEnumeration_convert ();
  }

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const ::xercesc::DOMAttr& a,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_ProcessorArchitectureEnumeration_convert ();
  }

  ProcessorArchitectureEnumeration::
  ProcessorArchitectureEnumeration (const ::std::string& s,
                                    const ::xercesc::DOMElement* e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_ProcessorArchitectureEnumeration_convert ();
  }

  ProcessorArchitectureEnumeration* ProcessorArchitectureEnumeration::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new ProcessorArchitectureEnumeration (*this, f, c);
  }

  ProcessorArchitectureEnumeration::value ProcessorArchitectureEnumeration::
  _xsd_ProcessorArchitectureEnumeration_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ProcessorArchitectureEnumeration_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ProcessorArchitectureEnumeration_indexes_,
                      _xsd_ProcessorArchitectureEnumeration_indexes_ + 10,
                      *this,
                      c));

    if (i == _xsd_ProcessorArchitectureEnumeration_indexes_ + 10 || _xsd_ProcessorArchitectureEnumeration_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ProcessorArchitectureEnumeration::
  _xsd_ProcessorArchitectureEnumeration_literals_[10] =
  {
    "sparc",
    "powerpc",
    "x86",
    "x86_32",
    "x86_64",
    "parisc",
    "mips",
    "ia64",
    "arm",
    "other"
  };

  const ProcessorArchitectureEnumeration::value ProcessorArchitectureEnumeration::
  _xsd_ProcessorArchitectureEnumeration_indexes_[10] =
  {
    ::jsdl::ProcessorArchitectureEnumeration::arm,
    ::jsdl::ProcessorArchitectureEnumeration::ia64,
    ::jsdl::ProcessorArchitectureEnumeration::mips,
    ::jsdl::ProcessorArchitectureEnumeration::other,
    ::jsdl::ProcessorArchitectureEnumeration::parisc,
    ::jsdl::ProcessorArchitectureEnumeration::powerpc,
    ::jsdl::ProcessorArchitectureEnumeration::sparc,
    ::jsdl::ProcessorArchitectureEnumeration::x86,
    ::jsdl::ProcessorArchitectureEnumeration::x86_32,
    ::jsdl::ProcessorArchitectureEnumeration::x86_64
  };

  // OperatingSystemTypeEnumeration
  //

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_OperatingSystemTypeEnumeration_convert ();
  }

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_OperatingSystemTypeEnumeration_convert ();
  }

  OperatingSystemTypeEnumeration::
  OperatingSystemTypeEnumeration (const ::std::string& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_OperatingSystemTypeEnumeration_convert ();
  }

  OperatingSystemTypeEnumeration* OperatingSystemTypeEnumeration::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new OperatingSystemTypeEnumeration (*this, f, c);
  }

  OperatingSystemTypeEnumeration::value OperatingSystemTypeEnumeration::
  _xsd_OperatingSystemTypeEnumeration_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_OperatingSystemTypeEnumeration_literals_);
    const value* i (::std::lower_bound (
                      _xsd_OperatingSystemTypeEnumeration_indexes_,
                      _xsd_OperatingSystemTypeEnumeration_indexes_ + 69,
                      *this,
                      c));

    if (i == _xsd_OperatingSystemTypeEnumeration_indexes_ + 69 || _xsd_OperatingSystemTypeEnumeration_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const OperatingSystemTypeEnumeration::
  _xsd_OperatingSystemTypeEnumeration_literals_[69] =
  {
    "Unknown",
    "MACOS",
    "ATTUNIX",
    "DGUX",
    "DECNT",
    "Tru64_UNIX",
    "OpenVMS",
    "HPUX",
    "AIX",
    "MVS",
    "OS400",
    "OS_2",
    "JavaVM",
    "MSDOS",
    "WIN3x",
    "WIN95",
    "WIN98",
    "WINNT",
    "WINCE",
    "NCR3000",
    "NetWare",
    "OSF",
    "DC_OS",
    "Reliant_UNIX",
    "SCO_UnixWare",
    "SCO_OpenServer",
    "Sequent",
    "IRIX",
    "Solaris",
    "SunOS",
    "U6000",
    "ASERIES",
    "TandemNSK",
    "TandemNT",
    "BS2000",
    "LINUX",
    "Lynx",
    "XENIX",
    "VM",
    "Interactive_UNIX",
    "BSDUNIX",
    "FreeBSD",
    "NetBSD",
    "GNU_Hurd",
    "OS9",
    "MACH_Kernel",
    "Inferno",
    "QNX",
    "EPOC",
    "IxWorks",
    "VxWorks",
    "MiNT",
    "BeOS",
    "HP_MPE",
    "NextStep",
    "PalmPilot",
    "Rhapsody",
    "Windows_2000",
    "Dedicated",
    "OS_390",
    "VSE",
    "TPF",
    "Windows_R_Me",
    "Caldera_Open_UNIX",
    "OpenBSD",
    "Not_Applicable",
    "Windows_XP",
    "z_OS",
    "other"
  };

  const OperatingSystemTypeEnumeration::value OperatingSystemTypeEnumeration::
  _xsd_OperatingSystemTypeEnumeration_indexes_[69] =
  {
    ::jsdl::OperatingSystemTypeEnumeration::AIX,
    ::jsdl::OperatingSystemTypeEnumeration::ASERIES,
    ::jsdl::OperatingSystemTypeEnumeration::ATTUNIX,
    ::jsdl::OperatingSystemTypeEnumeration::BS2000,
    ::jsdl::OperatingSystemTypeEnumeration::BSDUNIX,
    ::jsdl::OperatingSystemTypeEnumeration::BeOS,
    ::jsdl::OperatingSystemTypeEnumeration::Caldera_Open_UNIX,
    ::jsdl::OperatingSystemTypeEnumeration::DC_OS,
    ::jsdl::OperatingSystemTypeEnumeration::DECNT,
    ::jsdl::OperatingSystemTypeEnumeration::DGUX,
    ::jsdl::OperatingSystemTypeEnumeration::Dedicated,
    ::jsdl::OperatingSystemTypeEnumeration::EPOC,
    ::jsdl::OperatingSystemTypeEnumeration::FreeBSD,
    ::jsdl::OperatingSystemTypeEnumeration::GNU_Hurd,
    ::jsdl::OperatingSystemTypeEnumeration::HPUX,
    ::jsdl::OperatingSystemTypeEnumeration::HP_MPE,
    ::jsdl::OperatingSystemTypeEnumeration::IRIX,
    ::jsdl::OperatingSystemTypeEnumeration::Inferno,
    ::jsdl::OperatingSystemTypeEnumeration::Interactive_UNIX,
    ::jsdl::OperatingSystemTypeEnumeration::IxWorks,
    ::jsdl::OperatingSystemTypeEnumeration::JavaVM,
    ::jsdl::OperatingSystemTypeEnumeration::LINUX_OS,
    ::jsdl::OperatingSystemTypeEnumeration::Lynx,
    ::jsdl::OperatingSystemTypeEnumeration::MACH_Kernel,
    ::jsdl::OperatingSystemTypeEnumeration::MACOS,
    ::jsdl::OperatingSystemTypeEnumeration::MSDOS,
    ::jsdl::OperatingSystemTypeEnumeration::MVS,
    ::jsdl::OperatingSystemTypeEnumeration::MiNT,
    ::jsdl::OperatingSystemTypeEnumeration::NCR3000,
    ::jsdl::OperatingSystemTypeEnumeration::NetBSD,
    ::jsdl::OperatingSystemTypeEnumeration::NetWare,
    ::jsdl::OperatingSystemTypeEnumeration::NextStep,
    ::jsdl::OperatingSystemTypeEnumeration::Not_Applicable,
    ::jsdl::OperatingSystemTypeEnumeration::OS400,
    ::jsdl::OperatingSystemTypeEnumeration::OS9,
    ::jsdl::OperatingSystemTypeEnumeration::OSF,
    ::jsdl::OperatingSystemTypeEnumeration::OS_2,
    ::jsdl::OperatingSystemTypeEnumeration::OS_390,
    ::jsdl::OperatingSystemTypeEnumeration::OpenBSD,
    ::jsdl::OperatingSystemTypeEnumeration::OpenVMS,
    ::jsdl::OperatingSystemTypeEnumeration::PalmPilot,
    ::jsdl::OperatingSystemTypeEnumeration::QNX,
    ::jsdl::OperatingSystemTypeEnumeration::Reliant_UNIX,
    ::jsdl::OperatingSystemTypeEnumeration::Rhapsody,
    ::jsdl::OperatingSystemTypeEnumeration::SCO_OpenServer,
    ::jsdl::OperatingSystemTypeEnumeration::SCO_UnixWare,
    ::jsdl::OperatingSystemTypeEnumeration::Sequent,
    ::jsdl::OperatingSystemTypeEnumeration::Solaris,
    ::jsdl::OperatingSystemTypeEnumeration::SunOS,
    ::jsdl::OperatingSystemTypeEnumeration::TPF,
    ::jsdl::OperatingSystemTypeEnumeration::TandemNSK,
    ::jsdl::OperatingSystemTypeEnumeration::TandemNT,
    ::jsdl::OperatingSystemTypeEnumeration::Tru64_UNIX,
    ::jsdl::OperatingSystemTypeEnumeration::U6000,
    ::jsdl::OperatingSystemTypeEnumeration::Unknown,
    ::jsdl::OperatingSystemTypeEnumeration::VM,
    ::jsdl::OperatingSystemTypeEnumeration::VSE,
    ::jsdl::OperatingSystemTypeEnumeration::VxWorks,
    ::jsdl::OperatingSystemTypeEnumeration::WIN3x,
    ::jsdl::OperatingSystemTypeEnumeration::WIN95,
    ::jsdl::OperatingSystemTypeEnumeration::WIN98,
    ::jsdl::OperatingSystemTypeEnumeration::WINCE,
    ::jsdl::OperatingSystemTypeEnumeration::WINNT,
    ::jsdl::OperatingSystemTypeEnumeration::Windows_2000,
    ::jsdl::OperatingSystemTypeEnumeration::Windows_R_Me,
    ::jsdl::OperatingSystemTypeEnumeration::Windows_XP,
    ::jsdl::OperatingSystemTypeEnumeration::XENIX,
    ::jsdl::OperatingSystemTypeEnumeration::other,
    ::jsdl::OperatingSystemTypeEnumeration::z_OS
  };

  // FileSystemTypeEnumeration
  //

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_FileSystemTypeEnumeration_convert ();
  }

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_FileSystemTypeEnumeration_convert ();
  }

  FileSystemTypeEnumeration::
  FileSystemTypeEnumeration (const ::std::string& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_FileSystemTypeEnumeration_convert ();
  }

  FileSystemTypeEnumeration* FileSystemTypeEnumeration::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new FileSystemTypeEnumeration (*this, f, c);
  }

  FileSystemTypeEnumeration::value FileSystemTypeEnumeration::
  _xsd_FileSystemTypeEnumeration_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_FileSystemTypeEnumeration_literals_);
    const value* i (::std::lower_bound (
                      _xsd_FileSystemTypeEnumeration_indexes_,
                      _xsd_FileSystemTypeEnumeration_indexes_ + 4,
                      *this,
                      c));

    if (i == _xsd_FileSystemTypeEnumeration_indexes_ + 4 || _xsd_FileSystemTypeEnumeration_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const FileSystemTypeEnumeration::
  _xsd_FileSystemTypeEnumeration_literals_[4] =
  {
    "swap",
    "temporary",
    "spool",
    "normal"
  };

  const FileSystemTypeEnumeration::value FileSystemTypeEnumeration::
  _xsd_FileSystemTypeEnumeration_indexes_[4] =
  {
    ::jsdl::FileSystemTypeEnumeration::normal,
    ::jsdl::FileSystemTypeEnumeration::spool,
    ::jsdl::FileSystemTypeEnumeration::swap,
    ::jsdl::FileSystemTypeEnumeration::temporary
  };

  // CreationFlagEnumeration
  //

  CreationFlagEnumeration::
  CreationFlagEnumeration (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_CreationFlagEnumeration_convert ();
  }

  CreationFlagEnumeration::
  CreationFlagEnumeration (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_CreationFlagEnumeration_convert ();
  }

  CreationFlagEnumeration::
  CreationFlagEnumeration (const ::std::string& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_CreationFlagEnumeration_convert ();
  }

  CreationFlagEnumeration* CreationFlagEnumeration::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new CreationFlagEnumeration (*this, f, c);
  }

  CreationFlagEnumeration::value CreationFlagEnumeration::
  _xsd_CreationFlagEnumeration_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CreationFlagEnumeration_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CreationFlagEnumeration_indexes_,
                      _xsd_CreationFlagEnumeration_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CreationFlagEnumeration_indexes_ + 3 || _xsd_CreationFlagEnumeration_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CreationFlagEnumeration::
  _xsd_CreationFlagEnumeration_literals_[3] =
  {
    "overwrite",
    "append",
    "dontOverwrite"
  };

  const CreationFlagEnumeration::value CreationFlagEnumeration::
  _xsd_CreationFlagEnumeration_indexes_[3] =
  {
    ::jsdl::CreationFlagEnumeration::append,
    ::jsdl::CreationFlagEnumeration::dontOverwrite,
    ::jsdl::CreationFlagEnumeration::overwrite
  };

  // Description_Type
  //

  Description_Type::
  Description_Type ()
  : ::xml_schema::string ()
  {
  }

  Description_Type::
  Description_Type (const char* string)
  : ::xml_schema::string (string)
  {
  }

  Description_Type::
  Description_Type (const ::std::string& string)
  : ::xml_schema::string (string)
  {
  }

  Description_Type::
  Description_Type (const ::xml_schema::string& string)
  : ::xml_schema::string (string)
  {
  }

  Description_Type::
  Description_Type (const Description_Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (x, f, c)
  {
  }

  Description_Type::
  Description_Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  Description_Type::
  Description_Type (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  Description_Type::
  Description_Type (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  Description_Type* Description_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Description_Type (*this, f, c);
  }

  Description_Type::
  ~Description_Type ()
  {
  }

  // Boundary_Type
  //

  Boundary_Type::
  Boundary_Type (const ::xml_schema::double_& double_)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type > (double_),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    exclusiveBound_ (::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  Boundary_Type::
  Boundary_Type (const Boundary_Type& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type > (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    exclusiveBound_ (x.exclusiveBound_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  Boundary_Type::
  Boundary_Type (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type > (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    exclusiveBound_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Boundary_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "exclusiveBound" && n.namespace_ ().empty ())
      {
        this->exclusiveBound (exclusiveBound_traits::create (i, f, this));
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  Boundary_Type* Boundary_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Boundary_Type (*this, f, c);
  }

  Boundary_Type::
  ~Boundary_Type ()
  {
  }

  // Exact_Type
  //

  Exact_Type::
  Exact_Type (const ::xml_schema::double_& double_)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type > (double_),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    epsilon_ (::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  Exact_Type::
  Exact_Type (const Exact_Type& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type > (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    epsilon_ (x.epsilon_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  Exact_Type::
  Exact_Type (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type > (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    epsilon_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Exact_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "epsilon" && n.namespace_ ().empty ())
      {
        this->epsilon (epsilon_traits::create (i, f, this));
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  Exact_Type* Exact_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Exact_Type (*this, f, c);
  }

  Exact_Type::
  ~Exact_Type ()
  {
  }

  // Range_Type
  //

  Range_Type::
  Range_Type (const LowerBound_type& LowerBound,
              const UpperBound_type& UpperBound)
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    LowerBound_ (LowerBound, ::xml_schema::flags (), this),
    UpperBound_ (UpperBound, ::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  Range_Type::
  Range_Type (const Range_Type& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    LowerBound_ (x.LowerBound_, f, this),
    UpperBound_ (x.UpperBound_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  Range_Type::
  Range_Type (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    LowerBound_ (f, this),
    UpperBound_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Range_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // LowerBound
      //
      if (n.name () == "LowerBound" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< LowerBound_type > r (
          LowerBound_traits::create (i, f, this));

        if (!LowerBound_.present ())
        {
          this->LowerBound (r);
          continue;
        }
      }

      // UpperBound
      //
      if (n.name () == "UpperBound" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< UpperBound_type > r (
          UpperBound_traits::create (i, f, this));

        if (!UpperBound_.present ())
        {
          this->UpperBound (r);
          continue;
        }
      }

      break;
    }

    if (!LowerBound_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "LowerBound",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    if (!UpperBound_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "UpperBound",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  Range_Type* Range_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Range_Type (*this, f, c);
  }

  Range_Type::
  ~Range_Type ()
  {
  }

  // RangeValue_Type
  //

  RangeValue_Type::
  RangeValue_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    UpperBoundedRange_ (::xml_schema::flags (), this),
    LowerBoundedRange_ (::xml_schema::flags (), this),
    Exact_ (::xml_schema::flags (), this),
    Range_ (::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  RangeValue_Type::
  RangeValue_Type (const RangeValue_Type& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    UpperBoundedRange_ (x.UpperBoundedRange_, f, this),
    LowerBoundedRange_ (x.LowerBoundedRange_, f, this),
    Exact_ (x.Exact_, f, this),
    Range_ (x.Range_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  RangeValue_Type::
  RangeValue_Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    UpperBoundedRange_ (f, this),
    LowerBoundedRange_ (f, this),
    Exact_ (f, this),
    Range_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void RangeValue_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // UpperBoundedRange
      //
      if (n.name () == "UpperBoundedRange" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< UpperBoundedRange_type > r (
          UpperBoundedRange_traits::create (i, f, this));

        if (!this->UpperBoundedRange ())
        {
          this->UpperBoundedRange (r);
          continue;
        }
      }

      // LowerBoundedRange
      //
      if (n.name () == "LowerBoundedRange" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< LowerBoundedRange_type > r (
          LowerBoundedRange_traits::create (i, f, this));

        if (!this->LowerBoundedRange ())
        {
          this->LowerBoundedRange (r);
          continue;
        }
      }

      // Exact
      //
      if (n.name () == "Exact" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Exact_type > r (
          Exact_traits::create (i, f, this));

        this->Exact ().push_back (r);
        continue;
      }

      // Range
      //
      if (n.name () == "Range" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Range_type > r (
          Range_traits::create (i, f, this));

        this->Range ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  RangeValue_Type* RangeValue_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new RangeValue_Type (*this, f, c);
  }

  RangeValue_Type::
  ~RangeValue_Type ()
  {
  }

  // JobDefinition_Type
  //

  JobDefinition_Type::
  JobDefinition_Type (const JobDescription_type& JobDescription)
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobDescription_ (JobDescription, ::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    id_ (::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  JobDefinition_Type::
  JobDefinition_Type (const JobDefinition_Type& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobDescription_ (x.JobDescription_, f, this),
    any_ (x.any_, this->dom_document ()),
    id_ (x.id_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  JobDefinition_Type::
  JobDefinition_Type (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobDescription_ (f, this),
    any_ (this->dom_document ()),
    id_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void JobDefinition_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // JobDescription
      //
      if (n.name () == "JobDescription" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< JobDescription_type > r (
          JobDescription_traits::create (i, f, this));

        if (!JobDescription_.present ())
        {
          this->JobDescription (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    if (!JobDescription_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "JobDescription",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id (r);
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  JobDefinition_Type* JobDefinition_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new JobDefinition_Type (*this, f, c);
  }

  JobDefinition_Type::
  ~JobDefinition_Type ()
  {
  }

  // JobDescription_Type
  //

  JobDescription_Type::
  JobDescription_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobIdentification_ (::xml_schema::flags (), this),
    Application_ (::xml_schema::flags (), this),
    Resources_ (::xml_schema::flags (), this),
    DataStaging_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  JobDescription_Type::
  JobDescription_Type (const JobDescription_Type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobIdentification_ (x.JobIdentification_, f, this),
    Application_ (x.Application_, f, this),
    Resources_ (x.Resources_, f, this),
    DataStaging_ (x.DataStaging_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  JobDescription_Type::
  JobDescription_Type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobIdentification_ (f, this),
    Application_ (f, this),
    Resources_ (f, this),
    DataStaging_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void JobDescription_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // JobIdentification
      //
      if (n.name () == "JobIdentification" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< JobIdentification_type > r (
          JobIdentification_traits::create (i, f, this));

        if (!this->JobIdentification ())
        {
          this->JobIdentification (r);
          continue;
        }
      }

      // Application
      //
      if (n.name () == "Application" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Application_type > r (
          Application_traits::create (i, f, this));

        if (!this->Application ())
        {
          this->Application (r);
          continue;
        }
      }

      // Resources
      //
      if (n.name () == "Resources" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Resources_type > r (
          Resources_traits::create (i, f, this));

        if (!this->Resources ())
        {
          this->Resources (r);
          continue;
        }
      }

      // DataStaging
      //
      if (n.name () == "DataStaging" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< DataStaging_type > r (
          DataStaging_traits::create (i, f, this));

        this->DataStaging ().push_back (r);
        continue;
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  JobDescription_Type* JobDescription_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new JobDescription_Type (*this, f, c);
  }

  JobDescription_Type::
  ~JobDescription_Type ()
  {
  }

  // JobIdentification_Type
  //

  JobIdentification_Type::
  JobIdentification_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobName_ (::xml_schema::flags (), this),
    Description_ (::xml_schema::flags (), this),
    JobAnnotation_ (::xml_schema::flags (), this),
    JobProject_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  JobIdentification_Type::
  JobIdentification_Type (const JobIdentification_Type& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobName_ (x.JobName_, f, this),
    Description_ (x.Description_, f, this),
    JobAnnotation_ (x.JobAnnotation_, f, this),
    JobProject_ (x.JobProject_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  JobIdentification_Type::
  JobIdentification_Type (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    JobName_ (f, this),
    Description_ (f, this),
    JobAnnotation_ (f, this),
    JobProject_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void JobIdentification_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // JobName
      //
      if (n.name () == "JobName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< JobName_type > r (
          JobName_traits::create (i, f, this));

        if (!this->JobName ())
        {
          this->JobName (r);
          continue;
        }
      }

      // Description
      //
      if (n.name () == "Description" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Description_type > r (
          Description_traits::create (i, f, this));

        if (!this->Description ())
        {
          this->Description (r);
          continue;
        }
      }

      // JobAnnotation
      //
      if (n.name () == "JobAnnotation" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< JobAnnotation_type > r (
          JobAnnotation_traits::create (i, f, this));

        this->JobAnnotation ().push_back (r);
        continue;
      }

      // JobProject
      //
      if (n.name () == "JobProject" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< JobProject_type > r (
          JobProject_traits::create (i, f, this));

        this->JobProject ().push_back (r);
        continue;
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  JobIdentification_Type* JobIdentification_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new JobIdentification_Type (*this, f, c);
  }

  JobIdentification_Type::
  ~JobIdentification_Type ()
  {
  }

  // Application_Type
  //

  Application_Type::
  Application_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    ApplicationName_ (::xml_schema::flags (), this),
    ApplicationVersion_ (::xml_schema::flags (), this),
    Description_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  Application_Type::
  Application_Type (const Application_Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    ApplicationName_ (x.ApplicationName_, f, this),
    ApplicationVersion_ (x.ApplicationVersion_, f, this),
    Description_ (x.Description_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  Application_Type::
  Application_Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    ApplicationName_ (f, this),
    ApplicationVersion_ (f, this),
    Description_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Application_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ApplicationName
      //
      if (n.name () == "ApplicationName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< ApplicationName_type > r (
          ApplicationName_traits::create (i, f, this));

        if (!this->ApplicationName ())
        {
          this->ApplicationName (r);
          continue;
        }
      }

      // ApplicationVersion
      //
      if (n.name () == "ApplicationVersion" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< ApplicationVersion_type > r (
          ApplicationVersion_traits::create (i, f, this));

        if (!this->ApplicationVersion ())
        {
          this->ApplicationVersion (r);
          continue;
        }
      }

      // Description
      //
      if (n.name () == "Description" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Description_type > r (
          Description_traits::create (i, f, this));

        if (!this->Description ())
        {
          this->Description (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  Application_Type* Application_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Application_Type (*this, f, c);
  }

  Application_Type::
  ~Application_Type ()
  {
  }

  // Resources_Type
  //

  Resources_Type::
  Resources_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    CandidateHosts_ (::xml_schema::flags (), this),
    FileSystem_ (::xml_schema::flags (), this),
    ExclusiveExecution_ (::xml_schema::flags (), this),
    OperatingSystem_ (::xml_schema::flags (), this),
    CPUArchitecture_ (::xml_schema::flags (), this),
    IndividualCPUSpeed_ (::xml_schema::flags (), this),
    IndividualCPUTime_ (::xml_schema::flags (), this),
    IndividualCPUCount_ (::xml_schema::flags (), this),
    IndividualNetworkBandwidth_ (::xml_schema::flags (), this),
    IndividualPhysicalMemory_ (::xml_schema::flags (), this),
    IndividualVirtualMemory_ (::xml_schema::flags (), this),
    IndividualDiskSpace_ (::xml_schema::flags (), this),
    TotalCPUTime_ (::xml_schema::flags (), this),
    TotalCPUCount_ (::xml_schema::flags (), this),
    TotalPhysicalMemory_ (::xml_schema::flags (), this),
    TotalVirtualMemory_ (::xml_schema::flags (), this),
    TotalDiskSpace_ (::xml_schema::flags (), this),
    TotalResourceCount_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  Resources_Type::
  Resources_Type (const Resources_Type& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    CandidateHosts_ (x.CandidateHosts_, f, this),
    FileSystem_ (x.FileSystem_, f, this),
    ExclusiveExecution_ (x.ExclusiveExecution_, f, this),
    OperatingSystem_ (x.OperatingSystem_, f, this),
    CPUArchitecture_ (x.CPUArchitecture_, f, this),
    IndividualCPUSpeed_ (x.IndividualCPUSpeed_, f, this),
    IndividualCPUTime_ (x.IndividualCPUTime_, f, this),
    IndividualCPUCount_ (x.IndividualCPUCount_, f, this),
    IndividualNetworkBandwidth_ (x.IndividualNetworkBandwidth_, f, this),
    IndividualPhysicalMemory_ (x.IndividualPhysicalMemory_, f, this),
    IndividualVirtualMemory_ (x.IndividualVirtualMemory_, f, this),
    IndividualDiskSpace_ (x.IndividualDiskSpace_, f, this),
    TotalCPUTime_ (x.TotalCPUTime_, f, this),
    TotalCPUCount_ (x.TotalCPUCount_, f, this),
    TotalPhysicalMemory_ (x.TotalPhysicalMemory_, f, this),
    TotalVirtualMemory_ (x.TotalVirtualMemory_, f, this),
    TotalDiskSpace_ (x.TotalDiskSpace_, f, this),
    TotalResourceCount_ (x.TotalResourceCount_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  Resources_Type::
  Resources_Type (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    CandidateHosts_ (f, this),
    FileSystem_ (f, this),
    ExclusiveExecution_ (f, this),
    OperatingSystem_ (f, this),
    CPUArchitecture_ (f, this),
    IndividualCPUSpeed_ (f, this),
    IndividualCPUTime_ (f, this),
    IndividualCPUCount_ (f, this),
    IndividualNetworkBandwidth_ (f, this),
    IndividualPhysicalMemory_ (f, this),
    IndividualVirtualMemory_ (f, this),
    IndividualDiskSpace_ (f, this),
    TotalCPUTime_ (f, this),
    TotalCPUCount_ (f, this),
    TotalPhysicalMemory_ (f, this),
    TotalVirtualMemory_ (f, this),
    TotalDiskSpace_ (f, this),
    TotalResourceCount_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void Resources_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CandidateHosts
      //
      if (n.name () == "CandidateHosts" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< CandidateHosts_type > r (
          CandidateHosts_traits::create (i, f, this));

        if (!this->CandidateHosts ())
        {
          this->CandidateHosts (r);
          continue;
        }
      }

      // FileSystem
      //
      if (n.name () == "FileSystem" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< FileSystem_type > r (
          FileSystem_traits::create (i, f, this));

        this->FileSystem ().push_back (r);
        continue;
      }

      // ExclusiveExecution
      //
      if (n.name () == "ExclusiveExecution" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        if (!this->ExclusiveExecution ())
        {
          this->ExclusiveExecution (ExclusiveExecution_traits::create (i, f, this));
          continue;
        }
      }

      // OperatingSystem
      //
      if (n.name () == "OperatingSystem" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< OperatingSystem_type > r (
          OperatingSystem_traits::create (i, f, this));

        if (!this->OperatingSystem ())
        {
          this->OperatingSystem (r);
          continue;
        }
      }

      // CPUArchitecture
      //
      if (n.name () == "CPUArchitecture" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< CPUArchitecture_type > r (
          CPUArchitecture_traits::create (i, f, this));

        if (!this->CPUArchitecture ())
        {
          this->CPUArchitecture (r);
          continue;
        }
      }

      // IndividualCPUSpeed
      //
      if (n.name () == "IndividualCPUSpeed" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualCPUSpeed_type > r (
          IndividualCPUSpeed_traits::create (i, f, this));

        if (!this->IndividualCPUSpeed ())
        {
          this->IndividualCPUSpeed (r);
          continue;
        }
      }

      // IndividualCPUTime
      //
      if (n.name () == "IndividualCPUTime" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualCPUTime_type > r (
          IndividualCPUTime_traits::create (i, f, this));

        if (!this->IndividualCPUTime ())
        {
          this->IndividualCPUTime (r);
          continue;
        }
      }

      // IndividualCPUCount
      //
      if (n.name () == "IndividualCPUCount" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualCPUCount_type > r (
          IndividualCPUCount_traits::create (i, f, this));

        if (!this->IndividualCPUCount ())
        {
          this->IndividualCPUCount (r);
          continue;
        }
      }

      // IndividualNetworkBandwidth
      //
      if (n.name () == "IndividualNetworkBandwidth" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualNetworkBandwidth_type > r (
          IndividualNetworkBandwidth_traits::create (i, f, this));

        if (!this->IndividualNetworkBandwidth ())
        {
          this->IndividualNetworkBandwidth (r);
          continue;
        }
      }

      // IndividualPhysicalMemory
      //
      if (n.name () == "IndividualPhysicalMemory" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualPhysicalMemory_type > r (
          IndividualPhysicalMemory_traits::create (i, f, this));

        if (!this->IndividualPhysicalMemory ())
        {
          this->IndividualPhysicalMemory (r);
          continue;
        }
      }

      // IndividualVirtualMemory
      //
      if (n.name () == "IndividualVirtualMemory" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualVirtualMemory_type > r (
          IndividualVirtualMemory_traits::create (i, f, this));

        if (!this->IndividualVirtualMemory ())
        {
          this->IndividualVirtualMemory (r);
          continue;
        }
      }

      // IndividualDiskSpace
      //
      if (n.name () == "IndividualDiskSpace" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< IndividualDiskSpace_type > r (
          IndividualDiskSpace_traits::create (i, f, this));

        if (!this->IndividualDiskSpace ())
        {
          this->IndividualDiskSpace (r);
          continue;
        }
      }

      // TotalCPUTime
      //
      if (n.name () == "TotalCPUTime" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< TotalCPUTime_type > r (
          TotalCPUTime_traits::create (i, f, this));

        if (!this->TotalCPUTime ())
        {
          this->TotalCPUTime (r);
          continue;
        }
      }

      // TotalCPUCount
      //
      if (n.name () == "TotalCPUCount" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< TotalCPUCount_type > r (
          TotalCPUCount_traits::create (i, f, this));

        if (!this->TotalCPUCount ())
        {
          this->TotalCPUCount (r);
          continue;
        }
      }

      // TotalPhysicalMemory
      //
      if (n.name () == "TotalPhysicalMemory" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< TotalPhysicalMemory_type > r (
          TotalPhysicalMemory_traits::create (i, f, this));

        if (!this->TotalPhysicalMemory ())
        {
          this->TotalPhysicalMemory (r);
          continue;
        }
      }

      // TotalVirtualMemory
      //
      if (n.name () == "TotalVirtualMemory" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< TotalVirtualMemory_type > r (
          TotalVirtualMemory_traits::create (i, f, this));

        if (!this->TotalVirtualMemory ())
        {
          this->TotalVirtualMemory (r);
          continue;
        }
      }

      // TotalDiskSpace
      //
      if (n.name () == "TotalDiskSpace" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< TotalDiskSpace_type > r (
          TotalDiskSpace_traits::create (i, f, this));

        if (!this->TotalDiskSpace ())
        {
          this->TotalDiskSpace (r);
          continue;
        }
      }

      // TotalResourceCount
      //
      if (n.name () == "TotalResourceCount" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< TotalResourceCount_type > r (
          TotalResourceCount_traits::create (i, f, this));

        if (!this->TotalResourceCount ())
        {
          this->TotalResourceCount (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  Resources_Type* Resources_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new Resources_Type (*this, f, c);
  }

  Resources_Type::
  ~Resources_Type ()
  {
  }

  // CandidateHosts_Type
  //

  CandidateHosts_Type::
  CandidateHosts_Type ()
  : ::xml_schema::type (),
    HostName_ (::xml_schema::flags (), this)
  {
  }

  CandidateHosts_Type::
  CandidateHosts_Type (const CandidateHosts_Type& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    HostName_ (x.HostName_, f, this)
  {
  }

  CandidateHosts_Type::
  CandidateHosts_Type (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    HostName_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void CandidateHosts_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // HostName
      //
      if (n.name () == "HostName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< HostName_type > r (
          HostName_traits::create (i, f, this));

        this->HostName ().push_back (r);
        continue;
      }

      break;
    }
  }

  CandidateHosts_Type* CandidateHosts_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new CandidateHosts_Type (*this, f, c);
  }

  CandidateHosts_Type::
  ~CandidateHosts_Type ()
  {
  }

  // CPUArchitecture_Type
  //

  CPUArchitecture_Type::
  CPUArchitecture_Type (const CPUArchitectureName_type& CPUArchitectureName)
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    CPUArchitectureName_ (CPUArchitectureName, ::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  CPUArchitecture_Type::
  CPUArchitecture_Type (const CPUArchitecture_Type& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    CPUArchitectureName_ (x.CPUArchitectureName_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  CPUArchitecture_Type::
  CPUArchitecture_Type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    CPUArchitectureName_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void CPUArchitecture_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // CPUArchitectureName
      //
      if (n.name () == "CPUArchitectureName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< CPUArchitectureName_type > r (
          CPUArchitectureName_traits::create (i, f, this));

        if (!CPUArchitectureName_.present ())
        {
          this->CPUArchitectureName (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    if (!CPUArchitectureName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CPUArchitectureName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  CPUArchitecture_Type* CPUArchitecture_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new CPUArchitecture_Type (*this, f, c);
  }

  CPUArchitecture_Type::
  ~CPUArchitecture_Type ()
  {
  }

  // FileSystem_Type
  //

  FileSystem_Type::
  FileSystem_Type (const name_type& name)
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    FileSystemType_ (::xml_schema::flags (), this),
    Description_ (::xml_schema::flags (), this),
    MountPoint_ (::xml_schema::flags (), this),
    DiskSpace_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    name_ (name, ::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  FileSystem_Type::
  FileSystem_Type (const FileSystem_Type& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    FileSystemType_ (x.FileSystemType_, f, this),
    Description_ (x.Description_, f, this),
    MountPoint_ (x.MountPoint_, f, this),
    DiskSpace_ (x.DiskSpace_, f, this),
    any_ (x.any_, this->dom_document ()),
    name_ (x.name_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  FileSystem_Type::
  FileSystem_Type (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    FileSystemType_ (f, this),
    Description_ (f, this),
    MountPoint_ (f, this),
    DiskSpace_ (f, this),
    any_ (this->dom_document ()),
    name_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void FileSystem_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // FileSystemType
      //
      if (n.name () == "FileSystemType" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< FileSystemType_type > r (
          FileSystemType_traits::create (i, f, this));

        if (!this->FileSystemType ())
        {
          this->FileSystemType (r);
          continue;
        }
      }

      // Description
      //
      if (n.name () == "Description" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Description_type > r (
          Description_traits::create (i, f, this));

        if (!this->Description ())
        {
          this->Description (r);
          continue;
        }
      }

      // MountPoint
      //
      if (n.name () == "MountPoint" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< MountPoint_type > r (
          MountPoint_traits::create (i, f, this));

        if (!this->MountPoint ())
        {
          this->MountPoint (r);
          continue;
        }
      }

      // DiskSpace
      //
      if (n.name () == "DiskSpace" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< DiskSpace_type > r (
          DiskSpace_traits::create (i, f, this));

        if (!this->DiskSpace ())
        {
          this->DiskSpace (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name (r);
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "name",
        "");
    }
  }

  FileSystem_Type* FileSystem_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new FileSystem_Type (*this, f, c);
  }

  FileSystem_Type::
  ~FileSystem_Type ()
  {
  }

  // OperatingSystem_Type
  //

  OperatingSystem_Type::
  OperatingSystem_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    OperatingSystemType_ (::xml_schema::flags (), this),
    OperatingSystemVersion_ (::xml_schema::flags (), this),
    Description_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  OperatingSystem_Type::
  OperatingSystem_Type (const OperatingSystem_Type& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    OperatingSystemType_ (x.OperatingSystemType_, f, this),
    OperatingSystemVersion_ (x.OperatingSystemVersion_, f, this),
    Description_ (x.Description_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  OperatingSystem_Type::
  OperatingSystem_Type (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    OperatingSystemType_ (f, this),
    OperatingSystemVersion_ (f, this),
    Description_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void OperatingSystem_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OperatingSystemType
      //
      if (n.name () == "OperatingSystemType" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< OperatingSystemType_type > r (
          OperatingSystemType_traits::create (i, f, this));

        if (!this->OperatingSystemType ())
        {
          this->OperatingSystemType (r);
          continue;
        }
      }

      // OperatingSystemVersion
      //
      if (n.name () == "OperatingSystemVersion" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< OperatingSystemVersion_type > r (
          OperatingSystemVersion_traits::create (i, f, this));

        if (!this->OperatingSystemVersion ())
        {
          this->OperatingSystemVersion (r);
          continue;
        }
      }

      // Description
      //
      if (n.name () == "Description" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Description_type > r (
          Description_traits::create (i, f, this));

        if (!this->Description ())
        {
          this->Description (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  OperatingSystem_Type* OperatingSystem_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new OperatingSystem_Type (*this, f, c);
  }

  OperatingSystem_Type::
  ~OperatingSystem_Type ()
  {
  }

  // OperatingSystemType_Type
  //

  OperatingSystemType_Type::
  OperatingSystemType_Type (const OperatingSystemName_type& OperatingSystemName)
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    OperatingSystemName_ (OperatingSystemName, ::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  OperatingSystemType_Type::
  OperatingSystemType_Type (const OperatingSystemType_Type& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    OperatingSystemName_ (x.OperatingSystemName_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  OperatingSystemType_Type::
  OperatingSystemType_Type (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    OperatingSystemName_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void OperatingSystemType_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // OperatingSystemName
      //
      if (n.name () == "OperatingSystemName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< OperatingSystemName_type > r (
          OperatingSystemName_traits::create (i, f, this));

        if (!OperatingSystemName_.present ())
        {
          this->OperatingSystemName (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    if (!OperatingSystemName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "OperatingSystemName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  OperatingSystemType_Type* OperatingSystemType_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new OperatingSystemType_Type (*this, f, c);
  }

  OperatingSystemType_Type::
  ~OperatingSystemType_Type ()
  {
  }

  // DataStaging_Type
  //

  DataStaging_Type::
  DataStaging_Type (const FileName_type& FileName,
                    const CreationFlag_type& CreationFlag)
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    FileName_ (FileName, ::xml_schema::flags (), this),
    FilesystemName_ (::xml_schema::flags (), this),
    CreationFlag_ (CreationFlag, ::xml_schema::flags (), this),
    DeleteOnTermination_ (::xml_schema::flags (), this),
    Source_ (::xml_schema::flags (), this),
    Target_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    name_ (::xml_schema::flags (), this),
    any_attribute_ (this->dom_document ())
  {
  }

  DataStaging_Type::
  DataStaging_Type (const DataStaging_Type& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    FileName_ (x.FileName_, f, this),
    FilesystemName_ (x.FilesystemName_, f, this),
    CreationFlag_ (x.CreationFlag_, f, this),
    DeleteOnTermination_ (x.DeleteOnTermination_, f, this),
    Source_ (x.Source_, f, this),
    Target_ (x.Target_, f, this),
    any_ (x.any_, this->dom_document ()),
    name_ (x.name_, f, this),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  DataStaging_Type::
  DataStaging_Type (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    FileName_ (f, this),
    FilesystemName_ (f, this),
    CreationFlag_ (f, this),
    DeleteOnTermination_ (f, this),
    Source_ (f, this),
    Target_ (f, this),
    any_ (this->dom_document ()),
    name_ (f, this),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void DataStaging_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // FileName
      //
      if (n.name () == "FileName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< FileName_type > r (
          FileName_traits::create (i, f, this));

        if (!FileName_.present ())
        {
          this->FileName (r);
          continue;
        }
      }

      // FilesystemName
      //
      if (n.name () == "FilesystemName" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< FilesystemName_type > r (
          FilesystemName_traits::create (i, f, this));

        if (!this->FilesystemName ())
        {
          this->FilesystemName (r);
          continue;
        }
      }

      // CreationFlag
      //
      if (n.name () == "CreationFlag" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< CreationFlag_type > r (
          CreationFlag_traits::create (i, f, this));

        if (!CreationFlag_.present ())
        {
          this->CreationFlag (r);
          continue;
        }
      }

      // DeleteOnTermination
      //
      if (n.name () == "DeleteOnTermination" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        if (!this->DeleteOnTermination ())
        {
          this->DeleteOnTermination (DeleteOnTermination_traits::create (i, f, this));
          continue;
        }
      }

      // Source
      //
      if (n.name () == "Source" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Source_type > r (
          Source_traits::create (i, f, this));

        if (!this->Source ())
        {
          this->Source (r);
          continue;
        }
      }

      // Target
      //
      if (n.name () == "Target" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< Target_type > r (
          Target_traits::create (i, f, this));

        if (!this->Target ())
        {
          this->Target (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    if (!FileName_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "FileName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    if (!CreationFlag_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "CreationFlag",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        this->name (r);
        continue;
      }

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  DataStaging_Type* DataStaging_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new DataStaging_Type (*this, f, c);
  }

  DataStaging_Type::
  ~DataStaging_Type ()
  {
  }

  // SourceTarget_Type
  //

  SourceTarget_Type::
  SourceTarget_Type ()
  : ::xml_schema::type (),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    URI_ (::xml_schema::flags (), this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
  }

  SourceTarget_Type::
  SourceTarget_Type (const SourceTarget_Type& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    URI_ (x.URI_, f, this),
    any_ (x.any_, this->dom_document ()),
    any_attribute_ (x.any_attribute_, this->dom_document ())
  {
  }

  SourceTarget_Type::
  SourceTarget_Type (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    dom_document_ (::xsd::cxx::xml::dom::create_document< char > ()),
    URI_ (f, this),
    any_ (this->dom_document ()),
    any_attribute_ (this->dom_document ())
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void SourceTarget_Type::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // URI
      //
      if (n.name () == "URI" && n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
      {
        ::std::auto_ptr< URI_type > r (
          URI_traits::create (i, f, this));

        if (!this->URI ())
        {
          this->URI (r);
          continue;
        }
      }

      // any
      //
      if ((!n.namespace_ ().empty () && n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl"))
      {
        ::xercesc::DOMElement* r (
          static_cast< ::xercesc::DOMElement* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMElement* > (&i), true)));
        this->any ().push_back (r);
        continue;
      }

      break;
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // any_attribute
      //
      if ((!n.namespace_ ().empty () &&
           n.namespace_ () != "http://schemas.ggf.org/jsdl/2005/11/jsdl" &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< char > () &&
           n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< char > ()))
      {
        ::xercesc::DOMAttr* r (
          static_cast< ::xercesc::DOMAttr* > (
            this->dom_document ().importNode (
              const_cast< ::xercesc::DOMAttr* > (&i), true)));
        this->any_attribute ().insert (r);
        continue;
      }
    }
  }

  SourceTarget_Type* SourceTarget_Type::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new SourceTarget_Type (*this, f, c);
  }

  SourceTarget_Type::
  ~SourceTarget_Type ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace jsdl
{
  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
      ::jsdl::JobDefinition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
      ::jsdl::JobDefinition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
      ::jsdl::JobDefinition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobDefinition (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobDefinition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobDefinition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobDefinition (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobDefinition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobDefinition (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
      ::jsdl::JobDefinition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
      ::jsdl::JobDefinition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
      ::jsdl::JobDefinition (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
        ::jsdl::JobDefinition (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobDefinition" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::JobDefinition_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobDefinition",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::JobDefinition_Type >
  JobDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "JobDefinition" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::JobDefinition_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::JobDefinition_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobDefinition",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
      ::jsdl::JobDescription (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
      ::jsdl::JobDescription (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
      ::jsdl::JobDescription (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobDescription (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobDescription (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobDescription (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobDescription (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobDescription (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobDescription (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
      ::jsdl::JobDescription (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
      ::jsdl::JobDescription (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
      ::jsdl::JobDescription (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
        ::jsdl::JobDescription (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobDescription" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::JobDescription_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobDescription",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::JobDescription_Type >
  JobDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "JobDescription" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::JobDescription_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::JobDescription_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobDescription",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
      ::jsdl::JobIdentification (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
      ::jsdl::JobIdentification (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
      ::jsdl::JobIdentification (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobIdentification (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobIdentification (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobIdentification (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobIdentification (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobIdentification (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobIdentification (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
      ::jsdl::JobIdentification (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
      ::jsdl::JobIdentification (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
      ::jsdl::JobIdentification (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
        ::jsdl::JobIdentification (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobIdentification" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::JobIdentification_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobIdentification",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::JobIdentification_Type >
  JobIdentification (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "JobIdentification" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::JobIdentification_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::JobIdentification_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobIdentification",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::JobName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "JobName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::Description_Type > r (
      ::jsdl::Description (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Description_Type > r (
      ::jsdl::Description (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Description_Type > r (
      ::jsdl::Description (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Description (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Description (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Description (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Description (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Description (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Description (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::Description_Type > r (
      ::jsdl::Description (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Description_Type > r (
      ::jsdl::Description (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Description_Type > r (
      ::jsdl::Description (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::Description_Type > r (
        ::jsdl::Description (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Description" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::Description_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::Description_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Description",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::Description_Type >
  Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Description" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::Description_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::Description_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Description",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobAnnotation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobAnnotation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobAnnotation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobAnnotation (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobAnnotation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobAnnotation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobAnnotation (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobAnnotation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobAnnotation (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobAnnotation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobAnnotation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobAnnotation (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::JobAnnotation (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobAnnotation" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobAnnotation",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobAnnotation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "JobAnnotation" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobAnnotation",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobProject (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobProject (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobProject (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobProject (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobProject (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::JobProject (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobProject (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobProject (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::JobProject (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobProject (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobProject (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::JobProject (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::JobProject (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobProject" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobProject",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  JobProject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "JobProject" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "JobProject",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::Application_Type > r (
      ::jsdl::Application (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Application_Type > r (
      ::jsdl::Application (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Application_Type > r (
      ::jsdl::Application (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Application (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Application (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Application (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Application (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Application (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Application (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::Application_Type > r (
      ::jsdl::Application (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Application_Type > r (
      ::jsdl::Application (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Application_Type > r (
      ::jsdl::Application (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::Application_Type > r (
        ::jsdl::Application (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Application" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::Application_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::Application_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Application",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::Application_Type >
  Application (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Application" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::Application_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::Application_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Application",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ApplicationName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ApplicationName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ApplicationName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ApplicationName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ApplicationName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ApplicationName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::ApplicationName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ApplicationName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ApplicationName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ApplicationName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ApplicationName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ApplicationVersion (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ApplicationVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ApplicationVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ApplicationVersion (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ApplicationVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ApplicationVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::ApplicationVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::ApplicationVersion (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ApplicationVersion" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ApplicationVersion",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  ApplicationVersion (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ApplicationVersion" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ApplicationVersion",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::Resources_Type > r (
      ::jsdl::Resources (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Resources_Type > r (
      ::jsdl::Resources (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Resources_Type > r (
      ::jsdl::Resources (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Resources (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Resources (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Resources (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Resources (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Resources (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Resources (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::Resources_Type > r (
      ::jsdl::Resources (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Resources_Type > r (
      ::jsdl::Resources (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::Resources_Type > r (
      ::jsdl::Resources (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::Resources_Type > r (
        ::jsdl::Resources (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Resources" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::Resources_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::Resources_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Resources",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::Resources_Type >
  Resources (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Resources" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::Resources_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::Resources_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Resources",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
      ::jsdl::CandidateHosts (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
      ::jsdl::CandidateHosts (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
      ::jsdl::CandidateHosts (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CandidateHosts (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CandidateHosts (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CandidateHosts (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CandidateHosts (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CandidateHosts (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CandidateHosts (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
      ::jsdl::CandidateHosts (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
      ::jsdl::CandidateHosts (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
      ::jsdl::CandidateHosts (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
        ::jsdl::CandidateHosts (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CandidateHosts" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::CandidateHosts_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CandidateHosts",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::CandidateHosts_Type >
  CandidateHosts (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CandidateHosts" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::CandidateHosts_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::CandidateHosts_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CandidateHosts",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::HostName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::HostName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::HostName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::HostName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::HostName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::HostName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::HostName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::HostName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::HostName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::HostName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::HostName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::HostName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::HostName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "HostName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "HostName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  HostName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "HostName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "HostName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
      ::jsdl::OperatingSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
      ::jsdl::OperatingSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
      ::jsdl::OperatingSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystem (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystem (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
      ::jsdl::OperatingSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
      ::jsdl::OperatingSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
      ::jsdl::OperatingSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
        ::jsdl::OperatingSystem (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystem" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::OperatingSystem_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystem",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::OperatingSystem_Type >
  OperatingSystem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperatingSystem" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::OperatingSystem_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::OperatingSystem_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystem",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
      ::jsdl::OperatingSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
      ::jsdl::OperatingSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
      ::jsdl::OperatingSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemType (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemType (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
      ::jsdl::OperatingSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
      ::jsdl::OperatingSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
      ::jsdl::OperatingSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
        ::jsdl::OperatingSystemType (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystemType" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::OperatingSystemType_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystemType",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemType_Type >
  OperatingSystemType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperatingSystemType" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::OperatingSystemType_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::OperatingSystemType_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystemType",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::OperatingSystemVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::OperatingSystemVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::OperatingSystemVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemVersion (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemVersion (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemVersion (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::OperatingSystemVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::OperatingSystemVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::OperatingSystemVersion (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::OperatingSystemVersion (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystemVersion" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystemVersion",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  OperatingSystemVersion (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperatingSystemVersion" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystemVersion",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
      ::jsdl::OperatingSystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
      ::jsdl::OperatingSystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
      ::jsdl::OperatingSystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::OperatingSystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::OperatingSystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
      ::jsdl::OperatingSystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
      ::jsdl::OperatingSystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
      ::jsdl::OperatingSystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
        ::jsdl::OperatingSystemName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystemName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::OperatingSystemTypeEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystemName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration >
  OperatingSystemName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "OperatingSystemName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::OperatingSystemTypeEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::OperatingSystemTypeEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "OperatingSystemName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::ExclusiveExecution (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::ExclusiveExecution (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::ExclusiveExecution (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ExclusiveExecution (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ExclusiveExecution (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::ExclusiveExecution (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ExclusiveExecution (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ExclusiveExecution (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::ExclusiveExecution (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::ExclusiveExecution (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::ExclusiveExecution (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::ExclusiveExecution (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::boolean > r (
        ::jsdl::ExclusiveExecution (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ExclusiveExecution" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::boolean > r (
        new ::xml_schema::boolean (
          ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ExclusiveExecution",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  ExclusiveExecution (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "ExclusiveExecution" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::boolean > r (
        new ::xml_schema::boolean (
          ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "ExclusiveExecution",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
      ::jsdl::CPUArchitecture (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
      ::jsdl::CPUArchitecture (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
      ::jsdl::CPUArchitecture (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CPUArchitecture (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CPUArchitecture (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CPUArchitecture (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CPUArchitecture (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CPUArchitecture (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CPUArchitecture (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
      ::jsdl::CPUArchitecture (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
      ::jsdl::CPUArchitecture (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
      ::jsdl::CPUArchitecture (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
        ::jsdl::CPUArchitecture (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CPUArchitecture" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::CPUArchitecture_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CPUArchitecture",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::CPUArchitecture_Type >
  CPUArchitecture (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CPUArchitecture" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::CPUArchitecture_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::CPUArchitecture_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CPUArchitecture",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
      ::jsdl::CPUArchitectureName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
      ::jsdl::CPUArchitectureName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
      ::jsdl::CPUArchitectureName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CPUArchitectureName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CPUArchitectureName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CPUArchitectureName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CPUArchitectureName (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CPUArchitectureName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CPUArchitectureName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
      ::jsdl::CPUArchitectureName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
      ::jsdl::CPUArchitectureName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
      ::jsdl::CPUArchitectureName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
        ::jsdl::CPUArchitectureName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CPUArchitectureName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::ProcessorArchitectureEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CPUArchitectureName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration >
  CPUArchitectureName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CPUArchitectureName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::ProcessorArchitectureEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::ProcessorArchitectureEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CPUArchitectureName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
      ::jsdl::FileSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
      ::jsdl::FileSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
      ::jsdl::FileSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileSystem (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileSystem (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileSystem (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
      ::jsdl::FileSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
      ::jsdl::FileSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
      ::jsdl::FileSystem (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
        ::jsdl::FileSystem (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileSystem" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::FileSystem_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileSystem",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::FileSystem_Type >
  FileSystem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "FileSystem" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::FileSystem_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::FileSystem_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileSystem",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
      ::jsdl::FileSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
      ::jsdl::FileSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
      ::jsdl::FileSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileSystemType (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileSystemType (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileSystemType (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
      ::jsdl::FileSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
      ::jsdl::FileSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
      ::jsdl::FileSystemType (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
        ::jsdl::FileSystemType (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileSystemType" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::FileSystemTypeEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileSystemType",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration >
  FileSystemType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "FileSystemType" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::FileSystemTypeEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::FileSystemTypeEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileSystemType",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::MountPoint (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::MountPoint (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::MountPoint (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::MountPoint (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::MountPoint (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::MountPoint (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::MountPoint (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::MountPoint (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::MountPoint (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::MountPoint (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::MountPoint (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::MountPoint (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::MountPoint (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MountPoint" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MountPoint",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  MountPoint (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "MountPoint" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "MountPoint",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::DiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::DiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::DiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DiskSpace (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DiskSpace (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::DiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::DiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::DiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::DiskSpace (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DiskSpace",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  DiskSpace (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DiskSpace",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUTime (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUTime (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualCPUTime (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualCPUTime" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualCPUTime",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualCPUTime" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualCPUTime",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUSpeed (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUSpeed (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUSpeed (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUSpeed (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUSpeed (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUSpeed (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUSpeed (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUSpeed (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUSpeed (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUSpeed (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUSpeed (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUSpeed (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualCPUSpeed (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualCPUSpeed" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualCPUSpeed",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUSpeed (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualCPUSpeed" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualCPUSpeed",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUCount (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUCount (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualCPUCount (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualCPUCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualCPUCount",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualCPUCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualCPUCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualCPUCount",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualPhysicalMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualPhysicalMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualPhysicalMemory (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualPhysicalMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualPhysicalMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualPhysicalMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualPhysicalMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualPhysicalMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualVirtualMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualVirtualMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualVirtualMemory (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualVirtualMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualVirtualMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualVirtualMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualVirtualMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualVirtualMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualNetworkBandwidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualNetworkBandwidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualNetworkBandwidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualNetworkBandwidth (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualNetworkBandwidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualNetworkBandwidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualNetworkBandwidth (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualNetworkBandwidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualNetworkBandwidth (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualNetworkBandwidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualNetworkBandwidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualNetworkBandwidth (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualNetworkBandwidth (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualNetworkBandwidth" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualNetworkBandwidth",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualNetworkBandwidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualNetworkBandwidth" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualNetworkBandwidth",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualDiskSpace (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::IndividualDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualDiskSpace (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::IndividualDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::IndividualDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::IndividualDiskSpace (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualDiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualDiskSpace",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  IndividualDiskSpace (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "IndividualDiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "IndividualDiskSpace",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalCPUTime (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalCPUTime (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalCPUTime (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUTime (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::TotalCPUTime (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalCPUTime" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalCPUTime",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUTime (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "TotalCPUTime" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalCPUTime",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalCPUCount (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalCPUCount (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalCPUCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalCPUCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::TotalCPUCount (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalCPUCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalCPUCount",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalCPUCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "TotalCPUCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalCPUCount",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalPhysicalMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalPhysicalMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalPhysicalMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalPhysicalMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::TotalPhysicalMemory (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalPhysicalMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalPhysicalMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalPhysicalMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "TotalPhysicalMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalPhysicalMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalVirtualMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalVirtualMemory (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalVirtualMemory (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalVirtualMemory (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::TotalVirtualMemory (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalVirtualMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalVirtualMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalVirtualMemory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "TotalVirtualMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalVirtualMemory",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalDiskSpace (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalDiskSpace (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalDiskSpace (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalDiskSpace (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::TotalDiskSpace (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalDiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalDiskSpace",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalDiskSpace (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "TotalDiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalDiskSpace",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalResourceCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalResourceCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalResourceCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalResourceCount (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalResourceCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::TotalResourceCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalResourceCount (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalResourceCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::TotalResourceCount (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalResourceCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalResourceCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
      ::jsdl::TotalResourceCount (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::jsdl::TotalResourceCount (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalResourceCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalResourceCount",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::RangeValue_Type >
  TotalResourceCount (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "TotalResourceCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::RangeValue_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::RangeValue_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "TotalResourceCount",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
      ::jsdl::DataStaging (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
      ::jsdl::DataStaging (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
      ::jsdl::DataStaging (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DataStaging (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DataStaging (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DataStaging (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DataStaging (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DataStaging (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DataStaging (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
      ::jsdl::DataStaging (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
      ::jsdl::DataStaging (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
      ::jsdl::DataStaging (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
        ::jsdl::DataStaging (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DataStaging" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::DataStaging_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataStaging",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::DataStaging_Type >
  DataStaging (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DataStaging" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::DataStaging_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::DataStaging_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DataStaging",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::FileName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::FileName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::FileName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FileName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FileName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::FileName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::FileName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::jsdl::FileName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::jsdl::FileName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::string >
  FileName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "FileName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FileName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::ncname > r (
      ::jsdl::FilesystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::ncname > r (
      ::jsdl::FilesystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::ncname > r (
      ::jsdl::FilesystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FilesystemName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FilesystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::FilesystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FilesystemName (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FilesystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::FilesystemName (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::ncname > r (
      ::jsdl::FilesystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::ncname > r (
      ::jsdl::FilesystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::ncname > r (
      ::jsdl::FilesystemName (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::ncname > r (
        ::jsdl::FilesystemName (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FilesystemName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::ncname > r (
        ::xsd::cxx::tree::traits< ::xml_schema::ncname, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FilesystemName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::ncname >
  FilesystemName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "FilesystemName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::ncname > r (
        ::xsd::cxx::tree::traits< ::xml_schema::ncname, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FilesystemName",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
      ::jsdl::CreationFlag (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
      ::jsdl::CreationFlag (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
      ::jsdl::CreationFlag (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CreationFlag (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CreationFlag (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::CreationFlag (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CreationFlag (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CreationFlag (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::CreationFlag (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
      ::jsdl::CreationFlag (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
      ::jsdl::CreationFlag (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
      ::jsdl::CreationFlag (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
        ::jsdl::CreationFlag (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CreationFlag" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::CreationFlagEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CreationFlag",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::CreationFlagEnumeration >
  CreationFlag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "CreationFlag" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::CreationFlagEnumeration > r (
        ::xsd::cxx::tree::traits< ::jsdl::CreationFlagEnumeration, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "CreationFlag",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::DeleteOnTermination (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::DeleteOnTermination (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::DeleteOnTermination (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DeleteOnTermination (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DeleteOnTermination (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::DeleteOnTermination (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DeleteOnTermination (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DeleteOnTermination (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::DeleteOnTermination (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::DeleteOnTermination (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::DeleteOnTermination (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::boolean > r (
      ::jsdl::DeleteOnTermination (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::boolean > r (
        ::jsdl::DeleteOnTermination (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DeleteOnTermination" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::boolean > r (
        new ::xml_schema::boolean (
          ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DeleteOnTermination",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::boolean >
  DeleteOnTermination (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "DeleteOnTermination" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::boolean > r (
        new ::xml_schema::boolean (
          ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
            e, f, 0)));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "DeleteOnTermination",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Source (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Source (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Source (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Source (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Source (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Source (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Source (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Source (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Source (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Source (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Source (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Source (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
        ::jsdl::Source (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Source" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::SourceTarget_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Source",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Source (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Source" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::SourceTarget_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Source",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Target (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Target (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Target (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Target (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Target (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::Target (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Target (isrc, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Target (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::Target (isrc, h, f, p);
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Target (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Target (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
      ::jsdl::Target (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
        ::jsdl::Target (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Target" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::SourceTarget_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Target",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::jsdl::SourceTarget_Type >
  Target (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "Target" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::jsdl::SourceTarget_Type > r (
        ::xsd::cxx::tree::traits< ::jsdl::SourceTarget_Type, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "Target",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::uri > r (
      ::jsdl::URI (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::uri > r (
      ::jsdl::URI (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::uri > r (
      ::jsdl::URI (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::URI (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::URI (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::jsdl::URI (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::URI (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::URI (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::jsdl::URI (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::uri > r (
      ::jsdl::URI (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::uri > r (
      ::jsdl::URI (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::uri > r (
      ::jsdl::URI (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::uri > r (
        ::jsdl::URI (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "URI" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::uri > r (
        ::xsd::cxx::tree::traits< ::xml_schema::uri, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "URI",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }

  ::std::auto_ptr< ::xml_schema::uri >
  URI (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "URI" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      ::std::auto_ptr< ::xml_schema::uri > r (
        ::xsd::cxx::tree::traits< ::xml_schema::uri, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "URI",
      "http://schemas.ggf.org/jsdl/2005/11/jsdl");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace jsdl
{
  void
  operator<< (::xercesc::DOMElement& e, const ProcessorArchitectureEnumeration& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ProcessorArchitectureEnumeration& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ProcessorArchitectureEnumeration& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperatingSystemTypeEnumeration& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const OperatingSystemTypeEnumeration& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const OperatingSystemTypeEnumeration& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const FileSystemTypeEnumeration& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const FileSystemTypeEnumeration& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const FileSystemTypeEnumeration& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const CreationFlagEnumeration& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CreationFlagEnumeration& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CreationFlagEnumeration& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Description_Type& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a,const Description_Type& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const Description_Type& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Boundary_Type& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type >& > (i);

    // any_attribute
    //
    for (Boundary_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // exclusiveBound
    //
    if (i.exclusiveBound ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "exclusiveBound",
          e));

      a << *i.exclusiveBound ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Exact_Type& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::double_, char, ::xml_schema::simple_type >& > (i);

    // any_attribute
    //
    for (Exact_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // epsilon
    //
    if (i.epsilon ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "epsilon",
          e));

      a << *i.epsilon ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Range_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (Range_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // LowerBound
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "LowerBound",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.LowerBound ();
    }

    // UpperBound
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UpperBound",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.UpperBound ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const RangeValue_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (RangeValue_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // UpperBoundedRange
    //
    if (i.UpperBoundedRange ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "UpperBoundedRange",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.UpperBoundedRange ();
    }

    // LowerBoundedRange
    //
    if (i.LowerBoundedRange ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "LowerBoundedRange",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.LowerBoundedRange ();
    }

    // Exact
    //
    for (RangeValue_Type::Exact_const_iterator
         b (i.Exact ().begin ()), n (i.Exact ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Exact",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }

    // Range
    //
    for (RangeValue_Type::Range_const_iterator
         b (i.Range ().begin ()), n (i.Range ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Range",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const JobDefinition_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (JobDefinition_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // JobDescription
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JobDescription",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.JobDescription ();
    }

    // any
    //
    for (JobDefinition_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const JobDescription_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (JobDescription_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // JobIdentification
    //
    if (i.JobIdentification ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JobIdentification",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.JobIdentification ();
    }

    // Application
    //
    if (i.Application ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Application",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Application ();
    }

    // Resources
    //
    if (i.Resources ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Resources",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Resources ();
    }

    // DataStaging
    //
    for (JobDescription_Type::DataStaging_const_iterator
         b (i.DataStaging ().begin ()), n (i.DataStaging ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DataStaging",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }

    // any
    //
    for (JobDescription_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const JobIdentification_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (JobIdentification_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // JobName
    //
    if (i.JobName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JobName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.JobName ();
    }

    // Description
    //
    if (i.Description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Description",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Description ();
    }

    // JobAnnotation
    //
    for (JobIdentification_Type::JobAnnotation_const_iterator
         b (i.JobAnnotation ().begin ()), n (i.JobAnnotation ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JobAnnotation",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }

    // JobProject
    //
    for (JobIdentification_Type::JobProject_const_iterator
         b (i.JobProject ().begin ()), n (i.JobProject ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "JobProject",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }

    // any
    //
    for (JobIdentification_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Application_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (Application_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // ApplicationName
    //
    if (i.ApplicationName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ApplicationName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.ApplicationName ();
    }

    // ApplicationVersion
    //
    if (i.ApplicationVersion ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ApplicationVersion",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.ApplicationVersion ();
    }

    // Description
    //
    if (i.Description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Description",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Description ();
    }

    // any
    //
    for (Application_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Resources_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (Resources_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // CandidateHosts
    //
    if (i.CandidateHosts ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CandidateHosts",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.CandidateHosts ();
    }

    // FileSystem
    //
    for (Resources_Type::FileSystem_const_iterator
         b (i.FileSystem ().begin ()), n (i.FileSystem ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FileSystem",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }

    // ExclusiveExecution
    //
    if (i.ExclusiveExecution ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ExclusiveExecution",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.ExclusiveExecution ();
    }

    // OperatingSystem
    //
    if (i.OperatingSystem ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OperatingSystem",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.OperatingSystem ();
    }

    // CPUArchitecture
    //
    if (i.CPUArchitecture ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CPUArchitecture",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.CPUArchitecture ();
    }

    // IndividualCPUSpeed
    //
    if (i.IndividualCPUSpeed ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualCPUSpeed",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualCPUSpeed ();
    }

    // IndividualCPUTime
    //
    if (i.IndividualCPUTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualCPUTime",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualCPUTime ();
    }

    // IndividualCPUCount
    //
    if (i.IndividualCPUCount ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualCPUCount",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualCPUCount ();
    }

    // IndividualNetworkBandwidth
    //
    if (i.IndividualNetworkBandwidth ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualNetworkBandwidth",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualNetworkBandwidth ();
    }

    // IndividualPhysicalMemory
    //
    if (i.IndividualPhysicalMemory ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualPhysicalMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualPhysicalMemory ();
    }

    // IndividualVirtualMemory
    //
    if (i.IndividualVirtualMemory ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualVirtualMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualVirtualMemory ();
    }

    // IndividualDiskSpace
    //
    if (i.IndividualDiskSpace ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "IndividualDiskSpace",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.IndividualDiskSpace ();
    }

    // TotalCPUTime
    //
    if (i.TotalCPUTime ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TotalCPUTime",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.TotalCPUTime ();
    }

    // TotalCPUCount
    //
    if (i.TotalCPUCount ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TotalCPUCount",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.TotalCPUCount ();
    }

    // TotalPhysicalMemory
    //
    if (i.TotalPhysicalMemory ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TotalPhysicalMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.TotalPhysicalMemory ();
    }

    // TotalVirtualMemory
    //
    if (i.TotalVirtualMemory ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TotalVirtualMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.TotalVirtualMemory ();
    }

    // TotalDiskSpace
    //
    if (i.TotalDiskSpace ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TotalDiskSpace",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.TotalDiskSpace ();
    }

    // TotalResourceCount
    //
    if (i.TotalResourceCount ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "TotalResourceCount",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.TotalResourceCount ();
    }

    // any
    //
    for (Resources_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CandidateHosts_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // HostName
    //
    for (CandidateHosts_Type::HostName_const_iterator
         b (i.HostName ().begin ()), n (i.HostName ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "HostName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const CPUArchitecture_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (CPUArchitecture_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // CPUArchitectureName
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CPUArchitectureName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.CPUArchitectureName ();
    }

    // any
    //
    for (CPUArchitecture_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const FileSystem_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (FileSystem_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // FileSystemType
    //
    if (i.FileSystemType ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FileSystemType",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.FileSystemType ();
    }

    // Description
    //
    if (i.Description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Description",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Description ();
    }

    // MountPoint
    //
    if (i.MountPoint ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "MountPoint",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.MountPoint ();
    }

    // DiskSpace
    //
    if (i.DiskSpace ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DiskSpace",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.DiskSpace ();
    }

    // any
    //
    for (FileSystem_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << i.name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperatingSystem_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (OperatingSystem_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // OperatingSystemType
    //
    if (i.OperatingSystemType ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OperatingSystemType",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.OperatingSystemType ();
    }

    // OperatingSystemVersion
    //
    if (i.OperatingSystemVersion ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OperatingSystemVersion",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.OperatingSystemVersion ();
    }

    // Description
    //
    if (i.Description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Description",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Description ();
    }

    // any
    //
    for (OperatingSystem_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const OperatingSystemType_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (OperatingSystemType_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // OperatingSystemName
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "OperatingSystemName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.OperatingSystemName ();
    }

    // any
    //
    for (OperatingSystemType_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const DataStaging_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (DataStaging_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // FileName
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FileName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.FileName ();
    }

    // FilesystemName
    //
    if (i.FilesystemName ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "FilesystemName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.FilesystemName ();
    }

    // CreationFlag
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "CreationFlag",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << i.CreationFlag ();
    }

    // DeleteOnTermination
    //
    if (i.DeleteOnTermination ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "DeleteOnTermination",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.DeleteOnTermination ();
    }

    // Source
    //
    if (i.Source ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Source",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Source ();
    }

    // Target
    //
    if (i.Target ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Target",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.Target ();
    }

    // any
    //
    for (DataStaging_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }

    // name
    //
    if (i.name ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "name",
          e));

      a << *i.name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const SourceTarget_Type& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // any_attribute
    //
    for (SourceTarget_Type::any_attribute_const_iterator
         b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMAttr* a (
        static_cast< ::xercesc::DOMAttr* > (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

      if (a->getLocalName () == 0)
        e.setAttributeNode (a);
      else
        e.setAttributeNodeNS (a);
    }

    // URI
    //
    if (i.URI ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "URI",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          e));

      s << *i.URI ();
    }

    // any
    //
    for (SourceTarget_Type::any_const_iterator
         b (i.any ().begin ()), n (i.any ().end ());
         b != n; ++b)
    {
      e.appendChild (
        e.getOwnerDocument ()->importNode (
          const_cast< ::xercesc::DOMElement* > (&(*b)), true));
    }
  }

  void
  JobDefinition (::std::ostream& o,
                 const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDefinition (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobDefinition (::std::ostream& o,
                 const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDefinition (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDefinition (::std::ostream& o,
                 const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDefinition (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDefinition (::xercesc::XMLFormatTarget& t,
                 const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDefinition (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobDefinition (::xercesc::XMLFormatTarget& t,
                 const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDefinition (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDefinition (::xercesc::XMLFormatTarget& t,
                 const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDefinition (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDefinition (::xercesc::DOMDocument& d,
                 const ::jsdl::JobDefinition_Type& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobDefinition" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "JobDefinition",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobDefinition (const ::jsdl::JobDefinition_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "JobDefinition",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::JobDefinition (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  JobDescription (::std::ostream& o,
                  const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDescription (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobDescription (::std::ostream& o,
                  const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDescription (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDescription (::std::ostream& o,
                  const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDescription (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDescription (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDescription (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobDescription (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDescription (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDescription (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobDescription (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobDescription (::xercesc::DOMDocument& d,
                  const ::jsdl::JobDescription_Type& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobDescription" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "JobDescription",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobDescription (const ::jsdl::JobDescription_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "JobDescription",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::JobDescription (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  JobIdentification (::std::ostream& o,
                     const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobIdentification (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobIdentification (::std::ostream& o,
                     const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobIdentification (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobIdentification (::std::ostream& o,
                     const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobIdentification (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobIdentification (::xercesc::XMLFormatTarget& t,
                     const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobIdentification (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobIdentification (::xercesc::XMLFormatTarget& t,
                     const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobIdentification (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobIdentification (::xercesc::XMLFormatTarget& t,
                     const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobIdentification (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobIdentification (::xercesc::DOMDocument& d,
                     const ::jsdl::JobIdentification_Type& s,
                     ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobIdentification" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "JobIdentification",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobIdentification (const ::jsdl::JobIdentification_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "JobIdentification",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::JobIdentification (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  JobName (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobName (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobName (::std::ostream& o,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobName (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobName (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobName (::xercesc::XMLFormatTarget& t,
           const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobName (::xercesc::DOMDocument& d,
           const ::xml_schema::string& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "JobName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobName (const ::xml_schema::string& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "JobName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::JobName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Description (::std::ostream& o,
               const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Description (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Description (::std::ostream& o,
               const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Description (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Description (::std::ostream& o,
               const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Description (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Description (::xercesc::XMLFormatTarget& t,
               const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Description (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Description (::xercesc::XMLFormatTarget& t,
               const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Description (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Description (::xercesc::XMLFormatTarget& t,
               const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Description (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Description (::xercesc::DOMDocument& d,
               const ::jsdl::Description_Type& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Description" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Description",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Description (const ::jsdl::Description_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Description",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::Description (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  JobAnnotation (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobAnnotation (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobAnnotation (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobAnnotation (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobAnnotation (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobAnnotation (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobAnnotation (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobAnnotation (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobAnnotation (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobAnnotation (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobAnnotation (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobAnnotation (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobAnnotation (::xercesc::DOMDocument& d,
                 const ::xml_schema::string& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobAnnotation" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "JobAnnotation",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobAnnotation (const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "JobAnnotation",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::JobAnnotation (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  JobProject (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobProject (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobProject (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobProject (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobProject (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobProject (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobProject (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobProject (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  JobProject (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobProject (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobProject (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::JobProject (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  JobProject (::xercesc::DOMDocument& d,
              const ::xml_schema::string& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "JobProject" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "JobProject",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  JobProject (const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "JobProject",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::JobProject (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Application (::std::ostream& o,
               const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Application (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Application (::std::ostream& o,
               const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Application (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application (::std::ostream& o,
               const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Application (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application (::xercesc::XMLFormatTarget& t,
               const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Application (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Application (::xercesc::XMLFormatTarget& t,
               const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Application (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application (::xercesc::XMLFormatTarget& t,
               const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Application (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Application (::xercesc::DOMDocument& d,
               const ::jsdl::Application_Type& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Application" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Application",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Application (const ::jsdl::Application_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Application",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::Application (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  ApplicationName (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ApplicationName (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationName (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationName (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ApplicationName (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationName (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationName (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ApplicationName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ApplicationName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ApplicationName (const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ApplicationName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::ApplicationName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  ApplicationVersion (::std::ostream& o,
                      const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationVersion (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ApplicationVersion (::std::ostream& o,
                      const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationVersion (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationVersion (::std::ostream& o,
                      const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationVersion (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationVersion (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationVersion (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ApplicationVersion (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationVersion (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationVersion (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ApplicationVersion (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ApplicationVersion (::xercesc::DOMDocument& d,
                      const ::xml_schema::string& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ApplicationVersion" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ApplicationVersion",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ApplicationVersion (const ::xml_schema::string& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ApplicationVersion",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::ApplicationVersion (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Resources (::std::ostream& o,
             const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Resources (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Resources (::std::ostream& o,
             const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Resources (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Resources (::std::ostream& o,
             const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Resources (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Resources (::xercesc::XMLFormatTarget& t,
             const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Resources (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Resources (::xercesc::XMLFormatTarget& t,
             const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Resources (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Resources (::xercesc::XMLFormatTarget& t,
             const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Resources (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Resources (::xercesc::DOMDocument& d,
             const ::jsdl::Resources_Type& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Resources" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Resources",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Resources (const ::jsdl::Resources_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Resources",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::Resources (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  CandidateHosts (::std::ostream& o,
                  const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CandidateHosts (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CandidateHosts (::std::ostream& o,
                  const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CandidateHosts (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CandidateHosts (::std::ostream& o,
                  const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CandidateHosts (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CandidateHosts (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CandidateHosts (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CandidateHosts (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CandidateHosts (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CandidateHosts (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CandidateHosts (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CandidateHosts (::xercesc::DOMDocument& d,
                  const ::jsdl::CandidateHosts_Type& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CandidateHosts" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CandidateHosts",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CandidateHosts (const ::jsdl::CandidateHosts_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CandidateHosts",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::CandidateHosts (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  HostName (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::HostName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  HostName (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::HostName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  HostName (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::HostName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  HostName (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::HostName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  HostName (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::HostName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  HostName (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::HostName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  HostName (::xercesc::DOMDocument& d,
            const ::xml_schema::string& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "HostName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "HostName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  HostName (const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "HostName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::HostName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  OperatingSystem (::std::ostream& o,
                   const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystem (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystem (::std::ostream& o,
                   const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystem (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystem (::std::ostream& o,
                   const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystem (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystem (::xercesc::XMLFormatTarget& t,
                   const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystem (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystem (::xercesc::XMLFormatTarget& t,
                   const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystem (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystem (::xercesc::XMLFormatTarget& t,
                   const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystem (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystem (::xercesc::DOMDocument& d,
                   const ::jsdl::OperatingSystem_Type& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystem" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperatingSystem",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystem (const ::jsdl::OperatingSystem_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "OperatingSystem",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::OperatingSystem (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  OperatingSystemType (::std::ostream& o,
                       const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemType (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystemType (::std::ostream& o,
                       const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemType (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemType (::std::ostream& o,
                       const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemType (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemType (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemType (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystemType (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemType (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemType (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemType (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemType (::xercesc::DOMDocument& d,
                       const ::jsdl::OperatingSystemType_Type& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystemType" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperatingSystemType",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystemType (const ::jsdl::OperatingSystemType_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "OperatingSystemType",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::OperatingSystemType (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  OperatingSystemVersion (::std::ostream& o,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemVersion (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystemVersion (::std::ostream& o,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemVersion (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemVersion (::std::ostream& o,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemVersion (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemVersion (::xercesc::XMLFormatTarget& t,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemVersion (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystemVersion (::xercesc::XMLFormatTarget& t,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::error_handler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemVersion (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemVersion (::xercesc::XMLFormatTarget& t,
                          const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xercesc::DOMErrorHandler& h,
                          const ::std::string& e,
                          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemVersion (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemVersion (::xercesc::DOMDocument& d,
                          const ::xml_schema::string& s,
                          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystemVersion" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperatingSystemVersion",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystemVersion (const ::xml_schema::string& s,
                          const ::xml_schema::namespace_infomap& m,
                          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "OperatingSystemVersion",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::OperatingSystemVersion (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  OperatingSystemName (::std::ostream& o,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystemName (::std::ostream& o,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemName (::std::ostream& o,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemName (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  OperatingSystemName (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemName (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::OperatingSystemName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  OperatingSystemName (::xercesc::DOMDocument& d,
                       const ::jsdl::OperatingSystemTypeEnumeration& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "OperatingSystemName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "OperatingSystemName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  OperatingSystemName (const ::jsdl::OperatingSystemTypeEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "OperatingSystemName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::OperatingSystemName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  ExclusiveExecution (::std::ostream& o,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ExclusiveExecution (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ExclusiveExecution (::std::ostream& o,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ExclusiveExecution (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ExclusiveExecution (::std::ostream& o,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ExclusiveExecution (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ExclusiveExecution (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ExclusiveExecution (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  ExclusiveExecution (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ExclusiveExecution (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ExclusiveExecution (::xercesc::XMLFormatTarget& t,
                      const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::ExclusiveExecution (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  ExclusiveExecution (::xercesc::DOMDocument& d,
                      const ::xml_schema::boolean& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "ExclusiveExecution" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "ExclusiveExecution",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  ExclusiveExecution (const ::xml_schema::boolean& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "ExclusiveExecution",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::ExclusiveExecution (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  CPUArchitecture (::std::ostream& o,
                   const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitecture (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CPUArchitecture (::std::ostream& o,
                   const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitecture (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitecture (::std::ostream& o,
                   const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitecture (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitecture (::xercesc::XMLFormatTarget& t,
                   const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitecture (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CPUArchitecture (::xercesc::XMLFormatTarget& t,
                   const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::error_handler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitecture (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitecture (::xercesc::XMLFormatTarget& t,
                   const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xercesc::DOMErrorHandler& h,
                   const ::std::string& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitecture (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitecture (::xercesc::DOMDocument& d,
                   const ::jsdl::CPUArchitecture_Type& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CPUArchitecture" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CPUArchitecture",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CPUArchitecture (const ::jsdl::CPUArchitecture_Type& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CPUArchitecture",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::CPUArchitecture (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  CPUArchitectureName (::std::ostream& o,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitectureName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CPUArchitectureName (::std::ostream& o,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitectureName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitectureName (::std::ostream& o,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitectureName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitectureName (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitectureName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CPUArchitectureName (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitectureName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitectureName (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CPUArchitectureName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CPUArchitectureName (::xercesc::DOMDocument& d,
                       const ::jsdl::ProcessorArchitectureEnumeration& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CPUArchitectureName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CPUArchitectureName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CPUArchitectureName (const ::jsdl::ProcessorArchitectureEnumeration& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CPUArchitectureName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::CPUArchitectureName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  FileSystem (::std::ostream& o,
              const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystem (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileSystem (::std::ostream& o,
              const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystem (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystem (::std::ostream& o,
              const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystem (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystem (::xercesc::XMLFormatTarget& t,
              const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystem (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileSystem (::xercesc::XMLFormatTarget& t,
              const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystem (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystem (::xercesc::XMLFormatTarget& t,
              const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystem (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystem (::xercesc::DOMDocument& d,
              const ::jsdl::FileSystem_Type& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileSystem" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FileSystem",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileSystem (const ::jsdl::FileSystem_Type& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "FileSystem",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::FileSystem (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  FileSystemType (::std::ostream& o,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystemType (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileSystemType (::std::ostream& o,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystemType (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystemType (::std::ostream& o,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystemType (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystemType (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystemType (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileSystemType (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystemType (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystemType (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileSystemType (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileSystemType (::xercesc::DOMDocument& d,
                  const ::jsdl::FileSystemTypeEnumeration& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileSystemType" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FileSystemType",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileSystemType (const ::jsdl::FileSystemTypeEnumeration& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "FileSystemType",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::FileSystemType (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  MountPoint (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::MountPoint (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MountPoint (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::MountPoint (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MountPoint (::std::ostream& o,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::MountPoint (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MountPoint (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::MountPoint (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  MountPoint (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::error_handler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::MountPoint (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MountPoint (::xercesc::XMLFormatTarget& t,
              const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xercesc::DOMErrorHandler& h,
              const ::std::string& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::MountPoint (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  MountPoint (::xercesc::DOMDocument& d,
              const ::xml_schema::string& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "MountPoint" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "MountPoint",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  MountPoint (const ::xml_schema::string& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "MountPoint",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::MountPoint (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  DiskSpace (::std::ostream& o,
             const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DiskSpace (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DiskSpace (::std::ostream& o,
             const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DiskSpace (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DiskSpace (::std::ostream& o,
             const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DiskSpace (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DiskSpace (::xercesc::XMLFormatTarget& t,
             const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DiskSpace (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DiskSpace (::xercesc::XMLFormatTarget& t,
             const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::error_handler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DiskSpace (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DiskSpace (::xercesc::XMLFormatTarget& t,
             const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xercesc::DOMErrorHandler& h,
             const ::std::string& e,
             ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DiskSpace (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DiskSpace (::xercesc::DOMDocument& d,
             const ::jsdl::RangeValue_Type& s,
             ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DiskSpace",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DiskSpace (const ::jsdl::RangeValue_Type& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DiskSpace",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::DiskSpace (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualCPUTime (::std::ostream& o,
                     const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUTime (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualCPUTime (::std::ostream& o,
                     const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUTime (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUTime (::std::ostream& o,
                     const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUTime (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUTime (::xercesc::XMLFormatTarget& t,
                     const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUTime (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualCPUTime (::xercesc::XMLFormatTarget& t,
                     const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::error_handler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUTime (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUTime (::xercesc::XMLFormatTarget& t,
                     const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xercesc::DOMErrorHandler& h,
                     const ::std::string& e,
                     ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUTime (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUTime (::xercesc::DOMDocument& d,
                     const ::jsdl::RangeValue_Type& s,
                     ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualCPUTime" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualCPUTime",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualCPUTime (const ::jsdl::RangeValue_Type& s,
                     const ::xml_schema::namespace_infomap& m,
                     ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualCPUTime",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualCPUTime (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualCPUSpeed (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUSpeed (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualCPUSpeed (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUSpeed (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUSpeed (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUSpeed (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUSpeed (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUSpeed (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualCPUSpeed (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUSpeed (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUSpeed (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUSpeed (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUSpeed (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualCPUSpeed" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualCPUSpeed",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualCPUSpeed (const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualCPUSpeed",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualCPUSpeed (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualCPUCount (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUCount (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualCPUCount (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUCount (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUCount (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUCount (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUCount (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUCount (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualCPUCount (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUCount (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUCount (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualCPUCount (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualCPUCount (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualCPUCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualCPUCount",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualCPUCount (const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualCPUCount",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualCPUCount (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualPhysicalMemory (::std::ostream& o,
                            const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualPhysicalMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualPhysicalMemory (::std::ostream& o,
                            const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& h,
                            const ::std::string& e,
                            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualPhysicalMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualPhysicalMemory (::std::ostream& o,
                            const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::string& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualPhysicalMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualPhysicalMemory (::xercesc::XMLFormatTarget& t,
                            const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::string& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualPhysicalMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualPhysicalMemory (::xercesc::XMLFormatTarget& t,
                            const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::error_handler& h,
                            const ::std::string& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualPhysicalMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualPhysicalMemory (::xercesc::XMLFormatTarget& t,
                            const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xercesc::DOMErrorHandler& h,
                            const ::std::string& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualPhysicalMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualPhysicalMemory (::xercesc::DOMDocument& d,
                            const ::jsdl::RangeValue_Type& s,
                            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualPhysicalMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualPhysicalMemory",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualPhysicalMemory (const ::jsdl::RangeValue_Type& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualPhysicalMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualPhysicalMemory (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualVirtualMemory (::std::ostream& o,
                           const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualVirtualMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualVirtualMemory (::std::ostream& o,
                           const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::error_handler& h,
                           const ::std::string& e,
                           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualVirtualMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualVirtualMemory (::std::ostream& o,
                           const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::string& e,
                           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualVirtualMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualVirtualMemory (::xercesc::XMLFormatTarget& t,
                           const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           const ::std::string& e,
                           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualVirtualMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualVirtualMemory (::xercesc::XMLFormatTarget& t,
                           const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::error_handler& h,
                           const ::std::string& e,
                           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualVirtualMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualVirtualMemory (::xercesc::XMLFormatTarget& t,
                           const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xercesc::DOMErrorHandler& h,
                           const ::std::string& e,
                           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualVirtualMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualVirtualMemory (::xercesc::DOMDocument& d,
                           const ::jsdl::RangeValue_Type& s,
                           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualVirtualMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualVirtualMemory",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualVirtualMemory (const ::jsdl::RangeValue_Type& s,
                           const ::xml_schema::namespace_infomap& m,
                           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualVirtualMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualVirtualMemory (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualNetworkBandwidth (::std::ostream& o,
                              const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualNetworkBandwidth (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualNetworkBandwidth (::std::ostream& o,
                              const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::error_handler& h,
                              const ::std::string& e,
                              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualNetworkBandwidth (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualNetworkBandwidth (::std::ostream& o,
                              const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::string& e,
                              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualNetworkBandwidth (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualNetworkBandwidth (::xercesc::XMLFormatTarget& t,
                              const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::string& e,
                              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualNetworkBandwidth (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualNetworkBandwidth (::xercesc::XMLFormatTarget& t,
                              const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::error_handler& h,
                              const ::std::string& e,
                              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualNetworkBandwidth (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualNetworkBandwidth (::xercesc::XMLFormatTarget& t,
                              const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xercesc::DOMErrorHandler& h,
                              const ::std::string& e,
                              ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualNetworkBandwidth (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualNetworkBandwidth (::xercesc::DOMDocument& d,
                              const ::jsdl::RangeValue_Type& s,
                              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualNetworkBandwidth" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualNetworkBandwidth",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualNetworkBandwidth (const ::jsdl::RangeValue_Type& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualNetworkBandwidth",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualNetworkBandwidth (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  IndividualDiskSpace (::std::ostream& o,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualDiskSpace (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualDiskSpace (::std::ostream& o,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualDiskSpace (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualDiskSpace (::std::ostream& o,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualDiskSpace (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualDiskSpace (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualDiskSpace (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  IndividualDiskSpace (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualDiskSpace (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualDiskSpace (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::IndividualDiskSpace (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  IndividualDiskSpace (::xercesc::DOMDocument& d,
                       const ::jsdl::RangeValue_Type& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "IndividualDiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "IndividualDiskSpace",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  IndividualDiskSpace (const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "IndividualDiskSpace",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::IndividualDiskSpace (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  TotalCPUTime (::std::ostream& o,
                const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUTime (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalCPUTime (::std::ostream& o,
                const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUTime (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUTime (::std::ostream& o,
                const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUTime (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUTime (::xercesc::XMLFormatTarget& t,
                const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUTime (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalCPUTime (::xercesc::XMLFormatTarget& t,
                const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUTime (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUTime (::xercesc::XMLFormatTarget& t,
                const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUTime (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUTime (::xercesc::DOMDocument& d,
                const ::jsdl::RangeValue_Type& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalCPUTime" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalCPUTime",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalCPUTime (const ::jsdl::RangeValue_Type& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "TotalCPUTime",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::TotalCPUTime (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  TotalCPUCount (::std::ostream& o,
                 const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUCount (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalCPUCount (::std::ostream& o,
                 const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUCount (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUCount (::std::ostream& o,
                 const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUCount (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUCount (::xercesc::XMLFormatTarget& t,
                 const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUCount (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalCPUCount (::xercesc::XMLFormatTarget& t,
                 const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::error_handler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUCount (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUCount (::xercesc::XMLFormatTarget& t,
                 const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xercesc::DOMErrorHandler& h,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalCPUCount (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalCPUCount (::xercesc::DOMDocument& d,
                 const ::jsdl::RangeValue_Type& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalCPUCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalCPUCount",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalCPUCount (const ::jsdl::RangeValue_Type& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "TotalCPUCount",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::TotalCPUCount (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  TotalPhysicalMemory (::std::ostream& o,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalPhysicalMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalPhysicalMemory (::std::ostream& o,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalPhysicalMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalPhysicalMemory (::std::ostream& o,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalPhysicalMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalPhysicalMemory (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalPhysicalMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalPhysicalMemory (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalPhysicalMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalPhysicalMemory (::xercesc::XMLFormatTarget& t,
                       const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalPhysicalMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalPhysicalMemory (::xercesc::DOMDocument& d,
                       const ::jsdl::RangeValue_Type& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalPhysicalMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalPhysicalMemory",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalPhysicalMemory (const ::jsdl::RangeValue_Type& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "TotalPhysicalMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::TotalPhysicalMemory (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  TotalVirtualMemory (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalVirtualMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalVirtualMemory (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalVirtualMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalVirtualMemory (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalVirtualMemory (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalVirtualMemory (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalVirtualMemory (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalVirtualMemory (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalVirtualMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalVirtualMemory (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalVirtualMemory (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalVirtualMemory (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalVirtualMemory" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalVirtualMemory",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalVirtualMemory (const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "TotalVirtualMemory",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::TotalVirtualMemory (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  TotalDiskSpace (::std::ostream& o,
                  const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalDiskSpace (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalDiskSpace (::std::ostream& o,
                  const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalDiskSpace (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalDiskSpace (::std::ostream& o,
                  const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalDiskSpace (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalDiskSpace (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalDiskSpace (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalDiskSpace (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalDiskSpace (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalDiskSpace (::xercesc::XMLFormatTarget& t,
                  const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalDiskSpace (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalDiskSpace (::xercesc::DOMDocument& d,
                  const ::jsdl::RangeValue_Type& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalDiskSpace" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalDiskSpace",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalDiskSpace (const ::jsdl::RangeValue_Type& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "TotalDiskSpace",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::TotalDiskSpace (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  TotalResourceCount (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalResourceCount (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalResourceCount (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalResourceCount (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalResourceCount (::std::ostream& o,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalResourceCount (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalResourceCount (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalResourceCount (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  TotalResourceCount (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::error_handler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalResourceCount (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalResourceCount (::xercesc::XMLFormatTarget& t,
                      const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xercesc::DOMErrorHandler& h,
                      const ::std::string& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::TotalResourceCount (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  TotalResourceCount (::xercesc::DOMDocument& d,
                      const ::jsdl::RangeValue_Type& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "TotalResourceCount" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "TotalResourceCount",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  TotalResourceCount (const ::jsdl::RangeValue_Type& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "TotalResourceCount",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::TotalResourceCount (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  DataStaging (::std::ostream& o,
               const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DataStaging (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DataStaging (::std::ostream& o,
               const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DataStaging (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataStaging (::std::ostream& o,
               const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DataStaging (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataStaging (::xercesc::XMLFormatTarget& t,
               const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DataStaging (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DataStaging (::xercesc::XMLFormatTarget& t,
               const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::error_handler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DataStaging (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataStaging (::xercesc::XMLFormatTarget& t,
               const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xercesc::DOMErrorHandler& h,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DataStaging (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DataStaging (::xercesc::DOMDocument& d,
               const ::jsdl::DataStaging_Type& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DataStaging" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DataStaging",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DataStaging (const ::jsdl::DataStaging_Type& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DataStaging",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::DataStaging (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  FileName (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileName (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileName (::std::ostream& o,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileName (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FileName (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::error_handler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileName (::xercesc::XMLFormatTarget& t,
            const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xercesc::DOMErrorHandler& h,
            const ::std::string& e,
            ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FileName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FileName (::xercesc::DOMDocument& d,
            const ::xml_schema::string& s,
            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FileName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FileName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FileName (const ::xml_schema::string& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "FileName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::FileName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  FilesystemName (::std::ostream& o,
                  const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FilesystemName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FilesystemName (::std::ostream& o,
                  const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FilesystemName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FilesystemName (::std::ostream& o,
                  const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FilesystemName (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FilesystemName (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FilesystemName (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  FilesystemName (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::error_handler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FilesystemName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FilesystemName (::xercesc::XMLFormatTarget& t,
                  const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xercesc::DOMErrorHandler& h,
                  const ::std::string& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::FilesystemName (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  FilesystemName (::xercesc::DOMDocument& d,
                  const ::xml_schema::ncname& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "FilesystemName" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "FilesystemName",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  FilesystemName (const ::xml_schema::ncname& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "FilesystemName",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::FilesystemName (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  CreationFlag (::std::ostream& o,
                const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CreationFlag (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CreationFlag (::std::ostream& o,
                const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CreationFlag (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CreationFlag (::std::ostream& o,
                const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CreationFlag (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CreationFlag (::xercesc::XMLFormatTarget& t,
                const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CreationFlag (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  CreationFlag (::xercesc::XMLFormatTarget& t,
                const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::error_handler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CreationFlag (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CreationFlag (::xercesc::XMLFormatTarget& t,
                const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                ::xercesc::DOMErrorHandler& h,
                const ::std::string& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::CreationFlag (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  CreationFlag (::xercesc::DOMDocument& d,
                const ::jsdl::CreationFlagEnumeration& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "CreationFlag" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "CreationFlag",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  CreationFlag (const ::jsdl::CreationFlagEnumeration& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "CreationFlag",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::CreationFlag (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  DeleteOnTermination (::std::ostream& o,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DeleteOnTermination (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DeleteOnTermination (::std::ostream& o,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DeleteOnTermination (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DeleteOnTermination (::std::ostream& o,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DeleteOnTermination (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DeleteOnTermination (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DeleteOnTermination (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  DeleteOnTermination (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::error_handler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DeleteOnTermination (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DeleteOnTermination (::xercesc::XMLFormatTarget& t,
                       const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xercesc::DOMErrorHandler& h,
                       const ::std::string& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::DeleteOnTermination (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  DeleteOnTermination (::xercesc::DOMDocument& d,
                       const ::xml_schema::boolean& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "DeleteOnTermination" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "DeleteOnTermination",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  DeleteOnTermination (const ::xml_schema::boolean& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "DeleteOnTermination",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::DeleteOnTermination (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Source (::std::ostream& o,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Source (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Source (::std::ostream& o,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Source (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Source (::std::ostream& o,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Source (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Source (::xercesc::XMLFormatTarget& t,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Source (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Source (::xercesc::XMLFormatTarget& t,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Source (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Source (::xercesc::XMLFormatTarget& t,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Source (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Source (::xercesc::DOMDocument& d,
          const ::jsdl::SourceTarget_Type& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Source" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Source",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Source (const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Source",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::Source (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  Target (::std::ostream& o,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Target (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Target (::std::ostream& o,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Target (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Target (::std::ostream& o,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Target (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Target (::xercesc::XMLFormatTarget& t,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Target (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  Target (::xercesc::XMLFormatTarget& t,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Target (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Target (::xercesc::XMLFormatTarget& t,
          const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::Target (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  Target (::xercesc::DOMDocument& d,
          const ::jsdl::SourceTarget_Type& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "Target" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "Target",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  Target (const ::jsdl::SourceTarget_Type& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "Target",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::Target (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  URI (::std::ostream& o,
       const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::URI (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  URI (::std::ostream& o,
       const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::error_handler& h,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::URI (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  URI (::std::ostream& o,
       const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       ::xercesc::DOMErrorHandler& h,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::URI (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  URI (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::URI (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  URI (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::error_handler& h,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::URI (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  URI (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       ::xercesc::DOMErrorHandler& h,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::jsdl::URI (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  URI (::xercesc::DOMDocument& d,
       const ::xml_schema::uri& s,
       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "URI" &&
        n.namespace_ () == "http://schemas.ggf.org/jsdl/2005/11/jsdl")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "URI",
        "http://schemas.ggf.org/jsdl/2005/11/jsdl");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  URI (const ::xml_schema::uri& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "URI",
          "http://schemas.ggf.org/jsdl/2005/11/jsdl",
          m, f));

      ::jsdl::URI (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

