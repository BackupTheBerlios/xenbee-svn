* Alexander Petry <petry@itwm.fhg.de>:
	* xml messages are split into 3 kinds of messages
		* ObjectEvents (template class) holds the xml-object part (class generated by xsd)
		* XMLEvent holds the generic DOMDocument
		* the regular MessageEvent holds the string representation of the DOM
    * to transform these messages into each other, new strategies have been implemented:
        * XMLDataBinder takes two template parameters that define what class gets generated and which "parser" should be used
            * takes an XMLEvent and generates a specialized version of ObjectEvent
        * XMLDataUnbinder does the reverse thing
            * takes a specialized version of ObjectEvent and generates an XMLEvent
        * for an example, please have a look at the XbeXMLMessageHandling.hpp file
    * those changes where needed to integrate the xml-security stuff, which did not work properly and we also gain the full access to DOMDocuments
    * two new strategies have been implemented that take care of XML-Signing and validation
		* WARNING: they are not finished yet (both use a fixed pre-shared key), take them more as a proof of concept
    * X.509 certificates must still be added
    * the XbeLibUtils class now provides two new methods "parse" and "serialize" to easily parse input streams to DOMDocuments and vice versa
    * the class uses a "XMLParserPool" which may hold a number of parsers that can be used by several different threads
        * locking and parser-instantiation on demand are implemented
        * this class was needed to ensure thread-safety for xml-parsing strategies (threads cannot share the same parser, and instantiation per message would be too expensive)
