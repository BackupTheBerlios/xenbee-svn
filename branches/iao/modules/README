* Files added/created:
	/var/lib/xenbeed/
	`+- xenbeed-socket
	/var/run/xenbeed/

PROBLEMS:
=========
	* VERY SEVERE:
		* starting of more than 4 instances at a time results in reboot of host

Design idea
===========
	xenbeed:

	InstanceManager (server side):
		* newInstance()
		* startInstance(instance-config)
			* config: mac, kernel, initrd, images
			* throws: InstanceCreationError
			* registers instance

submit job:
	1. check validity
	2. check security context
	3. create instance placeholder (create spool directory: /srv/xen-images/domains/[uuid]/)
	4. retrieve defined images to spool
	5. if all images available, assign to instance (kernel, root, swap, additional stuff)
		convention: sda1 - root, sda2 - swap, etc.
	6. check reservations
	7. if can be started: start instance


Communication:
==============

	* xenbee daemon connects to STOMP server and subscribes to the queue:
		/queue/xenbee/daemon

	* a client requesting some action etc. acts as follows:
		* create a UUID u
		* subscribe to /queue/xenbee/client/<u>
		* send messages to the daemon "destination: /queue/xenbee/daemon" and include the header field:
			client-id: <u>

	* answers are then sent from the daemon to the client using the described queue

	* Example:
		Client A: uuid() results in 912f2f3b-ba0d-4467-a72b-d6f932cea9c7
		Message:

		SEND
		destination: /queue/xenbee/daemon
		client-id: 912f2f3b-ba0d-4467-a72b-d6f932cea9c7
		
		hello

File Retrieval:
===============

	call regularly:
		* mgr.startInstances():
			* start startable instances
		* mgr.retrieveFiles():
			* retrieve pending files
	inst = mgr.newInstance(...)
	inst.addFile(...):
		push to queue
	

Task creation:
==============

	* on submission create a new task and store the ISDL document with
          it
	* task represents the front-end view
	* task gets assigned an instance
	* files are retrieved/created for the instance
	* when the files are all ready and a current slot is available, the instance may be started and
          the task executed

	* scheduler manages the tasks according their states:
	     - created tasks (recently submitted, no files retrieved yet)
	       among these, the scheduler chooses the next task, whose
	       files will be transfered next

	     - pending tasks, tasks that have all files transfered and are
               ready to be started

	     - running tasks, the set of tasks currently being executed

	     - finished tasks, task has finished, files need to be staged
               out
	       
	     - closed tasks, all files staged out


Bugs found:
===========
	* python logging: line-number output FIXED
	* xen: 4 instances make the host-system freeze
	* xen: fast starting of instances results in 2 instances, that may use the same MAC/IP

	java       8480  root   18u  IPv6 129526       TCP 10.199.136.100:61613->10.199.136.102:1642 (ESTABLISHED)
	java       8480  root   21u  IPv6 129527       TCP 10.199.136.100:61613->10.199.136.102:1936 (ESTABLISHED)

	instance 1: python    2681 root    7u  IPv4   7415       TCP 10.199.136.102:1642->10.199.136.100:61613 (ESTABLISHED)
	instance 2: python    2681 root    7u  IPv4   7366       TCP 10.199.136.102:1936->10.199.136.100:61613 (ESTABLISHED)

