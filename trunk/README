              Xen-based Execution Environment
              ===============================


The system contains several progams and daemons, that taken together
build up the execution environment. These programs are:

    * xbed
    
        The daemon  handling user requests and  starting up instances,
        i.e. the 'heart' of the system.
        
    * xbeinstd
    
        The daemon that must be  running on all instances. This daemon
        is responsible  for 'managing' a single  instance, that means,
        he is responsible for starting up the real user task.

        For an  user, that means in  particular, he has  to make sure,
        that  this daemon  will be  started in  his image  during boot
        up. If  that does  not happen, the  system asumes  an instance
        failure and aborts the job execution at all.

    * xbe
    
        The only  currently available user-client. This  client can be
        used to create and  confirm reservations as well as cancelling
        them later on.

        Note that  a reservation is always required  prior executing a
        task.


+==============+
|              |
| Requirements |
|              |
+==============+

Common Requirements:
        * python2.5
        * python-lxml (>= 1.1.2) (libxml2 and libxslt bindings for python)
        * python-m2crypto (OpenSSL bindings for python)
	* python-twisted (Networking framework for python)
	* python-zope-interfaces
        * activemq (or some server, that speaks the STOMP protocol)
        * the command line tools 'uuid' or 'uuidgen'
          (the e2fsprogs packages provides uuidgen)
        * the PYTHONPATH environment variable must contain the
          '<source>/modules' directory

Additional requirements for the 'xbed':
        * must run on the Xen-Dom0
        * a DHCP server that answers to the MAC addresses described below
        * python-libvirt (virtualization module for python that binds to xen)
	* python-pysqlite2 (for the cache database)
	* python-pycurl


+===========================+
|                           |
| Installation instructions |
|                           |
+===========================+

XEN:
----
	* install xen (using some other manual)
	* make sure that "(xend-unix-server yes)" is set, otherwise
	  libvirt will not work.

ActiveMQ:
---------
        * install the ActiveMQ package from:
              - http://activemq.apache.org/
        * the server must be reachable by the instances
        * configure it, so that it understands the STOMP wire protocol:

<transportConnectors>
  <transportConnector name="default" uri="tcp://<yourhost>:61616" discoveryUri="multicast://default">
  <transportConnector name="stomp"   uri="stomp://<yourhost>:61613"/>
</transportConnectors>



Any of the following tools provide a little on-line help system, try '<tool> help'.

xbed:
-----
        * Currently only from source, no packages have been generated, yet.
        * obtain the source (svn) from:
              - http://developer.berlios.de/projects/xenbee/
	
        * assume the following directory structure:
        
             etc-+-xbed
                 |   `+-xbedrc
                 |    |
                 |    +-xbed.pem (X509 Certifcate with public key)
                 |    |
                 |    +-xbed-key.pem (private key in PEM format)
                 |    |
                 |    +-ca-cert.pem (Certificate Authority X.509)
                 |    |
                 |    +-mac-addresses
                 |    |
                 |    +-allowed-users
                 |    |
                 |    `-logging.rc
                 |
                 `-xml
                    `+--schema
                            `+--jsdl.xsd
                             |
                             +--jsdl-posix.xsd
                             |
                             `--xsdl.xsd



        Configuration File:
        ===================

             * -c or --config lets you specify a configuration file
             * this file holds all configuration information required
               for the xbed


        Certificates:
        =============
             * the daemon requires two certificates:
                     - the certificate (X.509) of the CA and
                     - his own one, which has been signed by the CA
             * and his private key (no password protection is currently supported)

                These files are stored in the structure above as
                        - xbed/ca-cert.pem
                        - xbed/xbed.pem
                        - xbed/xbed-key.pem
   
                All of them must be in the PEM format.

             * the following commandline options may be used to specify different paths:
                     --ca-cert obviously should point to the CA's certificate
                     --key     points to a file containing the private key
                     --x509    points to the X.509 certificate of the server

             * using the config file it would be:

                     [security]
                     privkey: %(etc)s/xbed/xbed-key.pem
                     pubkey: %(etc)s/xbed/xbed.pem
                     cacert: %(etc)s/xbed/ca-cert.pem

               for example.
   
        mac-addresses:
        ==============
             * this file contains a  list of MAC addresses paired with
               an IP, that may be used by the XEN instances:

                 Example:
                     # MAC             IP              comment
                     00:16:3e:00:00:01 192.168.0.1     # the 00:16:3e MAC address space has been reserved
                                                       # by the IANA solely to XEN

             * make shure, that no other network interfaces uses these MAC addresses!
             * the IP may actually be any URI that gets not parsed and is only made
               visible to the user (i.e. so that he may connect to his instance using
               SSH or something like that)

             * the following commandline option may be used to specify a different path:
                     --mac-file


             * using the config file it is:

                     [instance]
                     macdb: %(etc)s/xbed/mac-addresses

        allowed-users:
        ==============
             * this file contains a list of CommonNames, that are allowed to use the daemon
                 Example:
                    The subject of some client-certificate is:
                       subject= /OU=Persons/CN=test user 1

                    Then the 'allowed-users' file should contain a line with:
                       /OU=Persons/CN=test user 1
             * any other user trying to connect to the daemon will not be able to do so

             * this  file  is watched  for  changes  and the  internal
               database will be updated.

             * the following commandline option may be used to specify a different path:
                     --user-database

             * using the config file it is:

                     [security]
                     userdb: %(etc)s/xbed/allowed-users

        logging.rc:
        ===========
             * this  file contains  the configuration  for  the python
               'logging' module,  feel free to edit  the file provided
               with the source

             * the following commandline option may be used to specify a different path:
                     --logconf

             * using the config file:
             
                     [logging]
                     logconf: %(etc)s/xbed/logging.rc
                     ;logfile: /var/log/xenbee/xbed.log


        XML-Schema definitions:
        =======================
             * the path to the  directory where schema definitions are
               kept may be specified using the

                     --schema-dir

               command line option

             * using the config file:
             
                     [global]
                     shema_dir: %(etc)s/xml/schema

        Spool-directory:
        ================
             * the  spool directory will  contain all  information and
               files about a  given task in the system,  so make shure
               that there is plenty of available space.

             * in  the  very same  directory,  the 'cache'  (currently
               still a part of the daemon), will store its files.

                      --spool (default is /srv/xen-images/xenbee)

             * using the config file:
             
                     [global]
                     spool: /srv/xen-images/xenbee


             * The directory will be something like:
                 <spool>
                      `+---tasks
                       |      `+--UUID(task1)
                       |       |
                       |       `--UUID(task2)
                       |
                       `---cache
                              `+--UUID(entry1)
                               |            `+--data
                               `--UUID(entry2)
                                            `+--data


     Starting the daemon:
	 * The first start:
	      * make sure libvirt works (i.e. try the following in a
	        python shell:)
		   import libvirt
		   c = libvirt.open(None)
		   
		any exception  indicates that  it does not  work. Have
		you configured the xend to listen on a UNIX-socket and
		restarted it?
	      * create the directory where the logfile resides, the
		default will be /var/log/xenbee/xbed.log
     
         * To start the  daemon use 'xbed start' and  have a look into
           the logfile if something went wrong. You can also use 'xbed
           start -D' to prohibit the daemonization of the program.

         * use the '--uri' to specify the stomp server and the message
           queue on which the daemon acts.

                WARNING: the host given  in this URI must be reachable
                by the instances.

                Example:
                   stomp://<yourhost>[:61613]/xenbee.daemon.1

                This information gets  directly passed to the instance
                daemon, which uses it to connect back to the 'xbed'.

        * you can also use the config file to set the URI:

                [stomp]
                uri: stomp://<yourhost>/xenbee.daemon.1


xbeinstd (instance daemon):
---------------------------

        * the  instance  daemon  must  be started  during  the  system
          initialization  of an instance,  a script  that accomplishes
          this is in '<source>/etc/init.d/xbeinstd'.

        * if this  daemon does not start properly,  the 'xbed' asumes,
          that  the  instance  has  failed  and  will  abort  the  job
          execution.



xbe (command line tool):
------------------------
        * the  xbe program is  currently the  only way  for a  user to
          communicate with the daemon

        * the configuration file follows  nearly the same style as the
          one of the 'xbed'.

        Certificates:
        =============

             * use   the  configuration   file   $HOME/.xbe/xberc,  to
               configure the paths to the certificates.

                     [security]
                     privkey: ~/.xbe/user-key.pem
                     pubkey: ~/.xbe/user.pem
                     cacert: ~/.xbe/ca-cert.pem

        Connecting to the server:
        =========================

             * You have to specify  the stomp-server through which the
               'xbed'  can be  reached.  That can  be  done either  by
               specifying  it as an  option (-S)  or using  the config
               file:

                     [network]
                     server: stomp://<active-mq>/xenbee.daemon.1

Executing some task:
--------------------

        The  xbe tool  acts on  so called  'XSDL' documents,  that are
        actually JSDL-documents with  some extensions, examples can be
        found in the 'xsdl' directory of the source distribution.

        Currently  there is no  tool, that  generates those  files, so
        modify one of the example*.xsdl documents to your needs.


        1. make shure, that you can connect to the daemon, for
           instance by retrieving the list of cached entries:

               xbe showcache

           that  should result in  either an  empty list  or something
           useful. If an error  occured, then there is something wrong
           with your setup ;-( If you get an timeout or something like
           that, try using '-v' to get verbose output.

        2. execution of a job is  split into two parts, the first part
           is the  reservation part, that gives you  a special ticket,
           that is only known to you (and the server of course) and
           the second part is the confirmation part.

           For your  convenience, there is also  the command 'submit',
           which make automatically a reservation for you and confirms
           it afterwards.

        2a.    xbe reserve

                    Your ticket identification code:
                    ================================
                    
                    ****************************************
                    *                                      *
                    * f86d10a5-912b-46e3-95e2-3344614b3d71 *
                    *                                      *
                    ****************************************
                    
                    please remember that ticket-id, it will be
                    required in subsequent calls.
                    
                    A task has been registered for you as:
                    252cb37f-f703-4706-824e-058c0e2cdf92
                    
           write  down that  ticket id  somewhere, since  all requests
           according that task will require this ticket.

              xbe status f86d10a5-912b-46e3-95e2-3344614b3d71

                    <StatusList with 1 entry:
                      {'252cb37f-f703-4706-824e-058c0e2cdf92': {'Meta': {'times':
                                                                        {'submit-time': '1173926933.46'}},
                                                                'State': 'Pending:Reserved'}}>

           as you can see, your task is now in the state
           'Pending:Reserved'.


        2b. After reserving a slot, you must confirm it with some XSDL
            document.

               xbe confirm f86d10a5-912b-46e3-95e2-3344614b3d71 \
                  <path-to-xsdl>

            This will transfer the document to the server and initiate
            the staging and resource gathering process.

            After that you may query the status and watch what
            happens.

        3. At any time you have the possibility to terminate your task
           with

               xbe terminate f86d10a5-912b-46e3-95e2-3344614b3d71


Checking the status of your task:
---------------------------------

        Unfortunatly, you have to poll the current status of your
        task using 'xbe status <ticket-id>'.

	If your  desire is to  remove the status-entry after  the task
	has finished, you may give the '-r or --remove' option to 'xbe
	status'


Using the cache:
----------------

        * List what's in the cache:
              xbe showcache

          The  result will  a list  of  all entries  available in  the
          cache, consisting  of an  URI that you  can use to  refer to
          that particular cache  entry, a user-defined description and
          the type of cached data.

          The cache distinguishes four different types of data:
          
             * image, indicates that the  entry is an 'instance image'
               you can use. The image contains all necessary files and
               the  description should  indicate,  what application(s)
               can be used.

	     * kernel, this type of entry is, as you may have guessed,
               a  kernel-file (note:  the kernel  must be  a xen-aware
               kernel)

	     * initrd, if the used kernel requires an initrd image,
               here you can find it.

	     * data,   indicates  that   the  entry   represents  some
               arbitrary data.
	       
        * Add something to the cache:
              xbe cache -u <URI> --type <type> --desc "<description>"

	      The URI  must be reachable by the  xbed. The commandline
	      tool, waits  until the xbed says, that  it has completed
	      the caching.

        * In the XSDL all files  (in the staging operations as well as
          in the  location elements  for the instance)  are referenced
          using URIs. In  all that cases, you may as  well give an URI
          you received using 'xbe showcache'.
