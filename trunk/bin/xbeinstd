#!/usr/bin/env python

"""Xen based execution environment (XBE) instance daemon.

This  daemon  runs  within  a  Xen instance  and  is  responsible  for
application execution.

"""

import sys
from twisted.internet import reactor, protocol, utils
from twisted.protocols import basic
from stomp.proto import StompClientFactory, StompClient, StompTransport
from xenbeed import isdl
import xenbeed
xenbeed.initLogging("/tmp/xbeinstd.log")

class CommStation:
    def __init__(self):
        self.proc = None
        self.stomp = None

commStation = CommStation()

class ProcProtocol(protocol.ProcessProtocol):
    def __init__(self):
        self.errOutput = []
    
    def connectionMade(self):
        commStation.proc = self

    def outReceived(self, data):
        """parse the data and store it in some file."""
        print data

    def errReceived(self, data):
        self.errOutput.append(data)

    def processEnded(self, status_object):
        self.creator.processEnded(status_object)
        commStation.proc = None

JSDL_NS = "http://schemas.ggf.org/jsdl/2005/11/jsdl"
JSDL_POSIX_NS = "http://schemas.ggf.org/jsdl/2005/11/jsdl-posix"  

class ServerProtocol(isdl.XMLProtocol):
    def __init__(self, transport):
        self.proc = None
        isdl.XMLProtocol.__init__(self,transport)

    def do_JobDefinition(self, node):
        jobDesc = isdl.getChild(node, "JobDescription", JSDL_NS)
        jobIdent = isdl.getChild(jobDesc, "JobIdentification", JSDL_NS)
        j_name = isdl.getChild(jobIdent,
                               "JobName",
                               JSDL_NS).firstChild.nodeValue.strip()
        j_desc = isdl.getChild(jobIdent,
                               "Description",
                               JSDL_NS).firstChild.nodeValue.strip()
        app = isdl.getChild(jobDesc, "Application", JSDL_NS)
        appNam = isdl.getChild(app, "ApplicationName", JSDL_NS)
        posixApp = isdl.getChild(app, "POSIXApplication", JSDL_POSIX_NS)
        posixExecutable = isdl.getChild(posixApp,
                                        "Executable",
                                        JSDL_POSIX_NS).firstChild.nodeValue.strip()
        def _f(n):
            if n.firstChild:
                return n.firstChild.nodeValue.strip()
            else:
                return u''
            
        args = [_f(n) for n in posixApp.getElementsByTagNameNS(JSDL_POSIX_NS, "Argument")]
        cmdline = [ posixExecutable ]
        cmdline.extend(args)
        print "executing task: " + `cmdline`

        self.proc = ProcProtocol()
        self.proc.creator = self
        reactor.spawnProcess(self.proc, cmdline[0], cmdline, {})

    def processEnded(self, status_object):
        msg = isdl.XenBEEClientMessage()
        tsn = msg.createElement("TaskStatusNotification", msg.root)
        tf = msg.createElement("TaskFinished", tsn)
        msg.createElement("ExitCode", tf, str(status_object.value.exitCode))
        lastErrLine = "".join(map(str, self.proc.errOutput[-1:]))
        msg.createElement("ErrorOutput", tf, str(lastErrLine).strip())
        self.proc = None
        self.transport.write(str(msg))
        
class TestProtocol(StompClient):
    def connectedReceived(self, frame):
        print "connected"
        commStation.stomp = self
        self.subscribe("/queue/xenbee/instance/%s" % (self.factory.instanceId), auto_ack=True)
        self.send(queue="/queue/xenbee/daemon",
                  msg=str(isdl.XenBEEInstanceAvailable(self.factory.instanceId)),
                  header = { "instance-id": self.factory.instanceId})

    def messageReceived(self, msg):
        # parse the isdl message
        try:
            return self._messageReceived(msg)
        except Exception, e:
            print e

    def _messageReceived(self, msg):
        p = ServerProtocol(StompTransport(self, "/queue/xenbee/daemon"))
        return p.messageReceived(msg)

def main():
    f = StompClientFactory()
    f.instanceId = 1
    f.protocol = TestProtocol
    reactor.connectTCP('localhost', 61613, f)
    reactor.run()
    return 0

if __name__ == '__main__':
    sys.exit(main())
