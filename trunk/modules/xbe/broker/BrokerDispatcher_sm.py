# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : BrokerDispatcher.sm

import statemap

import xbe.broker.proto
import xbe.broker.job

class BrokerDispatcherState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def AddBid(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def AddPing(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def BookingRejectedAck(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def BookingReq(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def Close(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def CloseAck(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def Confirm(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def EndReq(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def PingReq(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def PollReq(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def ProviderBooked(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def ProviderClose(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def ProviderRejected(self, fsm, job, reqCtxt):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException, msg

class BrokerDispatcherFSM_Default(BrokerDispatcherState):
    pass

class BrokerDispatcherFSM_StInitial(BrokerDispatcherFSM_Default):

    def BookingReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inBookingReq(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StAuctionRunning)
            fsm.getState().Entry(fsm)

    def PingReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inPingReq(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StPingRunning)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StAuctionRunning(BrokerDispatcherFSM_Default):

    def AddBid(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.inAuctionBid(job, reqCtxt)
        finally:
            fsm.setState(endState)

    def EndReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        if ctxt.hasBids() == True :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.endSuccessfulAuction(job, reqCtxt)
            finally:
                fsm.setState(BrokerDispatcherFSM.StWaitForWinner)
                fsm.getState().Entry(fsm)
        elif ctxt.hasBids() == False :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.endFailureAuction(job, reqCtxt)
            finally:
                fsm.setState(BrokerDispatcherFSM.StRejectingWait)
                fsm.getState().Entry(fsm)
        else:
            BrokerDispatcherFSM_Default.EndReq(self, fsm, job, reqCtxt)
        
    def PollReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.waitForResponse(job, reqCtxt)
        finally:
            fsm.setState(endState)

class BrokerDispatcherFSM_StWaitForWinner(BrokerDispatcherFSM_Default):

    def PollReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.waitForAck(job, reqCtxt)
        finally:
            fsm.setState(endState)

    def ProviderBooked(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inProviderBooked(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StBooked)
            fsm.getState().Entry(fsm)

    def ProviderRejected(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inProviderBookingRejected(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StTerminated)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StRejectingWait(BrokerDispatcherFSM_Default):

    def BookingRejectedAck(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inBookingRejectedAck(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StTerminated)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StBooked(BrokerDispatcherFSM_Default):

    def Confirm(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inConfirm(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StConfirmed)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StConfirmed(BrokerDispatcherFSM_Default):

    def PollReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.waitForConfirm(job, reqCtxt)
        finally:
            fsm.setState(endState)

    def ProviderClose(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inProviderClose(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StClosingWaitAck)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StClosing(BrokerDispatcherFSM_Default):

    def Close(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.outClose(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StClosingWaitAck)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StClosingWaitAck(BrokerDispatcherFSM_Default):

    def CloseAck(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.inCloseAck(job, reqCtxt)
        finally:
            fsm.setState(BrokerDispatcherFSM.StTerminated)
            fsm.getState().Entry(fsm)

class BrokerDispatcherFSM_StTerminated(BrokerDispatcherFSM_Default):
    pass

class BrokerDispatcherFSM_StPingRunning(BrokerDispatcherFSM_Default):

    def AddPing(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.inCollectingPing(job, reqCtxt)
        finally:
            fsm.setState(endState)

    def EndReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        if ctxt.hasPongs() == True :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.endSuccessfulPing(job, reqCtxt)
            finally:
                fsm.setState(BrokerDispatcherFSM.StTerminated)
                fsm.getState().Entry(fsm)
        elif ctxt.hasPongs() == False :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.endFailurePing(job, reqCtxt)
            finally:
                fsm.setState(BrokerDispatcherFSM.StRejectingWait)
                fsm.getState().Entry(fsm)
        else:
            BrokerDispatcherFSM_Default.EndReq(self, fsm, job, reqCtxt)
        
    def PollReq(self, fsm, job, reqCtxt):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.waitForResponse(job, reqCtxt)
        finally:
            fsm.setState(endState)

class BrokerDispatcherFSM:

    StInitial = BrokerDispatcherFSM_StInitial('BrokerDispatcherFSM.StInitial', 0)
    StAuctionRunning = BrokerDispatcherFSM_StAuctionRunning('BrokerDispatcherFSM.StAuctionRunning', 1)
    StWaitForWinner = BrokerDispatcherFSM_StWaitForWinner('BrokerDispatcherFSM.StWaitForWinner', 2)
    StRejectingWait = BrokerDispatcherFSM_StRejectingWait('BrokerDispatcherFSM.StRejectingWait', 3)
    StBooked = BrokerDispatcherFSM_StBooked('BrokerDispatcherFSM.StBooked', 4)
    StConfirmed = BrokerDispatcherFSM_StConfirmed('BrokerDispatcherFSM.StConfirmed', 5)
    StClosing = BrokerDispatcherFSM_StClosing('BrokerDispatcherFSM.StClosing', 6)
    StClosingWaitAck = BrokerDispatcherFSM_StClosingWaitAck('BrokerDispatcherFSM.StClosingWaitAck', 7)
    StTerminated = BrokerDispatcherFSM_StTerminated('BrokerDispatcherFSM.StTerminated', 8)
    StPingRunning = BrokerDispatcherFSM_StPingRunning('BrokerDispatcherFSM.StPingRunning', 9)
    Default = BrokerDispatcherFSM_Default('BrokerDispatcherFSM.Default', -1)

class BrokerDispatcher_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, BrokerDispatcherFSM.StInitial)
        self._owner = owner
        self.setState(BrokerDispatcherFSM.StInitial)
        BrokerDispatcherFSM.StInitial.Entry(self)

    def AddBid(self, *arglist):
        self._transition = 'AddBid'
        self.getState().AddBid(self, *arglist)
        self._transition = None

    def AddPing(self, *arglist):
        self._transition = 'AddPing'
        self.getState().AddPing(self, *arglist)
        self._transition = None

    def BookingRejectedAck(self, *arglist):
        self._transition = 'BookingRejectedAck'
        self.getState().BookingRejectedAck(self, *arglist)
        self._transition = None

    def BookingReq(self, *arglist):
        self._transition = 'BookingReq'
        self.getState().BookingReq(self, *arglist)
        self._transition = None

    def Close(self, *arglist):
        self._transition = 'Close'
        self.getState().Close(self, *arglist)
        self._transition = None

    def CloseAck(self, *arglist):
        self._transition = 'CloseAck'
        self.getState().CloseAck(self, *arglist)
        self._transition = None

    def Confirm(self, *arglist):
        self._transition = 'Confirm'
        self.getState().Confirm(self, *arglist)
        self._transition = None

    def EndReq(self, *arglist):
        self._transition = 'EndReq'
        self.getState().EndReq(self, *arglist)
        self._transition = None

    def PingReq(self, *arglist):
        self._transition = 'PingReq'
        self.getState().PingReq(self, *arglist)
        self._transition = None

    def PollReq(self, *arglist):
        self._transition = 'PollReq'
        self.getState().PollReq(self, *arglist)
        self._transition = None

    def ProviderBooked(self, *arglist):
        self._transition = 'ProviderBooked'
        self.getState().ProviderBooked(self, *arglist)
        self._transition = None

    def ProviderClose(self, *arglist):
        self._transition = 'ProviderClose'
        self.getState().ProviderClose(self, *arglist)
        self._transition = None

    def ProviderRejected(self, *arglist):
        self._transition = 'ProviderRejected'
        self.getState().ProviderRejected(self, *arglist)
        self._transition = None

    def getState(self):
        if self._state == None:
            raise statemap.StateUndefinedException
        return self._state

    def getOwner(self):
        return self._owner

