// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xbe-msg.hpp"

namespace xbemsg
{
  // ErrorCode
  // 

  ErrorCode::
  ErrorCode (value v)
  : ::xml_schema::string (_xsd_ErrorCode_literals_[v])
  {
  }

  ErrorCode::
  ErrorCode (const char* v)
  : ::xml_schema::string (v)
  {
  }

  ErrorCode::
  ErrorCode (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  ErrorCode::
  ErrorCode (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  ErrorCode::
  ErrorCode (const ErrorCode& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  ErrorCode& ErrorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_ErrorCode_literals_[v]);

    return *this;
  }


  // message_t
  // 

  const message_t::header_type& message_t::
  header () const
  {
    return this->header_.get ();
  }

  message_t::header_type& message_t::
  header ()
  {
    return this->header_.get ();
  }

  void message_t::
  header (const header_type& x)
  {
    this->header_.set (x);
  }

  void message_t::
  header (::std::auto_ptr< header_type > x)
  {
    this->header_.set (x);
  }

  const message_t::body_type& message_t::
  body () const
  {
    return this->body_.get ();
  }

  message_t::body_type& message_t::
  body ()
  {
    return this->body_.get ();
  }

  void message_t::
  body (const body_type& x)
  {
    this->body_.set (x);
  }

  void message_t::
  body (::std::auto_ptr< body_type > x)
  {
    this->body_.set (x);
  }

  const message_t::protocol_version_type& message_t::
  protocol_version () const
  {
    return this->protocol_version_.get ();
  }

  message_t::protocol_version_type& message_t::
  protocol_version ()
  {
    return this->protocol_version_.get ();
  }

  void message_t::
  protocol_version (const protocol_version_type& x)
  {
    this->protocol_version_.set (x);
  }

  const message_t::protocol_version_type& message_t::
  protocol_version_default_value ()
  {
    return protocol_version_default_value_;
  }


  // header_t
  // 

  const header_t::from_type& header_t::
  from () const
  {
    return this->from_.get ();
  }

  header_t::from_type& header_t::
  from ()
  {
    return this->from_.get ();
  }

  void header_t::
  from (const from_type& x)
  {
    this->from_.set (x);
  }

  void header_t::
  from (::std::auto_ptr< from_type > x)
  {
    this->from_.set (x);
  }

  const header_t::to_type& header_t::
  to () const
  {
    return this->to_.get ();
  }

  header_t::to_type& header_t::
  to ()
  {
    return this->to_.get ();
  }

  void header_t::
  to (const to_type& x)
  {
    this->to_.set (x);
  }

  void header_t::
  to (::std::auto_ptr< to_type > x)
  {
    this->to_.set (x);
  }


  // body_t
  // 


  // error_t
  // 

  const error_t::error_code_type& error_t::
  error_code () const
  {
    return this->error_code_.get ();
  }

  error_t::error_code_type& error_t::
  error_code ()
  {
    return this->error_code_.get ();
  }

  void error_t::
  error_code (const error_code_type& x)
  {
    this->error_code_.set (x);
  }

  void error_t::
  error_code (::std::auto_ptr< error_code_type > x)
  {
    this->error_code_.set (x);
  }

  const error_t::description_optional& error_t::
  description () const
  {
    return this->description_;
  }

  error_t::description_optional& error_t::
  description ()
  {
    return this->description_;
  }

  void error_t::
  description (const description_type& x)
  {
    this->description_.set (x);
  }

  void error_t::
  description (const description_optional& x)
  {
    this->description_ = x;
  }

  void error_t::
  description (::std::auto_ptr< description_type > x)
  {
    this->description_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xbemsg
{
  // ErrorCode
  //

  ErrorCode::
  ErrorCode (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_ErrorCode_convert ();
  }

  ErrorCode::
  ErrorCode (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_ErrorCode_convert ();
  }

  ErrorCode::
  ErrorCode (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_ErrorCode_convert ();
  }

  ErrorCode* ErrorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new ErrorCode (*this, f, c);
  }

  ErrorCode::value ErrorCode::
  _xsd_ErrorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ErrorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ErrorCode_indexes_,
                      _xsd_ErrorCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ErrorCode_indexes_ + 5 || _xsd_ErrorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ErrorCode::
  _xsd_ErrorCode_literals_[5] =
  {
    "ENOERROR",
    "EBADR",
    "EPERM",
    "EENTITY",
    "EPROTO"
  };

  const ErrorCode::value ErrorCode::
  _xsd_ErrorCode_indexes_[5] =
  {
    ::xbemsg::ErrorCode::EBADR,
    ::xbemsg::ErrorCode::EENTITY,
    ::xbemsg::ErrorCode::ENOERROR,
    ::xbemsg::ErrorCode::EPERM,
    ::xbemsg::ErrorCode::EPROTO
  };

  // message_t
  //

  const message_t::protocol_version_type message_t::protocol_version_default_value_ (
    ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
      ::std::string ("1"), 0, 0, 0));

  message_t::
  message_t (const header_type& header,
             const body_type& body)
  : ::xml_schema::type (),
    header_ (header, ::xml_schema::flags (), this),
    body_ (body, ::xml_schema::flags (), this),
    protocol_version_ (protocol_version_default_value (), ::xml_schema::flags (), this)
  {
  }

  message_t::
  message_t (const message_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    header_ (x.header_, f, this),
    body_ (x.body_, f, this),
    protocol_version_ (x.protocol_version_, f, this)
  {
  }

  message_t::
  message_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    header_ (f, this),
    body_ (f, this),
    protocol_version_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void message_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // header
      //
      if (n.name () == "header" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
      {
        ::std::auto_ptr< header_type > r (
          header_traits::create (i, f, this));

        if (!header_.present ())
        {
          this->header (r);
          continue;
        }
      }

      // body
      //
      if (n.name () == "body" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
      {
        ::std::auto_ptr< body_type > r (
          body_traits::create (i, f, this));

        if (!body_.present ())
        {
          this->body (r);
          continue;
        }
      }

      break;
    }

    if (!header_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "header",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }

    if (!body_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "body",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "protocol-version" && n.namespace_ ().empty ())
      {
        this->protocol_version (protocol_version_traits::create (i, f, this));
        continue;
      }
    }

    if (!protocol_version_.present ())
    {
      this->protocol_version (
        protocol_version_traits::create (
          ::std::string ("1"),
          &p.element (), f, this));
    }
  }

  message_t* message_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new message_t (*this, f, c);
  }

  message_t::
  ~message_t ()
  {
  }

  // header_t
  //

  header_t::
  header_t (const from_type& from,
            const to_type& to)
  : ::xml_schema::type (),
    from_ (from, ::xml_schema::flags (), this),
    to_ (to, ::xml_schema::flags (), this)
  {
  }

  header_t::
  header_t (const header_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    from_ (x.from_, f, this),
    to_ (x.to_, f, this)
  {
  }

  header_t::
  header_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    from_ (f, this),
    to_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void header_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // from
      //
      if (n.name () == "from" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
      {
        ::std::auto_ptr< from_type > r (
          from_traits::create (i, f, this));

        if (!from_.present ())
        {
          this->from (r);
          continue;
        }
      }

      // to
      //
      if (n.name () == "to" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
      {
        ::std::auto_ptr< to_type > r (
          to_traits::create (i, f, this));

        if (!to_.present ())
        {
          this->to (r);
          continue;
        }
      }

      break;
    }

    if (!from_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "from",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }

    if (!to_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "to",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }
  }

  header_t* header_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new header_t (*this, f, c);
  }

  header_t::
  ~header_t ()
  {
  }

  // body_t
  //

  body_t::
  body_t ()
  : ::xml_schema::type ()
  {
  }

  body_t::
  body_t (const body_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  body_t::
  body_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void body_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      break;
    }
  }

  body_t* body_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new body_t (*this, f, c);
  }

  body_t::
  ~body_t ()
  {
  }

  // error_t
  //

  error_t::
  error_t (const error_code_type& error_code)
  : ::xml_schema::type (),
    error_code_ (error_code, ::xml_schema::flags (), this),
    description_ (::xml_schema::flags (), this)
  {
  }

  error_t::
  error_t (const error_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    error_code_ (x.error_code_, f, this),
    description_ (x.description_, f, this)
  {
  }

  error_t::
  error_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    error_code_ (f, this),
    description_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void error_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // error-code
      //
      if (n.name () == "error-code" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
      {
        ::std::auto_ptr< error_code_type > r (
          error_code_traits::create (i, f, this));

        if (!error_code_.present ())
        {
          this->error_code (r);
          continue;
        }
      }

      // description
      //
      if (n.name () == "description" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
      {
        ::std::auto_ptr< description_type > r (
          description_traits::create (i, f, this));

        if (!this->description ())
        {
          this->description (r);
          continue;
        }
      }

      break;
    }

    if (!error_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "error-code",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }
  }

  error_t* error_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new error_t (*this, f, c);
  }

  error_t::
  ~error_t ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xbemsg
{
  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbemsg::message_t > r (
      ::xbemsg::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::message_t > r (
      ::xbemsg::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::message_t > r (
      ::xbemsg::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::message (isrc, f, p);
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::message (isrc, f, p);
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbemsg::message_t > r (
      ::xbemsg::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::message_t > r (
      ::xbemsg::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::message_t > r (
      ::xbemsg::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xbemsg::message_t > r (
        ::xbemsg::message (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "message" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      ::std::auto_ptr< ::xbemsg::message_t > r (
        ::xsd::cxx::tree::traits< ::xbemsg::message_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "message",
      "http://www.xenbee.net/schema/2008/02/xbe-msg");
  }

  ::std::auto_ptr< ::xbemsg::message_t >
  message (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "message" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      ::std::auto_ptr< ::xbemsg::message_t > r (
        ::xsd::cxx::tree::traits< ::xbemsg::message_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "message",
      "http://www.xenbee.net/schema/2008/02/xbe-msg");
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbemsg::body_t > r (
      ::xbemsg::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::body_t > r (
      ::xbemsg::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::body_t > r (
      ::xbemsg::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::body (isrc, f, p);
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::body (isrc, f, p);
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbemsg::body_t > r (
      ::xbemsg::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::body_t > r (
      ::xbemsg::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::body_t > r (
      ::xbemsg::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xbemsg::body_t > r (
        ::xbemsg::body (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "body" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      ::std::auto_ptr< ::xbemsg::body_t > r (
        ::xsd::cxx::tree::traits< ::xbemsg::body_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "body",
      "http://www.xenbee.net/schema/2008/02/xbe-msg");
  }

  ::std::auto_ptr< ::xbemsg::body_t >
  body (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "body" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      ::std::auto_ptr< ::xbemsg::body_t > r (
        ::xsd::cxx::tree::traits< ::xbemsg::body_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "body",
      "http://www.xenbee.net/schema/2008/02/xbe-msg");
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbemsg::header_t > r (
      ::xbemsg::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::header_t > r (
      ::xbemsg::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::header_t > r (
      ::xbemsg::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::header (isrc, f, p);
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbemsg::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::header (isrc, f, p);
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbemsg::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbemsg::header_t > r (
      ::xbemsg::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::header_t > r (
      ::xbemsg::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbemsg::header_t > r (
      ::xbemsg::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xbemsg::header_t > r (
        ::xbemsg::header (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "header" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      ::std::auto_ptr< ::xbemsg::header_t > r (
        ::xsd::cxx::tree::traits< ::xbemsg::header_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "header",
      "http://www.xenbee.net/schema/2008/02/xbe-msg");
  }

  ::std::auto_ptr< ::xbemsg::header_t >
  header (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "header" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      ::std::auto_ptr< ::xbemsg::header_t > r (
        ::xsd::cxx::tree::traits< ::xbemsg::header_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "header",
      "http://www.xenbee.net/schema/2008/02/xbe-msg");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xbemsg
{
  void
  operator<< (::xercesc::DOMElement& e, const ErrorCode& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ErrorCode& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ErrorCode& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const message_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // header
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "header",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          e));

      s << i.header ();
    }

    // body
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "body",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          e));

      s << i.body ();
    }

    // protocol-version
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "protocol-version",
          e));

      a << i.protocol_version ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const header_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // from
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "from",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          e));

      s << i.from ();
    }

    // to
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "to",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          e));

      s << i.to ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const body_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const error_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // error-code
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "error-code",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          e));

      s << i.error_code ();
    }

    // description
    //
    if (i.description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "description",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          e));

      s << *i.description ();
    }
  }

  void
  message (::std::ostream& o,
           const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::message (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  message (::std::ostream& o,
           const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::message (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::std::ostream& o,
           const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::message (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::xercesc::XMLFormatTarget& t,
           const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::message (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  message (::xercesc::XMLFormatTarget& t,
           const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::message (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::xercesc::XMLFormatTarget& t,
           const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::message (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::xercesc::DOMDocument& d,
           const ::xbemsg::message_t& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "message" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "message",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  message (const ::xbemsg::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "message",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          m, f));

      ::xbemsg::message (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  body (::std::ostream& o,
        const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::body (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  body (::std::ostream& o,
        const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::error_handler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::body (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::std::ostream& o,
        const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xercesc::DOMErrorHandler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::body (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::xercesc::XMLFormatTarget& t,
        const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::body (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  body (::xercesc::XMLFormatTarget& t,
        const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::error_handler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::body (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::xercesc::XMLFormatTarget& t,
        const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xercesc::DOMErrorHandler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::body (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::xercesc::DOMDocument& d,
        const ::xbemsg::body_t& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "body" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "body",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  body (const ::xbemsg::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "body",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          m, f));

      ::xbemsg::body (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  header (::std::ostream& o,
          const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::header (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  header (::std::ostream& o,
          const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::header (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::std::ostream& o,
          const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::header (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::xercesc::XMLFormatTarget& t,
          const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::header (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  header (::xercesc::XMLFormatTarget& t,
          const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::header (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::xercesc::XMLFormatTarget& t,
          const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbemsg::header (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::xercesc::DOMDocument& d,
          const ::xbemsg::header_t& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "header" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe-msg")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "header",
        "http://www.xenbee.net/schema/2008/02/xbe-msg");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  header (const ::xbemsg::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "header",
          "http://www.xenbee.net/schema/2008/02/xbe-msg",
          m, f));

      ::xbemsg::header (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

