// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX___ETC_XBE_SCHEMA_XBE_SCHEMA_HPP
#define CXX___ETC_XBE_SCHEMA_XBE_SCHEMA_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/version.hxx>

#if (XSD_INT_VERSION != 3010000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< type, char, ncname > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info < char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap < char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream < char > list_stream;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::serialization< char > serialization;
  typedef ::xsd::cxx::tree::no_namespace_mapping< char > no_namespace_mapping;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::xsi_already_in_use< char > xsi_already_in_use;
  typedef ::xsd::cxx::tree::bounds< char > bounds;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY_IN___XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace xbexsd
{
  class ErrorCode;
  class CompressionAlgorithm;
  class message_t;
  class header_t;
  class body_t;
  class error_t;
  class certificate_req_msg;
  class application_t;
  class compression;
  class cache_entry_info;
  class cache_entry;
  class list_cache_msg;
  class add_to_cache;
  class remove_from_cache;
  class reservation_request;
  class reservation_confirm;
  class reservation_cancel;
  class job_start;
  class job_status;
  class job_terminate;
  class cache_entries;
  class reservation_response;
  class end;
  class status;
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "jsdl-schema.hpp"

#include "dsig-schema.hpp"

#include "xenc-schema.hpp"

namespace xbexsd
{
  class ErrorCode: public ::xml_schema::string
  {
    public:
    enum value
    {
      ENOERROR,
      EBADR,
      EPERM,
      EENTITY,
      EPROTO
    };

    ErrorCode (value v);

    ErrorCode (const char* v);

    ErrorCode (const ::std::string& v);

    ErrorCode (const ::xml_schema::string& v);

    ErrorCode (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ErrorCode (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ErrorCode (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    ErrorCode (const ErrorCode& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual ErrorCode*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    ErrorCode&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_ErrorCode_convert ();
    }

    protected:
    value
    _xsd_ErrorCode_convert () const;

    public:
    static const char* const _xsd_ErrorCode_literals_[5];
    static const value _xsd_ErrorCode_indexes_[5];
  };

  class CompressionAlgorithm: public ::xml_schema::string
  {
    public:
    enum value
    {
      bzip,
      gzip,
      tgz
    };

    CompressionAlgorithm (value v);

    CompressionAlgorithm (const char* v);

    CompressionAlgorithm (const ::std::string& v);

    CompressionAlgorithm (const ::xml_schema::string& v);

    CompressionAlgorithm (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    CompressionAlgorithm (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    CompressionAlgorithm (const ::std::string& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    CompressionAlgorithm (const CompressionAlgorithm& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual CompressionAlgorithm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    CompressionAlgorithm&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_CompressionAlgorithm_convert ();
    }

    protected:
    value
    _xsd_CompressionAlgorithm_convert () const;

    public:
    static const char* const _xsd_CompressionAlgorithm_literals_[3];
    static const value _xsd_CompressionAlgorithm_indexes_[3];
  };

  class message_t: public ::xml_schema::type
  {
    public:
    // header
    // 
    typedef ::xbexsd::header_t header_type;
    typedef ::xsd::cxx::tree::traits< header_type, char > header_traits;

    const header_type&
    header () const;

    header_type&
    header ();

    void
    header (const header_type& x);

    void
    header (::std::auto_ptr< header_type > p);

    // body
    // 
    typedef ::xbexsd::body_t body_type;
    typedef ::xsd::cxx::tree::traits< body_type, char > body_traits;

    const body_type&
    body () const;

    body_type&
    body ();

    void
    body (const body_type& x);

    void
    body (::std::auto_ptr< body_type > p);

    // protocol-version
    // 
    typedef ::xml_schema::int_ protocol_version_type;
    typedef ::xsd::cxx::tree::traits< protocol_version_type, char > protocol_version_traits;

    const protocol_version_type&
    protocol_version () const;

    protocol_version_type&
    protocol_version ();

    void
    protocol_version (const protocol_version_type& x);

    static const protocol_version_type&
    protocol_version_default_value ();

    // Constructors.
    //
    message_t (const header_type&,
               const body_type&);

    message_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    message_t (const message_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual message_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~message_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< header_type > header_;
    ::xsd::cxx::tree::one< body_type > body_;
    ::xsd::cxx::tree::one< protocol_version_type > protocol_version_;
    static const protocol_version_type protocol_version_default_value_;
  };

  class header_t: public ::xml_schema::type
  {
    public:
    // from
    // 
    typedef ::xml_schema::string from_type;
    typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

    const from_type&
    from () const;

    from_type&
    from ();

    void
    from (const from_type& x);

    void
    from (::std::auto_ptr< from_type > p);

    // to
    // 
    typedef ::xml_schema::string to_type;
    typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

    const to_type&
    to () const;

    to_type&
    to ();

    void
    to (const to_type& x);

    void
    to (::std::auto_ptr< to_type > p);

    // Signature
    // 
    typedef ::dsig::SignatureType Signature_type;
    typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
    typedef ::xsd::cxx::tree::traits< Signature_type, char > Signature_traits;

    const Signature_optional&
    Signature () const;

    Signature_optional&
    Signature ();

    void
    Signature (const Signature_type& x);

    void
    Signature (const Signature_optional& x);

    void
    Signature (::std::auto_ptr< Signature_type > p);

    // Constructors.
    //
    header_t (const from_type&,
              const to_type&);

    header_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    header_t (const header_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual header_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~header_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< from_type > from_;
    ::xsd::cxx::tree::one< to_type > to_;
    Signature_optional Signature_;
  };

  class body_t: public ::xml_schema::type
  {
    public:
    // EncryptedData
    // 
    typedef ::xenc::EncryptedDataType EncryptedData_type;
    typedef ::xsd::cxx::tree::optional< EncryptedData_type > EncryptedData_optional;
    typedef ::xsd::cxx::tree::traits< EncryptedData_type, char > EncryptedData_traits;

    const EncryptedData_optional&
    EncryptedData () const;

    EncryptedData_optional&
    EncryptedData ();

    void
    EncryptedData (const EncryptedData_type& x);

    void
    EncryptedData (const EncryptedData_optional& x);

    void
    EncryptedData (::std::auto_ptr< EncryptedData_type > p);

    // error
    // 
    typedef ::xbexsd::error_t error_type;
    typedef ::xsd::cxx::tree::optional< error_type > error_optional;
    typedef ::xsd::cxx::tree::traits< error_type, char > error_traits;

    const error_optional&
    error () const;

    error_optional&
    error ();

    void
    error (const error_type& x);

    void
    error (const error_optional& x);

    void
    error (::std::auto_ptr< error_type > p);

    // certificate-req
    // 
    typedef ::xbexsd::certificate_req_msg certificate_req_type;
    typedef ::xsd::cxx::tree::optional< certificate_req_type > certificate_req_optional;
    typedef ::xsd::cxx::tree::traits< certificate_req_type, char > certificate_req_traits;

    const certificate_req_optional&
    certificate_req () const;

    certificate_req_optional&
    certificate_req ();

    void
    certificate_req (const certificate_req_type& x);

    void
    certificate_req (const certificate_req_optional& x);

    void
    certificate_req (::std::auto_ptr< certificate_req_type > p);

    // Constructors.
    //
    body_t ();

    body_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    body_t (const body_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual body_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~body_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    EncryptedData_optional EncryptedData_;
    error_optional error_;
    certificate_req_optional certificate_req_;
  };

  class error_t: public ::xml_schema::type
  {
    public:
    // error-code
    // 
    typedef ::xbexsd::ErrorCode error_code_type;
    typedef ::xsd::cxx::tree::traits< error_code_type, char > error_code_traits;

    const error_code_type&
    error_code () const;

    error_code_type&
    error_code ();

    void
    error_code (const error_code_type& x);

    void
    error_code (::std::auto_ptr< error_code_type > p);

    // description
    // 
    typedef ::xml_schema::string description_type;
    typedef ::xsd::cxx::tree::optional< description_type > description_optional;
    typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

    const description_optional&
    description () const;

    description_optional&
    description ();

    void
    description (const description_type& x);

    void
    description (const description_optional& x);

    void
    description (::std::auto_ptr< description_type > p);

    // Constructors.
    //
    error_t (const error_code_type&);

    error_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    error_t (const error_t& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

    virtual error_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~error_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< error_code_type > error_code_;
    description_optional description_;
  };

  class certificate_req_msg: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    certificate_req_msg ();

    certificate_req_msg (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    certificate_req_msg (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    certificate_req_msg (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    certificate_req_msg (const certificate_req_msg& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual certificate_req_msg*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~certificate_req_msg ();
  };

  class application_t: public ::xml_schema::type
  {
    public:
    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // version
    // 
    typedef ::xml_schema::string version_type;
    typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

    const version_type&
    version () const;

    version_type&
    version ();

    void
    version (const version_type& x);

    void
    version (::std::auto_ptr< version_type > p);

    // Constructors.
    //
    application_t (const name_type&,
                   const version_type&);

    application_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    application_t (const application_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual application_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~application_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< version_type > version_;
  };

  class compression: public ::xml_schema::type
  {
    public:
    // algorithm
    // 
    typedef ::xbexsd::CompressionAlgorithm algorithm_type;
    typedef ::xsd::cxx::tree::traits< algorithm_type, char > algorithm_traits;

    const algorithm_type&
    algorithm () const;

    algorithm_type&
    algorithm ();

    void
    algorithm (const algorithm_type& x);

    void
    algorithm (::std::auto_ptr< algorithm_type > p);

    // Constructors.
    //
    compression (const algorithm_type&);

    compression (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    compression (const compression& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual compression*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~compression ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< algorithm_type > algorithm_;
  };

  class cache_entry_info: public ::xml_schema::type
  {
    public:
    // uri
    // 
    typedef ::xml_schema::uri uri_type;
    typedef ::xsd::cxx::tree::traits< uri_type, char > uri_traits;

    const uri_type&
    uri () const;

    uri_type&
    uri ();

    void
    uri (const uri_type& x);

    void
    uri (::std::auto_ptr< uri_type > p);

    // hash
    // 
    typedef ::xml_schema::hex_binary hash_type;
    typedef ::xsd::cxx::tree::traits< hash_type, char > hash_traits;

    const hash_type&
    hash () const;

    hash_type&
    hash ();

    void
    hash (const hash_type& x);

    void
    hash (::std::auto_ptr< hash_type > p);

    // operating-system
    // 
    typedef ::xml_schema::string operating_system_type;
    typedef ::xsd::cxx::tree::traits< operating_system_type, char > operating_system_traits;

    const operating_system_type&
    operating_system () const;

    operating_system_type&
    operating_system ();

    void
    operating_system (const operating_system_type& x);

    void
    operating_system (::std::auto_ptr< operating_system_type > p);

    // distribution
    // 
    typedef ::xml_schema::string distribution_type;
    typedef ::xsd::cxx::tree::traits< distribution_type, char > distribution_traits;

    const distribution_type&
    distribution () const;

    distribution_type&
    distribution ();

    void
    distribution (const distribution_type& x);

    void
    distribution (::std::auto_ptr< distribution_type > p);

    // size
    // 
    typedef ::xml_schema::int_ size_type;
    typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

    const size_type&
    size () const;

    size_type&
    size ();

    void
    size (const size_type& x);

    // compression
    // 
    typedef ::xbexsd::compression compression_type;
    typedef ::xsd::cxx::tree::optional< compression_type > compression_optional;
    typedef ::xsd::cxx::tree::traits< compression_type, char > compression_traits;

    const compression_optional&
    compression () const;

    compression_optional&
    compression ();

    void
    compression (const compression_type& x);

    void
    compression (const compression_optional& x);

    void
    compression (::std::auto_ptr< compression_type > p);

    // application
    // 
    typedef ::xbexsd::application_t application_type;
    typedef ::xsd::cxx::tree::traits< application_type, char > application_traits;

    const application_type&
    application () const;

    application_type&
    application ();

    void
    application (const application_type& x);

    void
    application (::std::auto_ptr< application_type > p);

    // Constructors.
    //
    cache_entry_info (const uri_type&,
                      const hash_type&,
                      const operating_system_type&,
                      const distribution_type&,
                      const size_type&,
                      const application_type&);

    cache_entry_info (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    cache_entry_info (const cache_entry_info& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

    virtual cache_entry_info*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~cache_entry_info ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< uri_type > uri_;
    ::xsd::cxx::tree::one< hash_type > hash_;
    ::xsd::cxx::tree::one< operating_system_type > operating_system_;
    ::xsd::cxx::tree::one< distribution_type > distribution_;
    ::xsd::cxx::tree::one< size_type > size_;
    compression_optional compression_;
    ::xsd::cxx::tree::one< application_type > application_;
  };

  class cache_entry: public ::xml_schema::type
  {
    public:
    // uri
    // 
    typedef ::xml_schema::uri uri_type;
    typedef ::xsd::cxx::tree::traits< uri_type, char > uri_traits;

    const uri_type&
    uri () const;

    uri_type&
    uri ();

    void
    uri (const uri_type& x);

    void
    uri (::std::auto_ptr< uri_type > p);

    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    void
    id (::std::auto_ptr< id_type > p);

    // info
    // 
    typedef ::xbexsd::cache_entry_info info_type;
    typedef ::xsd::cxx::tree::traits< info_type, char > info_traits;

    const info_type&
    info () const;

    info_type&
    info ();

    void
    info (const info_type& x);

    void
    info (::std::auto_ptr< info_type > p);

    // Constructors.
    //
    cache_entry (const uri_type&,
                 const id_type&,
                 const info_type&);

    cache_entry (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    cache_entry (const cache_entry& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

    virtual cache_entry*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~cache_entry ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< uri_type > uri_;
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< info_type > info_;
  };

  class list_cache_msg: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    list_cache_msg ();

    list_cache_msg (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    list_cache_msg (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    list_cache_msg (const ::std::string& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    list_cache_msg (const list_cache_msg& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual list_cache_msg*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~list_cache_msg ();
  };

  class add_to_cache: public ::xml_schema::type
  {
    public:
    // entry
    // 
    typedef ::xbexsd::cache_entry entry_type;
    typedef ::xsd::cxx::tree::sequence< entry_type > entry_sequence;
    typedef entry_sequence::iterator entry_iterator;
    typedef entry_sequence::const_iterator entry_const_iterator;
    typedef ::xsd::cxx::tree::traits< entry_type, char > entry_traits;

    const entry_sequence&
    entry () const;

    entry_sequence&
    entry ();

    void
    entry (const entry_sequence& s);

    // Constructors.
    //
    add_to_cache ();

    add_to_cache (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    add_to_cache (const add_to_cache& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

    virtual add_to_cache*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~add_to_cache ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    entry_sequence entry_;
  };

  class remove_from_cache: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    remove_from_cache ();

    remove_from_cache (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    remove_from_cache (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    remove_from_cache (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    remove_from_cache (const remove_from_cache& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

    virtual remove_from_cache*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~remove_from_cache ();
  };

  class reservation_request: public ::xml_schema::type
  {
    public:
    // start
    // 
    typedef ::xml_schema::date start_type;
    typedef ::xsd::cxx::tree::optional< start_type > start_optional;
    typedef ::xsd::cxx::tree::traits< start_type, char > start_traits;

    const start_optional&
    start () const;

    start_optional&
    start ();

    void
    start (const start_type& x);

    void
    start (const start_optional& x);

    void
    start (::std::auto_ptr< start_type > p);

    // end
    // 
    typedef ::xbexsd::end end_type;
    typedef ::xsd::cxx::tree::traits< end_type, char > end_traits;

    const end_type&
    end () const;

    end_type&
    end ();

    void
    end (const end_type& x);

    void
    end (::std::auto_ptr< end_type > p);

    // file-space
    // 
    typedef ::xml_schema::int_ file_space_type;
    typedef ::xsd::cxx::tree::traits< file_space_type, char > file_space_traits;

    const file_space_type&
    file_space () const;

    file_space_type&
    file_space ();

    void
    file_space (const file_space_type& x);

    // Constructors.
    //
    reservation_request (const end_type&,
                         const file_space_type&);

    reservation_request (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    reservation_request (const reservation_request& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual reservation_request*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~reservation_request ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    start_optional start_;
    ::xsd::cxx::tree::one< end_type > end_;
    ::xsd::cxx::tree::one< file_space_type > file_space_;
  };

  class reservation_confirm: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    reservation_confirm ();

    reservation_confirm (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    reservation_confirm (const ::xercesc::DOMAttr& a,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    reservation_confirm (const ::std::string& s,
                         const ::xercesc::DOMElement* e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    reservation_confirm (const reservation_confirm& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    virtual reservation_confirm*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~reservation_confirm ();
  };

  class reservation_cancel: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    reservation_cancel ();

    reservation_cancel (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    reservation_cancel (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    reservation_cancel (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    reservation_cancel (const reservation_cancel& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    virtual reservation_cancel*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~reservation_cancel ();
  };

  class job_start: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    job_start ();

    job_start (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    job_start (const ::xercesc::DOMAttr& a,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    job_start (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    job_start (const job_start& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    virtual job_start*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~job_start ();
  };

  class job_status: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    job_status ();

    job_status (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    job_status (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    job_status (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    job_status (const job_status& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    virtual job_status*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~job_status ();
  };

  class job_terminate: public ::xml_schema::type
  {
    public:
    // Constructors.
    //
    job_terminate ();

    job_terminate (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    job_terminate (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    job_terminate (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    job_terminate (const job_terminate& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual job_terminate*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~job_terminate ();
  };

  class cache_entries: public ::xml_schema::type
  {
    public:
    // entry
    // 
    typedef ::xbexsd::cache_entry entry_type;
    typedef ::xsd::cxx::tree::sequence< entry_type > entry_sequence;
    typedef entry_sequence::iterator entry_iterator;
    typedef entry_sequence::const_iterator entry_const_iterator;
    typedef ::xsd::cxx::tree::traits< entry_type, char > entry_traits;

    const entry_sequence&
    entry () const;

    entry_sequence&
    entry ();

    void
    entry (const entry_sequence& s);

    // Constructors.
    //
    cache_entries ();

    cache_entries (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    cache_entries (const cache_entries& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual cache_entries*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~cache_entries ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    entry_sequence entry_;
  };

  class reservation_response: public ::xml_schema::type
  {
    public:
    // status
    // 
    typedef ::xbexsd::status status_type;
    typedef ::xsd::cxx::tree::traits< status_type, char > status_traits;

    const status_type&
    status () const;

    status_type&
    status ();

    void
    status (const status_type& x);

    void
    status (::std::auto_ptr< status_type > p);

    // ticket
    // 
    typedef ::xml_schema::string ticket_type;
    typedef ::xsd::cxx::tree::traits< ticket_type, char > ticket_traits;

    const ticket_type&
    ticket () const;

    ticket_type&
    ticket ();

    void
    ticket (const ticket_type& x);

    void
    ticket (::std::auto_ptr< ticket_type > p);

    // Constructors.
    //
    reservation_response (const status_type&,
                          const ticket_type&);

    reservation_response (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    reservation_response (const reservation_response& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    virtual reservation_response*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~reservation_response ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< status_type > status_;
    ::xsd::cxx::tree::one< ticket_type > ticket_;
  };

  class end: public ::xml_schema::string
  {
    public:

    end (const char* v);

    end (const ::std::string& v);

    end (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    end (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    end (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    end (const end& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

    virtual end*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;
  };

  class status: public ::xml_schema::string
  {
    public:
    enum value
    {
      granted,
      denied
    };

    status (value v);

    status (const char* v);

    status (const ::std::string& v);

    status (const ::xml_schema::string& v);

    status (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    status (const ::xercesc::DOMAttr& a,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    status (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    status (const status& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual status*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    status&
    operator= (value v);

    virtual
    operator value () const
    {
      return _xsd_status_convert ();
    }

    protected:
    value
    _xsd_status_convert () const;

    public:
    static const char* const _xsd_status_literals_[2];
    static const value _xsd_status_indexes_[2];
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace xbexsd
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace xbexsd
{
  void
  operator<< (::xercesc::DOMElement&, const ErrorCode&);

  void
  operator<< (::xercesc::DOMAttr&, const ErrorCode&);

  void
  operator<< (::xml_schema::list_stream&,
              const ErrorCode&);

  void
  operator<< (::xercesc::DOMElement&, const CompressionAlgorithm&);

  void
  operator<< (::xercesc::DOMAttr&, const CompressionAlgorithm&);

  void
  operator<< (::xml_schema::list_stream&,
              const CompressionAlgorithm&);

  void
  operator<< (::xercesc::DOMElement&, const message_t&);

  void
  operator<< (::xercesc::DOMElement&, const header_t&);

  void
  operator<< (::xercesc::DOMElement&, const body_t&);

  void
  operator<< (::xercesc::DOMElement&, const error_t&);

  void
  operator<< (::xercesc::DOMElement&, const certificate_req_msg&);

  void
  operator<< (::xercesc::DOMAttr&, const certificate_req_msg&);

  void
  operator<< (::xml_schema::list_stream&,
              const certificate_req_msg&);

  void
  operator<< (::xercesc::DOMElement&, const application_t&);

  void
  operator<< (::xercesc::DOMElement&, const compression&);

  void
  operator<< (::xercesc::DOMElement&, const cache_entry_info&);

  void
  operator<< (::xercesc::DOMElement&, const cache_entry&);

  void
  operator<< (::xercesc::DOMElement&, const list_cache_msg&);

  void
  operator<< (::xercesc::DOMAttr&, const list_cache_msg&);

  void
  operator<< (::xml_schema::list_stream&,
              const list_cache_msg&);

  void
  operator<< (::xercesc::DOMElement&, const add_to_cache&);

  void
  operator<< (::xercesc::DOMElement&, const remove_from_cache&);

  void
  operator<< (::xercesc::DOMAttr&, const remove_from_cache&);

  void
  operator<< (::xml_schema::list_stream&,
              const remove_from_cache&);

  void
  operator<< (::xercesc::DOMElement&, const reservation_request&);

  void
  operator<< (::xercesc::DOMElement&, const reservation_confirm&);

  void
  operator<< (::xercesc::DOMAttr&, const reservation_confirm&);

  void
  operator<< (::xml_schema::list_stream&,
              const reservation_confirm&);

  void
  operator<< (::xercesc::DOMElement&, const reservation_cancel&);

  void
  operator<< (::xercesc::DOMAttr&, const reservation_cancel&);

  void
  operator<< (::xml_schema::list_stream&,
              const reservation_cancel&);

  void
  operator<< (::xercesc::DOMElement&, const job_start&);

  void
  operator<< (::xercesc::DOMAttr&, const job_start&);

  void
  operator<< (::xml_schema::list_stream&,
              const job_start&);

  void
  operator<< (::xercesc::DOMElement&, const job_status&);

  void
  operator<< (::xercesc::DOMAttr&, const job_status&);

  void
  operator<< (::xml_schema::list_stream&,
              const job_status&);

  void
  operator<< (::xercesc::DOMElement&, const job_terminate&);

  void
  operator<< (::xercesc::DOMAttr&, const job_terminate&);

  void
  operator<< (::xml_schema::list_stream&,
              const job_terminate&);

  void
  operator<< (::xercesc::DOMElement&, const cache_entries&);

  void
  operator<< (::xercesc::DOMElement&, const reservation_response&);

  // Serialize to std::ostream.
  //

  void
  message (::std::ostream& os,
           const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::std::ostream& os,
           const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::std::ostream& os,
           const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  message (::xercesc::XMLFormatTarget& ft,
           const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::xercesc::XMLFormatTarget& ft,
           const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  void
  message (::xercesc::XMLFormatTarget& ft,
           const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& eh,
           const ::std::string& e = "UTF-8",
           ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  message (::xercesc::DOMDocument& d,
           const ::xbexsd::message_t& x,
           ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  message (const ::xbexsd::message_t& x, 
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  body (::std::ostream& os,
        const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  body (::std::ostream& os,
        const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::error_handler& eh,
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  body (::std::ostream& os,
        const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        ::xercesc::DOMErrorHandler& eh,
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  body (::xercesc::XMLFormatTarget& ft,
        const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  body (::xercesc::XMLFormatTarget& ft,
        const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::error_handler& eh,
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  body (::xercesc::XMLFormatTarget& ft,
        const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        ::xercesc::DOMErrorHandler& eh,
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  body (::xercesc::DOMDocument& d,
        const ::xbexsd::body_t& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  body (const ::xbexsd::body_t& x, 
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  header (::std::ostream& os,
          const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  header (::std::ostream& os,
          const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  header (::std::ostream& os,
          const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  header (::xercesc::XMLFormatTarget& ft,
          const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  header (::xercesc::XMLFormatTarget& ft,
          const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  header (::xercesc::XMLFormatTarget& ft,
          const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& eh,
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  header (::xercesc::DOMDocument& d,
          const ::xbexsd::header_t& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  header (const ::xbexsd::header_t& x, 
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const end&);

  void
  operator<< (::xercesc::DOMAttr&, const end&);

  void
  operator<< (::xml_schema::list_stream&,
              const end&);

  void
  operator<< (::xercesc::DOMElement&, const status&);

  void
  operator<< (::xercesc::DOMAttr&, const status&);

  void
  operator<< (::xml_schema::list_stream&,
              const status&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX___ETC_XBE_SCHEMA_XBE_SCHEMA_HPP
