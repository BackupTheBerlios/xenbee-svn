// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "xbe-schema.hpp"

namespace xbexsd
{
  // ErrorCode
  // 

  ErrorCode::
  ErrorCode (value v)
  : ::xml_schema::string (_xsd_ErrorCode_literals_[v])
  {
  }

  ErrorCode::
  ErrorCode (const char* v)
  : ::xml_schema::string (v)
  {
  }

  ErrorCode::
  ErrorCode (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  ErrorCode::
  ErrorCode (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  ErrorCode::
  ErrorCode (const ErrorCode& v,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  ErrorCode& ErrorCode::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_ErrorCode_literals_[v]);

    return *this;
  }


  // CompressionAlgorithm
  // 

  CompressionAlgorithm::
  CompressionAlgorithm (value v)
  : ::xml_schema::string (_xsd_CompressionAlgorithm_literals_[v])
  {
  }

  CompressionAlgorithm::
  CompressionAlgorithm (const char* v)
  : ::xml_schema::string (v)
  {
  }

  CompressionAlgorithm::
  CompressionAlgorithm (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  CompressionAlgorithm::
  CompressionAlgorithm (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  CompressionAlgorithm::
  CompressionAlgorithm (const CompressionAlgorithm& v,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  CompressionAlgorithm& CompressionAlgorithm::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_CompressionAlgorithm_literals_[v]);

    return *this;
  }


  // message_t
  // 

  const message_t::header_type& message_t::
  header () const
  {
    return this->header_.get ();
  }

  message_t::header_type& message_t::
  header ()
  {
    return this->header_.get ();
  }

  void message_t::
  header (const header_type& x)
  {
    this->header_.set (x);
  }

  void message_t::
  header (::std::auto_ptr< header_type > x)
  {
    this->header_.set (x);
  }

  const message_t::body_type& message_t::
  body () const
  {
    return this->body_.get ();
  }

  message_t::body_type& message_t::
  body ()
  {
    return this->body_.get ();
  }

  void message_t::
  body (const body_type& x)
  {
    this->body_.set (x);
  }

  void message_t::
  body (::std::auto_ptr< body_type > x)
  {
    this->body_.set (x);
  }

  const message_t::protocol_version_type& message_t::
  protocol_version () const
  {
    return this->protocol_version_.get ();
  }

  message_t::protocol_version_type& message_t::
  protocol_version ()
  {
    return this->protocol_version_.get ();
  }

  void message_t::
  protocol_version (const protocol_version_type& x)
  {
    this->protocol_version_.set (x);
  }

  const message_t::protocol_version_type& message_t::
  protocol_version_default_value ()
  {
    return protocol_version_default_value_;
  }


  // header_t
  // 

  const header_t::from_type& header_t::
  from () const
  {
    return this->from_.get ();
  }

  header_t::from_type& header_t::
  from ()
  {
    return this->from_.get ();
  }

  void header_t::
  from (const from_type& x)
  {
    this->from_.set (x);
  }

  void header_t::
  from (::std::auto_ptr< from_type > x)
  {
    this->from_.set (x);
  }

  const header_t::to_type& header_t::
  to () const
  {
    return this->to_.get ();
  }

  header_t::to_type& header_t::
  to ()
  {
    return this->to_.get ();
  }

  void header_t::
  to (const to_type& x)
  {
    this->to_.set (x);
  }

  void header_t::
  to (::std::auto_ptr< to_type > x)
  {
    this->to_.set (x);
  }

  const header_t::Signature_optional& header_t::
  Signature () const
  {
    return this->Signature_;
  }

  header_t::Signature_optional& header_t::
  Signature ()
  {
    return this->Signature_;
  }

  void header_t::
  Signature (const Signature_type& x)
  {
    this->Signature_.set (x);
  }

  void header_t::
  Signature (const Signature_optional& x)
  {
    this->Signature_ = x;
  }

  void header_t::
  Signature (::std::auto_ptr< Signature_type > x)
  {
    this->Signature_.set (x);
  }


  // body_t
  // 

  const body_t::EncryptedData_optional& body_t::
  EncryptedData () const
  {
    return this->EncryptedData_;
  }

  body_t::EncryptedData_optional& body_t::
  EncryptedData ()
  {
    return this->EncryptedData_;
  }

  void body_t::
  EncryptedData (const EncryptedData_type& x)
  {
    this->EncryptedData_.set (x);
  }

  void body_t::
  EncryptedData (const EncryptedData_optional& x)
  {
    this->EncryptedData_ = x;
  }

  void body_t::
  EncryptedData (::std::auto_ptr< EncryptedData_type > x)
  {
    this->EncryptedData_.set (x);
  }

  const body_t::error_optional& body_t::
  error () const
  {
    return this->error_;
  }

  body_t::error_optional& body_t::
  error ()
  {
    return this->error_;
  }

  void body_t::
  error (const error_type& x)
  {
    this->error_.set (x);
  }

  void body_t::
  error (const error_optional& x)
  {
    this->error_ = x;
  }

  void body_t::
  error (::std::auto_ptr< error_type > x)
  {
    this->error_.set (x);
  }

  const body_t::certificate_req_optional& body_t::
  certificate_req () const
  {
    return this->certificate_req_;
  }

  body_t::certificate_req_optional& body_t::
  certificate_req ()
  {
    return this->certificate_req_;
  }

  void body_t::
  certificate_req (const certificate_req_type& x)
  {
    this->certificate_req_.set (x);
  }

  void body_t::
  certificate_req (const certificate_req_optional& x)
  {
    this->certificate_req_ = x;
  }

  void body_t::
  certificate_req (::std::auto_ptr< certificate_req_type > x)
  {
    this->certificate_req_.set (x);
  }


  // error_t
  // 

  const error_t::error_code_type& error_t::
  error_code () const
  {
    return this->error_code_.get ();
  }

  error_t::error_code_type& error_t::
  error_code ()
  {
    return this->error_code_.get ();
  }

  void error_t::
  error_code (const error_code_type& x)
  {
    this->error_code_.set (x);
  }

  void error_t::
  error_code (::std::auto_ptr< error_code_type > x)
  {
    this->error_code_.set (x);
  }

  const error_t::description_optional& error_t::
  description () const
  {
    return this->description_;
  }

  error_t::description_optional& error_t::
  description ()
  {
    return this->description_;
  }

  void error_t::
  description (const description_type& x)
  {
    this->description_.set (x);
  }

  void error_t::
  description (const description_optional& x)
  {
    this->description_ = x;
  }

  void error_t::
  description (::std::auto_ptr< description_type > x)
  {
    this->description_.set (x);
  }


  // certificate_req_msg
  // 


  // application_t
  // 

  const application_t::name_type& application_t::
  name () const
  {
    return this->name_.get ();
  }

  application_t::name_type& application_t::
  name ()
  {
    return this->name_.get ();
  }

  void application_t::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void application_t::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const application_t::version_type& application_t::
  version () const
  {
    return this->version_.get ();
  }

  application_t::version_type& application_t::
  version ()
  {
    return this->version_.get ();
  }

  void application_t::
  version (const version_type& x)
  {
    this->version_.set (x);
  }

  void application_t::
  version (::std::auto_ptr< version_type > x)
  {
    this->version_.set (x);
  }


  // compression
  // 

  const compression::algorithm_type& compression::
  algorithm () const
  {
    return this->algorithm_.get ();
  }

  compression::algorithm_type& compression::
  algorithm ()
  {
    return this->algorithm_.get ();
  }

  void compression::
  algorithm (const algorithm_type& x)
  {
    this->algorithm_.set (x);
  }

  void compression::
  algorithm (::std::auto_ptr< algorithm_type > x)
  {
    this->algorithm_.set (x);
  }


  // cache_entry_info
  // 

  const cache_entry_info::uri_type& cache_entry_info::
  uri () const
  {
    return this->uri_.get ();
  }

  cache_entry_info::uri_type& cache_entry_info::
  uri ()
  {
    return this->uri_.get ();
  }

  void cache_entry_info::
  uri (const uri_type& x)
  {
    this->uri_.set (x);
  }

  void cache_entry_info::
  uri (::std::auto_ptr< uri_type > x)
  {
    this->uri_.set (x);
  }

  const cache_entry_info::hash_type& cache_entry_info::
  hash () const
  {
    return this->hash_.get ();
  }

  cache_entry_info::hash_type& cache_entry_info::
  hash ()
  {
    return this->hash_.get ();
  }

  void cache_entry_info::
  hash (const hash_type& x)
  {
    this->hash_.set (x);
  }

  void cache_entry_info::
  hash (::std::auto_ptr< hash_type > x)
  {
    this->hash_.set (x);
  }

  const cache_entry_info::operating_system_type& cache_entry_info::
  operating_system () const
  {
    return this->operating_system_.get ();
  }

  cache_entry_info::operating_system_type& cache_entry_info::
  operating_system ()
  {
    return this->operating_system_.get ();
  }

  void cache_entry_info::
  operating_system (const operating_system_type& x)
  {
    this->operating_system_.set (x);
  }

  void cache_entry_info::
  operating_system (::std::auto_ptr< operating_system_type > x)
  {
    this->operating_system_.set (x);
  }

  const cache_entry_info::distribution_type& cache_entry_info::
  distribution () const
  {
    return this->distribution_.get ();
  }

  cache_entry_info::distribution_type& cache_entry_info::
  distribution ()
  {
    return this->distribution_.get ();
  }

  void cache_entry_info::
  distribution (const distribution_type& x)
  {
    this->distribution_.set (x);
  }

  void cache_entry_info::
  distribution (::std::auto_ptr< distribution_type > x)
  {
    this->distribution_.set (x);
  }

  const cache_entry_info::size_type& cache_entry_info::
  size () const
  {
    return this->size_.get ();
  }

  cache_entry_info::size_type& cache_entry_info::
  size ()
  {
    return this->size_.get ();
  }

  void cache_entry_info::
  size (const size_type& x)
  {
    this->size_.set (x);
  }

  const cache_entry_info::compression_optional& cache_entry_info::
  compression () const
  {
    return this->compression_;
  }

  cache_entry_info::compression_optional& cache_entry_info::
  compression ()
  {
    return this->compression_;
  }

  void cache_entry_info::
  compression (const compression_type& x)
  {
    this->compression_.set (x);
  }

  void cache_entry_info::
  compression (const compression_optional& x)
  {
    this->compression_ = x;
  }

  void cache_entry_info::
  compression (::std::auto_ptr< compression_type > x)
  {
    this->compression_.set (x);
  }

  const cache_entry_info::application_type& cache_entry_info::
  application () const
  {
    return this->application_.get ();
  }

  cache_entry_info::application_type& cache_entry_info::
  application ()
  {
    return this->application_.get ();
  }

  void cache_entry_info::
  application (const application_type& x)
  {
    this->application_.set (x);
  }

  void cache_entry_info::
  application (::std::auto_ptr< application_type > x)
  {
    this->application_.set (x);
  }


  // cache_entry
  // 

  const cache_entry::uri_type& cache_entry::
  uri () const
  {
    return this->uri_.get ();
  }

  cache_entry::uri_type& cache_entry::
  uri ()
  {
    return this->uri_.get ();
  }

  void cache_entry::
  uri (const uri_type& x)
  {
    this->uri_.set (x);
  }

  void cache_entry::
  uri (::std::auto_ptr< uri_type > x)
  {
    this->uri_.set (x);
  }

  const cache_entry::id_type& cache_entry::
  id () const
  {
    return this->id_.get ();
  }

  cache_entry::id_type& cache_entry::
  id ()
  {
    return this->id_.get ();
  }

  void cache_entry::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void cache_entry::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const cache_entry::info_type& cache_entry::
  info () const
  {
    return this->info_.get ();
  }

  cache_entry::info_type& cache_entry::
  info ()
  {
    return this->info_.get ();
  }

  void cache_entry::
  info (const info_type& x)
  {
    this->info_.set (x);
  }

  void cache_entry::
  info (::std::auto_ptr< info_type > x)
  {
    this->info_.set (x);
  }


  // list_cache_msg
  // 


  // add_to_cache
  // 

  const add_to_cache::entry_sequence& add_to_cache::
  entry () const
  {
    return this->entry_;
  }

  add_to_cache::entry_sequence& add_to_cache::
  entry ()
  {
    return this->entry_;
  }

  void add_to_cache::
  entry (const entry_sequence& s)
  {
    this->entry_ = s;
  }


  // remove_from_cache
  // 


  // reservation_request
  // 

  const reservation_request::start_optional& reservation_request::
  start () const
  {
    return this->start_;
  }

  reservation_request::start_optional& reservation_request::
  start ()
  {
    return this->start_;
  }

  void reservation_request::
  start (const start_type& x)
  {
    this->start_.set (x);
  }

  void reservation_request::
  start (const start_optional& x)
  {
    this->start_ = x;
  }

  void reservation_request::
  start (::std::auto_ptr< start_type > x)
  {
    this->start_.set (x);
  }

  const reservation_request::end_type& reservation_request::
  end () const
  {
    return this->end_.get ();
  }

  reservation_request::end_type& reservation_request::
  end ()
  {
    return this->end_.get ();
  }

  void reservation_request::
  end (const end_type& x)
  {
    this->end_.set (x);
  }

  void reservation_request::
  end (::std::auto_ptr< end_type > x)
  {
    this->end_.set (x);
  }

  const reservation_request::file_space_type& reservation_request::
  file_space () const
  {
    return this->file_space_.get ();
  }

  reservation_request::file_space_type& reservation_request::
  file_space ()
  {
    return this->file_space_.get ();
  }

  void reservation_request::
  file_space (const file_space_type& x)
  {
    this->file_space_.set (x);
  }


  // reservation_confirm
  // 


  // reservation_cancel
  // 


  // job_start
  // 


  // job_status
  // 


  // job_terminate
  // 


  // cache_entries
  // 

  const cache_entries::entry_sequence& cache_entries::
  entry () const
  {
    return this->entry_;
  }

  cache_entries::entry_sequence& cache_entries::
  entry ()
  {
    return this->entry_;
  }

  void cache_entries::
  entry (const entry_sequence& s)
  {
    this->entry_ = s;
  }


  // reservation_response
  // 

  const reservation_response::status_type& reservation_response::
  status () const
  {
    return this->status_.get ();
  }

  reservation_response::status_type& reservation_response::
  status ()
  {
    return this->status_.get ();
  }

  void reservation_response::
  status (const status_type& x)
  {
    this->status_.set (x);
  }

  void reservation_response::
  status (::std::auto_ptr< status_type > x)
  {
    this->status_.set (x);
  }

  const reservation_response::ticket_type& reservation_response::
  ticket () const
  {
    return this->ticket_.get ();
  }

  reservation_response::ticket_type& reservation_response::
  ticket ()
  {
    return this->ticket_.get ();
  }

  void reservation_response::
  ticket (const ticket_type& x)
  {
    this->ticket_.set (x);
  }

  void reservation_response::
  ticket (::std::auto_ptr< ticket_type > x)
  {
    this->ticket_.set (x);
  }


  // end
  //

  end::
  end (const char* s)
  : ::xml_schema::string (s)
  {
  }

  end::
  end (const ::std::string& s)
  : ::xml_schema::string (s)
  {
  }

  end::
  end (const end& o,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::string (o, f, c)
  {
  }

  // status
  // 

  status::
  status (value v)
  : ::xml_schema::string (_xsd_status_literals_[v])
  {
  }

  status::
  status (const char* v)
  : ::xml_schema::string (v)
  {
  }

  status::
  status (const ::std::string& v)
  : ::xml_schema::string (v)
  {
  }

  status::
  status (const ::xml_schema::string& v)
  : ::xml_schema::string (v)
  {
  }

  status::
  status (const status& v,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::string (v, f, c)
  {
  }

  status& status::
  operator= (value v)
  {
    static_cast< ::xml_schema::string& > (*this) = 
    ::xml_schema::string (_xsd_status_literals_[v]);

    return *this;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace xbexsd
{
  // ErrorCode
  //

  ErrorCode::
  ErrorCode (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_ErrorCode_convert ();
  }

  ErrorCode::
  ErrorCode (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_ErrorCode_convert ();
  }

  ErrorCode::
  ErrorCode (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_ErrorCode_convert ();
  }

  ErrorCode* ErrorCode::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new ErrorCode (*this, f, c);
  }

  ErrorCode::value ErrorCode::
  _xsd_ErrorCode_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_ErrorCode_literals_);
    const value* i (::std::lower_bound (
                      _xsd_ErrorCode_indexes_,
                      _xsd_ErrorCode_indexes_ + 5,
                      *this,
                      c));

    if (i == _xsd_ErrorCode_indexes_ + 5 || _xsd_ErrorCode_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const ErrorCode::
  _xsd_ErrorCode_literals_[5] =
  {
    "ENOERROR",
    "EBADR",
    "EPERM",
    "EENTITY",
    "EPROTO"
  };

  const ErrorCode::value ErrorCode::
  _xsd_ErrorCode_indexes_[5] =
  {
    ::xbexsd::ErrorCode::EBADR,
    ::xbexsd::ErrorCode::EENTITY,
    ::xbexsd::ErrorCode::ENOERROR,
    ::xbexsd::ErrorCode::EPERM,
    ::xbexsd::ErrorCode::EPROTO
  };

  // CompressionAlgorithm
  //

  CompressionAlgorithm::
  CompressionAlgorithm (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_CompressionAlgorithm_convert ();
  }

  CompressionAlgorithm::
  CompressionAlgorithm (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_CompressionAlgorithm_convert ();
  }

  CompressionAlgorithm::
  CompressionAlgorithm (const ::std::string& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_CompressionAlgorithm_convert ();
  }

  CompressionAlgorithm* CompressionAlgorithm::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new CompressionAlgorithm (*this, f, c);
  }

  CompressionAlgorithm::value CompressionAlgorithm::
  _xsd_CompressionAlgorithm_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_CompressionAlgorithm_literals_);
    const value* i (::std::lower_bound (
                      _xsd_CompressionAlgorithm_indexes_,
                      _xsd_CompressionAlgorithm_indexes_ + 3,
                      *this,
                      c));

    if (i == _xsd_CompressionAlgorithm_indexes_ + 3 || _xsd_CompressionAlgorithm_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const CompressionAlgorithm::
  _xsd_CompressionAlgorithm_literals_[3] =
  {
    "bzip",
    "gzip",
    "tgz"
  };

  const CompressionAlgorithm::value CompressionAlgorithm::
  _xsd_CompressionAlgorithm_indexes_[3] =
  {
    ::xbexsd::CompressionAlgorithm::bzip,
    ::xbexsd::CompressionAlgorithm::gzip,
    ::xbexsd::CompressionAlgorithm::tgz
  };

  // message_t
  //

  const message_t::protocol_version_type message_t::protocol_version_default_value_ (
    ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
      ::std::string ("1"), 0, 0, 0));

  message_t::
  message_t (const header_type& header,
             const body_type& body)
  : ::xml_schema::type (),
    header_ (header, ::xml_schema::flags (), this),
    body_ (body, ::xml_schema::flags (), this),
    protocol_version_ (protocol_version_default_value (), ::xml_schema::flags (), this)
  {
  }

  message_t::
  message_t (const message_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    header_ (x.header_, f, this),
    body_ (x.body_, f, this),
    protocol_version_ (x.protocol_version_, f, this)
  {
  }

  message_t::
  message_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    header_ (f, this),
    body_ (f, this),
    protocol_version_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void message_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // header
      //
      if (n.name () == "header" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< header_type > r (
          header_traits::create (i, f, this));

        if (!header_.present ())
        {
          this->header (r);
          continue;
        }
      }

      // body
      //
      if (n.name () == "body" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< body_type > r (
          body_traits::create (i, f, this));

        if (!body_.present ())
        {
          this->body (r);
          continue;
        }
      }

      break;
    }

    if (!header_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "header",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!body_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "body",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "protocol-version" && n.namespace_ ().empty ())
      {
        this->protocol_version (protocol_version_traits::create (i, f, this));
        continue;
      }
    }

    if (!protocol_version_.present ())
    {
      this->protocol_version (
        protocol_version_traits::create (
          ::std::string ("1"),
          &p.element (), f, this));
    }
  }

  message_t* message_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new message_t (*this, f, c);
  }

  message_t::
  ~message_t ()
  {
  }

  // header_t
  //

  header_t::
  header_t (const from_type& from,
            const to_type& to)
  : ::xml_schema::type (),
    from_ (from, ::xml_schema::flags (), this),
    to_ (to, ::xml_schema::flags (), this),
    Signature_ (::xml_schema::flags (), this)
  {
  }

  header_t::
  header_t (const header_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    from_ (x.from_, f, this),
    to_ (x.to_, f, this),
    Signature_ (x.Signature_, f, this)
  {
  }

  header_t::
  header_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    from_ (f, this),
    to_ (f, this),
    Signature_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void header_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // from
      //
      if (n.name () == "from" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< from_type > r (
          from_traits::create (i, f, this));

        if (!from_.present ())
        {
          this->from (r);
          continue;
        }
      }

      // to
      //
      if (n.name () == "to" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< to_type > r (
          to_traits::create (i, f, this));

        if (!to_.present ())
        {
          this->to (r);
          continue;
        }
      }

      // Signature
      //
      if (n.name () == "Signature" && n.namespace_ () == "http://www.w3.org/2000/09/xmldsig#")
      {
        ::std::auto_ptr< Signature_type > r (
          Signature_traits::create (i, f, this));

        if (!this->Signature ())
        {
          this->Signature (r);
          continue;
        }
      }

      break;
    }

    if (!from_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "from",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!to_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "to",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  header_t* header_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new header_t (*this, f, c);
  }

  header_t::
  ~header_t ()
  {
  }

  // body_t
  //

  body_t::
  body_t ()
  : ::xml_schema::type (),
    EncryptedData_ (::xml_schema::flags (), this),
    error_ (::xml_schema::flags (), this),
    certificate_req_ (::xml_schema::flags (), this)
  {
  }

  body_t::
  body_t (const body_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    EncryptedData_ (x.EncryptedData_, f, this),
    error_ (x.error_, f, this),
    certificate_req_ (x.certificate_req_, f, this)
  {
  }

  body_t::
  body_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    EncryptedData_ (f, this),
    error_ (f, this),
    certificate_req_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void body_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // EncryptedData
      //
      if (n.name () == "EncryptedData" && n.namespace_ () == "http://www.w3.org/2001/04/xmlenc#")
      {
        ::std::auto_ptr< EncryptedData_type > r (
          EncryptedData_traits::create (i, f, this));

        if (!this->EncryptedData ())
        {
          this->EncryptedData (r);
          continue;
        }
      }

      // error
      //
      if (n.name () == "error" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< error_type > r (
          error_traits::create (i, f, this));

        if (!this->error ())
        {
          this->error (r);
          continue;
        }
      }

      // certificate-req
      //
      if (n.name () == "certificate-req" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< certificate_req_type > r (
          certificate_req_traits::create (i, f, this));

        if (!this->certificate_req ())
        {
          this->certificate_req (r);
          continue;
        }
      }

      break;
    }
  }

  body_t* body_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new body_t (*this, f, c);
  }

  body_t::
  ~body_t ()
  {
  }

  // error_t
  //

  error_t::
  error_t (const error_code_type& error_code)
  : ::xml_schema::type (),
    error_code_ (error_code, ::xml_schema::flags (), this),
    description_ (::xml_schema::flags (), this)
  {
  }

  error_t::
  error_t (const error_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    error_code_ (x.error_code_, f, this),
    description_ (x.description_, f, this)
  {
  }

  error_t::
  error_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    error_code_ (f, this),
    description_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void error_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // error-code
      //
      if (n.name () == "error-code" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< error_code_type > r (
          error_code_traits::create (i, f, this));

        if (!error_code_.present ())
        {
          this->error_code (r);
          continue;
        }
      }

      // description
      //
      if (n.name () == "description" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< description_type > r (
          description_traits::create (i, f, this));

        if (!this->description ())
        {
          this->description (r);
          continue;
        }
      }

      break;
    }

    if (!error_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "error-code",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  error_t* error_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new error_t (*this, f, c);
  }

  error_t::
  ~error_t ()
  {
  }

  // certificate_req_msg
  //

  certificate_req_msg::
  certificate_req_msg ()
  : ::xml_schema::type ()
  {
  }

  certificate_req_msg::
  certificate_req_msg (const certificate_req_msg& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  certificate_req_msg::
  certificate_req_msg (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  certificate_req_msg::
  certificate_req_msg (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  certificate_req_msg::
  certificate_req_msg (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  certificate_req_msg* certificate_req_msg::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new certificate_req_msg (*this, f, c);
  }

  certificate_req_msg::
  ~certificate_req_msg ()
  {
  }

  // application_t
  //

  application_t::
  application_t (const name_type& name,
                 const version_type& version)
  : ::xml_schema::type (),
    name_ (name, ::xml_schema::flags (), this),
    version_ (version, ::xml_schema::flags (), this)
  {
  }

  application_t::
  application_t (const application_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    version_ (x.version_, f, this)
  {
  }

  application_t::
  application_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (f, this),
    version_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void application_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name (r);
          continue;
        }
      }

      // version
      //
      if (n.name () == "version" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< version_type > r (
          version_traits::create (i, f, this));

        if (!version_.present ())
        {
          this->version (r);
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!version_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "version",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  application_t* application_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new application_t (*this, f, c);
  }

  application_t::
  ~application_t ()
  {
  }

  // compression
  //

  compression::
  compression (const algorithm_type& algorithm)
  : ::xml_schema::type (),
    algorithm_ (algorithm, ::xml_schema::flags (), this)
  {
  }

  compression::
  compression (const compression& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    algorithm_ (x.algorithm_, f, this)
  {
  }

  compression::
  compression (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    algorithm_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void compression::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // algorithm
      //
      if (n.name () == "algorithm" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< algorithm_type > r (
          algorithm_traits::create (i, f, this));

        if (!algorithm_.present ())
        {
          this->algorithm (r);
          continue;
        }
      }

      break;
    }

    if (!algorithm_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "algorithm",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  compression* compression::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new compression (*this, f, c);
  }

  compression::
  ~compression ()
  {
  }

  // cache_entry_info
  //

  cache_entry_info::
  cache_entry_info (const uri_type& uri,
                    const hash_type& hash,
                    const operating_system_type& operating_system,
                    const distribution_type& distribution,
                    const size_type& size,
                    const application_type& application)
  : ::xml_schema::type (),
    uri_ (uri, ::xml_schema::flags (), this),
    hash_ (hash, ::xml_schema::flags (), this),
    operating_system_ (operating_system, ::xml_schema::flags (), this),
    distribution_ (distribution, ::xml_schema::flags (), this),
    size_ (size, ::xml_schema::flags (), this),
    compression_ (::xml_schema::flags (), this),
    application_ (application, ::xml_schema::flags (), this)
  {
  }

  cache_entry_info::
  cache_entry_info (const cache_entry_info& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    uri_ (x.uri_, f, this),
    hash_ (x.hash_, f, this),
    operating_system_ (x.operating_system_, f, this),
    distribution_ (x.distribution_, f, this),
    size_ (x.size_, f, this),
    compression_ (x.compression_, f, this),
    application_ (x.application_, f, this)
  {
  }

  cache_entry_info::
  cache_entry_info (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    uri_ (f, this),
    hash_ (f, this),
    operating_system_ (f, this),
    distribution_ (f, this),
    size_ (f, this),
    compression_ (f, this),
    application_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void cache_entry_info::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // uri
      //
      if (n.name () == "uri" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< uri_type > r (
          uri_traits::create (i, f, this));

        if (!uri_.present ())
        {
          this->uri (r);
          continue;
        }
      }

      // hash
      //
      if (n.name () == "hash" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< hash_type > r (
          hash_traits::create (i, f, this));

        if (!hash_.present ())
        {
          this->hash (r);
          continue;
        }
      }

      // operating-system
      //
      if (n.name () == "operating-system" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< operating_system_type > r (
          operating_system_traits::create (i, f, this));

        if (!operating_system_.present ())
        {
          this->operating_system (r);
          continue;
        }
      }

      // distribution
      //
      if (n.name () == "distribution" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< distribution_type > r (
          distribution_traits::create (i, f, this));

        if (!distribution_.present ())
        {
          this->distribution (r);
          continue;
        }
      }

      // size
      //
      if (n.name () == "size" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        if (!size_.present ())
        {
          this->size (size_traits::create (i, f, this));
          continue;
        }
      }

      // compression
      //
      if (n.name () == "compression" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< compression_type > r (
          compression_traits::create (i, f, this));

        if (!this->compression ())
        {
          this->compression (r);
          continue;
        }
      }

      // application
      //
      if (n.name () == "application" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< application_type > r (
          application_traits::create (i, f, this));

        if (!application_.present ())
        {
          this->application (r);
          continue;
        }
      }

      break;
    }

    if (!uri_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "uri",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!hash_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "hash",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!operating_system_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "operating-system",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!distribution_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "distribution",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!size_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "size",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!application_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "application",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  cache_entry_info* cache_entry_info::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new cache_entry_info (*this, f, c);
  }

  cache_entry_info::
  ~cache_entry_info ()
  {
  }

  // cache_entry
  //

  cache_entry::
  cache_entry (const uri_type& uri,
               const id_type& id,
               const info_type& info)
  : ::xml_schema::type (),
    uri_ (uri, ::xml_schema::flags (), this),
    id_ (id, ::xml_schema::flags (), this),
    info_ (info, ::xml_schema::flags (), this)
  {
  }

  cache_entry::
  cache_entry (const cache_entry& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    uri_ (x.uri_, f, this),
    id_ (x.id_, f, this),
    info_ (x.info_, f, this)
  {
  }

  cache_entry::
  cache_entry (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    uri_ (f, this),
    id_ (f, this),
    info_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void cache_entry::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // uri
      //
      if (n.name () == "uri" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< uri_type > r (
          uri_traits::create (i, f, this));

        if (!uri_.present ())
        {
          this->uri (r);
          continue;
        }
      }

      // id
      //
      if (n.name () == "id" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        if (!id_.present ())
        {
          this->id (r);
          continue;
        }
      }

      // info
      //
      if (n.name () == "info" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< info_type > r (
          info_traits::create (i, f, this));

        if (!info_.present ())
        {
          this->info (r);
          continue;
        }
      }

      break;
    }

    if (!uri_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "uri",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "id",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!info_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "info",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  cache_entry* cache_entry::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new cache_entry (*this, f, c);
  }

  cache_entry::
  ~cache_entry ()
  {
  }

  // list_cache_msg
  //

  list_cache_msg::
  list_cache_msg ()
  : ::xml_schema::type ()
  {
  }

  list_cache_msg::
  list_cache_msg (const list_cache_msg& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  list_cache_msg::
  list_cache_msg (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  list_cache_msg::
  list_cache_msg (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  list_cache_msg::
  list_cache_msg (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  list_cache_msg* list_cache_msg::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new list_cache_msg (*this, f, c);
  }

  list_cache_msg::
  ~list_cache_msg ()
  {
  }

  // add_to_cache
  //

  add_to_cache::
  add_to_cache ()
  : ::xml_schema::type (),
    entry_ (::xml_schema::flags (), this)
  {
  }

  add_to_cache::
  add_to_cache (const add_to_cache& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entry_ (x.entry_, f, this)
  {
  }

  add_to_cache::
  add_to_cache (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entry_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void add_to_cache::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entry
      //
      if (n.name () == "entry" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< entry_type > r (
          entry_traits::create (i, f, this));

        this->entry ().push_back (r);
        continue;
      }

      break;
    }
  }

  add_to_cache* add_to_cache::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new add_to_cache (*this, f, c);
  }

  add_to_cache::
  ~add_to_cache ()
  {
  }

  // remove_from_cache
  //

  remove_from_cache::
  remove_from_cache ()
  : ::xml_schema::type ()
  {
  }

  remove_from_cache::
  remove_from_cache (const remove_from_cache& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  remove_from_cache::
  remove_from_cache (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  remove_from_cache::
  remove_from_cache (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  remove_from_cache::
  remove_from_cache (const ::std::string& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  remove_from_cache* remove_from_cache::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new remove_from_cache (*this, f, c);
  }

  remove_from_cache::
  ~remove_from_cache ()
  {
  }

  // reservation_request
  //

  reservation_request::
  reservation_request (const end_type& end,
                       const file_space_type& file_space)
  : ::xml_schema::type (),
    start_ (::xml_schema::flags (), this),
    end_ (end, ::xml_schema::flags (), this),
    file_space_ (file_space, ::xml_schema::flags (), this)
  {
  }

  reservation_request::
  reservation_request (const reservation_request& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    start_ (x.start_, f, this),
    end_ (x.end_, f, this),
    file_space_ (x.file_space_, f, this)
  {
  }

  reservation_request::
  reservation_request (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    start_ (f, this),
    end_ (f, this),
    file_space_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void reservation_request::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // start
      //
      if (n.name () == "start" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< start_type > r (
          start_traits::create (i, f, this));

        if (!this->start ())
        {
          this->start (r);
          continue;
        }
      }

      // end
      //
      if (n.name () == "end" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< end_type > r (
          end_traits::create (i, f, this));

        if (!end_.present ())
        {
          this->end (r);
          continue;
        }
      }

      // file-space
      //
      if (n.name () == "file-space" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        if (!file_space_.present ())
        {
          this->file_space (file_space_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!end_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "end",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!file_space_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "file-space",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  reservation_request* reservation_request::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new reservation_request (*this, f, c);
  }

  reservation_request::
  ~reservation_request ()
  {
  }

  // reservation_confirm
  //

  reservation_confirm::
  reservation_confirm ()
  : ::xml_schema::type ()
  {
  }

  reservation_confirm::
  reservation_confirm (const reservation_confirm& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  reservation_confirm::
  reservation_confirm (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  reservation_confirm::
  reservation_confirm (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  reservation_confirm::
  reservation_confirm (const ::std::string& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  reservation_confirm* reservation_confirm::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new reservation_confirm (*this, f, c);
  }

  reservation_confirm::
  ~reservation_confirm ()
  {
  }

  // reservation_cancel
  //

  reservation_cancel::
  reservation_cancel ()
  : ::xml_schema::type ()
  {
  }

  reservation_cancel::
  reservation_cancel (const reservation_cancel& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  reservation_cancel::
  reservation_cancel (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  reservation_cancel::
  reservation_cancel (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  reservation_cancel::
  reservation_cancel (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  reservation_cancel* reservation_cancel::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new reservation_cancel (*this, f, c);
  }

  reservation_cancel::
  ~reservation_cancel ()
  {
  }

  // job_start
  //

  job_start::
  job_start ()
  : ::xml_schema::type ()
  {
  }

  job_start::
  job_start (const job_start& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  job_start::
  job_start (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  job_start::
  job_start (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  job_start::
  job_start (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  job_start* job_start::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new job_start (*this, f, c);
  }

  job_start::
  ~job_start ()
  {
  }

  // job_status
  //

  job_status::
  job_status ()
  : ::xml_schema::type ()
  {
  }

  job_status::
  job_status (const job_status& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  job_status::
  job_status (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  job_status::
  job_status (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  job_status::
  job_status (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  job_status* job_status::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new job_status (*this, f, c);
  }

  job_status::
  ~job_status ()
  {
  }

  // job_terminate
  //

  job_terminate::
  job_terminate ()
  : ::xml_schema::type ()
  {
  }

  job_terminate::
  job_terminate (const job_terminate& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c)
  {
  }

  job_terminate::
  job_terminate (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f, c)
  {
  }

  job_terminate::
  job_terminate (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (a, f, c)
  {
  }

  job_terminate::
  job_terminate (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (s, e, f, c)
  {
  }

  job_terminate* job_terminate::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new job_terminate (*this, f, c);
  }

  job_terminate::
  ~job_terminate ()
  {
  }

  // cache_entries
  //

  cache_entries::
  cache_entries ()
  : ::xml_schema::type (),
    entry_ (::xml_schema::flags (), this)
  {
  }

  cache_entries::
  cache_entries (const cache_entries& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    entry_ (x.entry_, f, this)
  {
  }

  cache_entries::
  cache_entries (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    entry_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void cache_entries::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // entry
      //
      if (n.name () == "entry" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< entry_type > r (
          entry_traits::create (i, f, this));

        this->entry ().push_back (r);
        continue;
      }

      break;
    }
  }

  cache_entries* cache_entries::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new cache_entries (*this, f, c);
  }

  cache_entries::
  ~cache_entries ()
  {
  }

  // reservation_response
  //

  reservation_response::
  reservation_response (const status_type& status,
                        const ticket_type& ticket)
  : ::xml_schema::type (),
    status_ (status, ::xml_schema::flags (), this),
    ticket_ (ticket, ::xml_schema::flags (), this)
  {
  }

  reservation_response::
  reservation_response (const reservation_response& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    status_ (x.status_, f, this),
    ticket_ (x.ticket_, f, this)
  {
  }

  reservation_response::
  reservation_response (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    status_ (f, this),
    ticket_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void reservation_response::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // status
      //
      if (n.name () == "status" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< status_type > r (
          status_traits::create (i, f, this));

        if (!status_.present ())
        {
          this->status (r);
          continue;
        }
      }

      // ticket
      //
      if (n.name () == "ticket" && n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
      {
        ::std::auto_ptr< ticket_type > r (
          ticket_traits::create (i, f, this));

        if (!ticket_.present ())
        {
          this->ticket (r);
          continue;
        }
      }

      break;
    }

    if (!status_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "status",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }

    if (!ticket_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ticket",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  reservation_response* reservation_response::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new reservation_response (*this, f, c);
  }

  reservation_response::
  ~reservation_response ()
  {
  }

  // end
  //

  end::
  end (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
  }

  end::
  end (const ::xercesc::DOMAttr& a,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
  }

  end::
  end (const ::std::string& s,
       const ::xercesc::DOMElement* e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
  }

  end* end::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new end (*this, f, c);
  }

  // status
  //

  status::
  status (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::string (e, f, c)
  {
    _xsd_status_convert ();
  }

  status::
  status (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::string (a, f, c)
  {
    _xsd_status_convert ();
  }

  status::
  status (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::string (s, e, f, c)
  {
    _xsd_status_convert ();
  }

  status* status::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new status (*this, f, c);
  }

  status::value status::
  _xsd_status_convert () const
  {
    ::xsd::cxx::tree::enum_comparator< char > c (_xsd_status_literals_);
    const value* i (::std::lower_bound (
                      _xsd_status_indexes_,
                      _xsd_status_indexes_ + 2,
                      *this,
                      c));

    if (i == _xsd_status_indexes_ + 2 || _xsd_status_literals_[*i] != *this)
    {
      throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
    }

    return *i;
  }

  const char* const status::
  _xsd_status_literals_[2] =
  {
    "granted",
    "denied"
  };

  const status::value status::
  _xsd_status_indexes_[2] =
  {
    ::xbexsd::status::denied,
    ::xbexsd::status::granted
  };
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xbexsd
{
  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbexsd::message_t > r (
      ::xbexsd::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::message_t > r (
      ::xbexsd::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::message_t > r (
      ::xbexsd::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::message (isrc, f, p);
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::message (isrc, f, p);
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::message (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbexsd::message_t > r (
      ::xbexsd::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::message_t > r (
      ::xbexsd::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::message_t > r (
      ::xbexsd::message (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xbexsd::message_t > r (
        ::xbexsd::message (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "message" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      ::std::auto_ptr< ::xbexsd::message_t > r (
        ::xsd::cxx::tree::traits< ::xbexsd::message_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "message",
      "http://www.xenbee.net/schema/2008/02/xbe");
  }

  ::std::auto_ptr< ::xbexsd::message_t >
  message (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "message" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      ::std::auto_ptr< ::xbexsd::message_t > r (
        ::xsd::cxx::tree::traits< ::xbexsd::message_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "message",
      "http://www.xenbee.net/schema/2008/02/xbe");
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbexsd::body_t > r (
      ::xbexsd::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::body_t > r (
      ::xbexsd::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::body_t > r (
      ::xbexsd::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::body (isrc, f, p);
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::body (isrc, f, p);
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::body (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbexsd::body_t > r (
      ::xbexsd::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::body_t > r (
      ::xbexsd::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::body_t > r (
      ::xbexsd::body (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xbexsd::body_t > r (
        ::xbexsd::body (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "body" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      ::std::auto_ptr< ::xbexsd::body_t > r (
        ::xsd::cxx::tree::traits< ::xbexsd::body_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "body",
      "http://www.xenbee.net/schema/2008/02/xbe");
  }

  ::std::auto_ptr< ::xbexsd::body_t >
  body (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "body" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      ::std::auto_ptr< ::xbexsd::body_t > r (
        ::xsd::cxx::tree::traits< ::xbexsd::body_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "body",
      "http://www.xenbee.net/schema/2008/02/xbe");
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbexsd::header_t > r (
      ::xbexsd::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::header_t > r (
      ::xbexsd::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::header_t > r (
      ::xbexsd::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::header (isrc, f, p);
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::xbexsd::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::header (isrc, f, p);
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::xbexsd::header (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xbexsd::header_t > r (
      ::xbexsd::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::header_t > r (
      ::xbexsd::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xbexsd::header_t > r (
      ::xbexsd::header (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xbexsd::header_t > r (
        ::xbexsd::header (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "header" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      ::std::auto_ptr< ::xbexsd::header_t > r (
        ::xsd::cxx::tree::traits< ::xbexsd::header_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "header",
      "http://www.xenbee.net/schema/2008/02/xbe");
  }

  ::std::auto_ptr< ::xbexsd::header_t >
  header (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "header" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      ::std::auto_ptr< ::xbexsd::header_t > r (
        ::xsd::cxx::tree::traits< ::xbexsd::header_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "header",
      "http://www.xenbee.net/schema/2008/02/xbe");
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace xbexsd
{
  void
  operator<< (::xercesc::DOMElement& e, const ErrorCode& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ErrorCode& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ErrorCode& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const CompressionAlgorithm& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const CompressionAlgorithm& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const CompressionAlgorithm& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const message_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // header
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "header",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.header ();
    }

    // body
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "body",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.body ();
    }

    // protocol-version
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "protocol-version",
          e));

      a << i.protocol_version ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const header_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // from
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "from",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.from ();
    }

    // to
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "to",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.to ();
    }

    // Signature
    //
    if (i.Signature ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "Signature",
          "http://www.w3.org/2000/09/xmldsig#",
          e));

      s << *i.Signature ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const body_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // EncryptedData
    //
    if (i.EncryptedData ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "EncryptedData",
          "http://www.w3.org/2001/04/xmlenc#",
          e));

      s << *i.EncryptedData ();
    }

    // error
    //
    if (i.error ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "error",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *i.error ();
    }

    // certificate-req
    //
    if (i.certificate_req ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "certificate-req",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *i.certificate_req ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const error_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // error-code
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "error-code",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.error_code ();
    }

    // description
    //
    if (i.description ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "description",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *i.description ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const certificate_req_msg& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const certificate_req_msg&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const certificate_req_msg&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const application_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.name ();
    }

    // version
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "version",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.version ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const compression& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // algorithm
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "algorithm",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.algorithm ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const cache_entry_info& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // uri
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "uri",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.uri ();
    }

    // hash
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hash",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.hash ();
    }

    // operating-system
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "operating-system",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.operating_system ();
    }

    // distribution
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "distribution",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.distribution ();
    }

    // size
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "size",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.size ();
    }

    // compression
    //
    if (i.compression ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "compression",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *i.compression ();
    }

    // application
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "application",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.application ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const cache_entry& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // uri
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "uri",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.uri ();
    }

    // id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "id",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.id ();
    }

    // info
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "info",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.info ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const list_cache_msg& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const list_cache_msg&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const list_cache_msg&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const add_to_cache& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entry
    //
    for (add_to_cache::entry_const_iterator
         b (i.entry ().begin ()), n (i.entry ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entry",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const remove_from_cache& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const remove_from_cache&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const remove_from_cache&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const reservation_request& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // start
    //
    if (i.start ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "start",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *i.start ();
    }

    // end
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "end",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.end ();
    }

    // file-space
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "file-space",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.file_space ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const reservation_confirm& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const reservation_confirm&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const reservation_confirm&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const reservation_cancel& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const reservation_cancel&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const reservation_cancel&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const job_start& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const job_start&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const job_start&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const job_status& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const job_status&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const job_status&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const job_terminate& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr&,const job_terminate&)
  {
  }

  void
  operator<< (::xml_schema::list_stream&,
              const job_terminate&)
  {
  }

  void
  operator<< (::xercesc::DOMElement& e, const cache_entries& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // entry
    //
    for (cache_entries::entry_const_iterator
         b (i.entry ().begin ()), n (i.entry ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "entry",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const reservation_response& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // status
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "status",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.status ();
    }

    // ticket
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ticket",
          "http://www.xenbee.net/schema/2008/02/xbe",
          e));

      s << i.ticket ();
    }
  }

  void
  message (::std::ostream& o,
           const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::message (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  message (::std::ostream& o,
           const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::message (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::std::ostream& o,
           const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::message (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::xercesc::XMLFormatTarget& t,
           const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::message (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  message (::xercesc::XMLFormatTarget& t,
           const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::error_handler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::message (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::xercesc::XMLFormatTarget& t,
           const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xercesc::DOMErrorHandler& h,
           const ::std::string& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::message (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  message (::xercesc::DOMDocument& d,
           const ::xbexsd::message_t& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "message" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "message",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  message (const ::xbexsd::message_t& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "message",
          "http://www.xenbee.net/schema/2008/02/xbe",
          m, f));

      ::xbexsd::message (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  body (::std::ostream& o,
        const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::body (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  body (::std::ostream& o,
        const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::error_handler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::body (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::std::ostream& o,
        const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xercesc::DOMErrorHandler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::body (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::xercesc::XMLFormatTarget& t,
        const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::body (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  body (::xercesc::XMLFormatTarget& t,
        const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::error_handler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::body (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::xercesc::XMLFormatTarget& t,
        const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xercesc::DOMErrorHandler& h,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::body (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  body (::xercesc::DOMDocument& d,
        const ::xbexsd::body_t& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "body" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "body",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  body (const ::xbexsd::body_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "body",
          "http://www.xenbee.net/schema/2008/02/xbe",
          m, f));

      ::xbexsd::body (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  header (::std::ostream& o,
          const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::header (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  header (::std::ostream& o,
          const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::header (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::std::ostream& o,
          const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::header (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::xercesc::XMLFormatTarget& t,
          const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::header (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  header (::xercesc::XMLFormatTarget& t,
          const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::error_handler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::header (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::xercesc::XMLFormatTarget& t,
          const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xercesc::DOMErrorHandler& h,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xbexsd::header (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  header (::xercesc::DOMDocument& d,
          const ::xbexsd::header_t& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "header" &&
        n.namespace_ () == "http://www.xenbee.net/schema/2008/02/xbe")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "header",
        "http://www.xenbee.net/schema/2008/02/xbe");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  header (const ::xbexsd::header_t& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    try
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "header",
          "http://www.xenbee.net/schema/2008/02/xbe",
          m, f));

      ::xbexsd::header (*d, s, f);
      return d;
    }
    catch (const ::xsd::cxx::xml::dom::mapping< char >& e)
    {
      throw ::xsd::cxx::tree::no_namespace_mapping< char > (e.name ());
    }
    catch (const ::xsd::cxx::xml::dom::xsi_already_in_use&)
    {
      throw ::xsd::cxx::tree::xsi_already_in_use< char > ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const end& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const end& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const end& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const status& i)
  {
    e << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const status& i)
  {
    a << static_cast< const ::xml_schema::string& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const status& i)
  {
    l << static_cast< const ::xml_schema::string& > (i);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

